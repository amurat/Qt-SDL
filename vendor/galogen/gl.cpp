#include "gl.h"

#include "gl.h"

/* This file was auto-generated by Galogen */
#include <assert.h>
#if defined(_WIN32)
void* GalogenGetProcAddress(const char *name) {
  static HMODULE opengl32module = NULL;
  static PROC(WINAPI *wgl_get_proc_address)(LPCSTR name) = NULL;
  if (!wgl_get_proc_address) {
    if (!opengl32module) {
      opengl32module = LoadLibraryA("opengl32.dll");
    }
    wgl_get_proc_address = (PROC(WINAPI*)(LPCSTR))GetProcAddress(opengl32module, "wglGetProcAddress");
    assert(wgl_get_proc_address);
  }
  void *ptr = (void *)wgl_get_proc_address(name);
  if(ptr == 0 || (ptr == (void*)1) || (ptr == (void*)2) || (ptr == (void*)3) ||
     (ptr == (void*)-1) ) {
    if (opengl32module == NULL) {
      opengl32module = LoadLibraryA("opengl32.dll");
      assert(opengl32module);
    }
    ptr = (void *)GetProcAddress(opengl32module, name);
  }
  return ptr;
}

#elif defined(__APPLE__)
#include <dlfcn.h>
#include <stdlib.h>
#include <stdio.h>

static void* GLESGetProcAddress(const char *name)
{
    static void* lib = NULL;
    char* path = "libGLESv2.dylib";
    if (NULL == lib)
      lib = dlopen(
        path,
        RTLD_LAZY);
    if (NULL == lib) {
        printf("%s\n", dlerror());
    }
    return lib ? dlsym(lib, name) : NULL;
}

static void* GalogenGetProcAddress (const char *name)
{
  static void* lib = NULL;
  char* path = getenv("GALOGEN_GL4ES_LIBRARY");
  if (NULL == path) {
     char* default_path = "/System/Library/Frameworks/OpenGL.framework/Versions/Current/OpenGL";
     path = default_path;
     if (NULL == lib)
        lib = dlopen(
          path,
          RTLD_LAZY);
      return lib ? dlsym(lib, name) : NULL;
  }
    
  if (NULL == lib)
    lib = dlopen(
      path,
      RTLD_LAZY);
  void* (*gl4es_get_proc_address)(char*);
  gl4es_get_proc_address = (void* (*)(char*))dlsym(lib, "gl4es_GetProcAddress");

    static bool gl4es_inited = false;
    if (!gl4es_inited) {
        
        void (*set_getprocaddress)(void*(const char *));
        set_getprocaddress = (void (*)(void*(const char *)))dlsym(lib, "set_getprocaddress");
        set_getprocaddress(GLESGetProcAddress);
        
        void (*initialize_gl4es)(void);
        initialize_gl4es = (void (*)(void))dlsym(lib, "initialize_gl4es");
        initialize_gl4es();
        gl4es_inited = true;
    }
    
  void* func_ptr = gl4es_get_proc_address((char*)name);
  return func_ptr;
}
#elif defined(__ANDROID__)
#include <dlfcn.h>
#if GALOGEN_API_VER_MAJ == 3
#define GALOGEN_GLES_LIB "libGLESv3.so"
#elif GALOGEN_API_VER_MAJ == 2
#define GALOGEN_GLES_LIB "libGLESv2.so"
#else
#define GALOGEN_GLES_LIB "libGLESv1_CM.so"
#endif
static void* GalogenGetProcAddress(const char *name)
{
  static void* lib = NULL;
  if (NULL == lib) {
    lib = dlopen(GALOGEN_GLES_LIB, RTLD_LAZY);
    assert(lib);
  }
  return lib ? dlsym(lib, name) : NULL;
}

#else
#include <stdio.h>
#include <GL/glx.h>
#define GalogenGetProcAddress(name) (*glXGetProcAddressARB)((const GLubyte*)name)

#endif

#define CHECK_ERROR() \
  { GLenum __error = glGetError(); \
    if (__error) \
      printf("OpenGL error 0x%04X in %s\n", __error, __FUNCTION__); \
  }


static void GL_APIENTRY _impl_glGenerateMipmapEXT (GLenum target) {
  printf("* glGenerateMipmapEXT\n");
  _glptr_glGenerateMipmapEXT = (PFN_glGenerateMipmapEXT)GalogenGetProcAddress("glGenerateMipmapEXT");
   _glptr_glGenerateMipmapEXT(target);
  CHECK_ERROR();
  _glptr_glGenerateMipmapEXT = _impl_glGenerateMipmapEXT;
}
PFN_glGenerateMipmapEXT _glptr_glGenerateMipmapEXT = _impl_glGenerateMipmapEXT;

static void GL_APIENTRY _impl_glGetFramebufferAttachmentParameterivEXT (GLenum target, GLenum attachment, GLenum pname, GLint * params) {
  printf("* glGetFramebufferAttachmentParameterivEXT\n");
  _glptr_glGetFramebufferAttachmentParameterivEXT = (PFN_glGetFramebufferAttachmentParameterivEXT)GalogenGetProcAddress("glGetFramebufferAttachmentParameterivEXT");
   _glptr_glGetFramebufferAttachmentParameterivEXT(target, attachment, pname, params);
  CHECK_ERROR();
  _glptr_glGetFramebufferAttachmentParameterivEXT = _impl_glGetFramebufferAttachmentParameterivEXT;
}
PFN_glGetFramebufferAttachmentParameterivEXT _glptr_glGetFramebufferAttachmentParameterivEXT = _impl_glGetFramebufferAttachmentParameterivEXT;

static void GL_APIENTRY _impl_glFramebufferRenderbufferEXT (GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer) {
  printf("* glFramebufferRenderbufferEXT\n");
  _glptr_glFramebufferRenderbufferEXT = (PFN_glFramebufferRenderbufferEXT)GalogenGetProcAddress("glFramebufferRenderbufferEXT");
   _glptr_glFramebufferRenderbufferEXT(target, attachment, renderbuffertarget, renderbuffer);
  CHECK_ERROR();
  _glptr_glFramebufferRenderbufferEXT = _impl_glFramebufferRenderbufferEXT;
}
PFN_glFramebufferRenderbufferEXT _glptr_glFramebufferRenderbufferEXT = _impl_glFramebufferRenderbufferEXT;

static void GL_APIENTRY _impl_glFramebufferTexture3DEXT (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset) {
  printf("* glFramebufferTexture3DEXT\n");
  _glptr_glFramebufferTexture3DEXT = (PFN_glFramebufferTexture3DEXT)GalogenGetProcAddress("glFramebufferTexture3DEXT");
   _glptr_glFramebufferTexture3DEXT(target, attachment, textarget, texture, level, zoffset);
  CHECK_ERROR();
  _glptr_glFramebufferTexture3DEXT = _impl_glFramebufferTexture3DEXT;
}
PFN_glFramebufferTexture3DEXT _glptr_glFramebufferTexture3DEXT = _impl_glFramebufferTexture3DEXT;

static void GL_APIENTRY _impl_glFramebufferTexture1DEXT (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level) {
  printf("* glFramebufferTexture1DEXT\n");
  _glptr_glFramebufferTexture1DEXT = (PFN_glFramebufferTexture1DEXT)GalogenGetProcAddress("glFramebufferTexture1DEXT");
   _glptr_glFramebufferTexture1DEXT(target, attachment, textarget, texture, level);
  CHECK_ERROR();
  _glptr_glFramebufferTexture1DEXT = _impl_glFramebufferTexture1DEXT;
}
PFN_glFramebufferTexture1DEXT _glptr_glFramebufferTexture1DEXT = _impl_glFramebufferTexture1DEXT;

static GLenum GL_APIENTRY _impl_glCheckFramebufferStatusEXT (GLenum target) {
  printf("* glCheckFramebufferStatusEXT\n");
  _glptr_glCheckFramebufferStatusEXT = (PFN_glCheckFramebufferStatusEXT)GalogenGetProcAddress("glCheckFramebufferStatusEXT");
  return _glptr_glCheckFramebufferStatusEXT(target);
  CHECK_ERROR();
  _glptr_glCheckFramebufferStatusEXT = _impl_glCheckFramebufferStatusEXT;
}
PFN_glCheckFramebufferStatusEXT _glptr_glCheckFramebufferStatusEXT = _impl_glCheckFramebufferStatusEXT;

static void GL_APIENTRY _impl_glGenFramebuffersEXT (GLsizei n, GLuint * framebuffers) {
  printf("* glGenFramebuffersEXT\n");
  _glptr_glGenFramebuffersEXT = (PFN_glGenFramebuffersEXT)GalogenGetProcAddress("glGenFramebuffersEXT");
   _glptr_glGenFramebuffersEXT(n, framebuffers);
  CHECK_ERROR();
  _glptr_glGenFramebuffersEXT = _impl_glGenFramebuffersEXT;
}
PFN_glGenFramebuffersEXT _glptr_glGenFramebuffersEXT = _impl_glGenFramebuffersEXT;

static void GL_APIENTRY _impl_glBindFramebufferEXT (GLenum target, GLuint framebuffer) {
  printf("* glBindFramebufferEXT\n");
  _glptr_glBindFramebufferEXT = (PFN_glBindFramebufferEXT)GalogenGetProcAddress("glBindFramebufferEXT");
   _glptr_glBindFramebufferEXT(target, framebuffer);
  CHECK_ERROR();
  _glptr_glBindFramebufferEXT = _impl_glBindFramebufferEXT;
}
PFN_glBindFramebufferEXT _glptr_glBindFramebufferEXT = _impl_glBindFramebufferEXT;

static void GL_APIENTRY _impl_glGetRenderbufferParameterivEXT (GLenum target, GLenum pname, GLint * params) {
  printf("* glGetRenderbufferParameterivEXT\n");
  _glptr_glGetRenderbufferParameterivEXT = (PFN_glGetRenderbufferParameterivEXT)GalogenGetProcAddress("glGetRenderbufferParameterivEXT");
   _glptr_glGetRenderbufferParameterivEXT(target, pname, params);
  CHECK_ERROR();
  _glptr_glGetRenderbufferParameterivEXT = _impl_glGetRenderbufferParameterivEXT;
}
PFN_glGetRenderbufferParameterivEXT _glptr_glGetRenderbufferParameterivEXT = _impl_glGetRenderbufferParameterivEXT;

static void GL_APIENTRY _impl_glRenderbufferStorageEXT (GLenum target, GLenum internalformat, GLsizei width, GLsizei height) {
  printf("* glRenderbufferStorageEXT\n");
  _glptr_glRenderbufferStorageEXT = (PFN_glRenderbufferStorageEXT)GalogenGetProcAddress("glRenderbufferStorageEXT");
   _glptr_glRenderbufferStorageEXT(target, internalformat, width, height);
  CHECK_ERROR();
  _glptr_glRenderbufferStorageEXT = _impl_glRenderbufferStorageEXT;
}
PFN_glRenderbufferStorageEXT _glptr_glRenderbufferStorageEXT = _impl_glRenderbufferStorageEXT;

static void GL_APIENTRY _impl_glGenRenderbuffersEXT (GLsizei n, GLuint * renderbuffers) {
  printf("* glGenRenderbuffersEXT\n");
  _glptr_glGenRenderbuffersEXT = (PFN_glGenRenderbuffersEXT)GalogenGetProcAddress("glGenRenderbuffersEXT");
   _glptr_glGenRenderbuffersEXT(n, renderbuffers);
  CHECK_ERROR();
  _glptr_glGenRenderbuffersEXT = _impl_glGenRenderbuffersEXT;
}
PFN_glGenRenderbuffersEXT _glptr_glGenRenderbuffersEXT = _impl_glGenRenderbuffersEXT;

static void GL_APIENTRY _impl_glDeleteRenderbuffersEXT (GLsizei n, const GLuint * renderbuffers) {
  printf("* glDeleteRenderbuffersEXT\n");
  _glptr_glDeleteRenderbuffersEXT = (PFN_glDeleteRenderbuffersEXT)GalogenGetProcAddress("glDeleteRenderbuffersEXT");
   _glptr_glDeleteRenderbuffersEXT(n, renderbuffers);
  CHECK_ERROR();
  _glptr_glDeleteRenderbuffersEXT = _impl_glDeleteRenderbuffersEXT;
}
PFN_glDeleteRenderbuffersEXT _glptr_glDeleteRenderbuffersEXT = _impl_glDeleteRenderbuffersEXT;

static void GL_APIENTRY _impl_glBindRenderbufferEXT (GLenum target, GLuint renderbuffer) {
  printf("* glBindRenderbufferEXT\n");
  _glptr_glBindRenderbufferEXT = (PFN_glBindRenderbufferEXT)GalogenGetProcAddress("glBindRenderbufferEXT");
   _glptr_glBindRenderbufferEXT(target, renderbuffer);
  CHECK_ERROR();
  _glptr_glBindRenderbufferEXT = _impl_glBindRenderbufferEXT;
}
PFN_glBindRenderbufferEXT _glptr_glBindRenderbufferEXT = _impl_glBindRenderbufferEXT;

static void GL_APIENTRY _impl_glGetVertexAttribPointervARB (GLuint index, GLenum pname, void ** pointer) {
  printf("* glGetVertexAttribPointervARB\n");
  _glptr_glGetVertexAttribPointervARB = (PFN_glGetVertexAttribPointervARB)GalogenGetProcAddress("glGetVertexAttribPointervARB");
   _glptr_glGetVertexAttribPointervARB(index, pname, pointer);
  CHECK_ERROR();
  _glptr_glGetVertexAttribPointervARB = _impl_glGetVertexAttribPointervARB;
}
PFN_glGetVertexAttribPointervARB _glptr_glGetVertexAttribPointervARB = _impl_glGetVertexAttribPointervARB;

static void GL_APIENTRY _impl_glGetVertexAttribivARB (GLuint index, GLenum pname, GLint * params) {
  printf("* glGetVertexAttribivARB\n");
  _glptr_glGetVertexAttribivARB = (PFN_glGetVertexAttribivARB)GalogenGetProcAddress("glGetVertexAttribivARB");
   _glptr_glGetVertexAttribivARB(index, pname, params);
  CHECK_ERROR();
  _glptr_glGetVertexAttribivARB = _impl_glGetVertexAttribivARB;
}
PFN_glGetVertexAttribivARB _glptr_glGetVertexAttribivARB = _impl_glGetVertexAttribivARB;

static void GL_APIENTRY _impl_glGetVertexAttribfvARB (GLuint index, GLenum pname, GLfloat * params) {
  printf("* glGetVertexAttribfvARB\n");
  _glptr_glGetVertexAttribfvARB = (PFN_glGetVertexAttribfvARB)GalogenGetProcAddress("glGetVertexAttribfvARB");
   _glptr_glGetVertexAttribfvARB(index, pname, params);
  CHECK_ERROR();
  _glptr_glGetVertexAttribfvARB = _impl_glGetVertexAttribfvARB;
}
PFN_glGetVertexAttribfvARB _glptr_glGetVertexAttribfvARB = _impl_glGetVertexAttribfvARB;

static void GL_APIENTRY _impl_glGetVertexAttribdvARB (GLuint index, GLenum pname, GLdouble * params) {
  printf("* glGetVertexAttribdvARB\n");
  _glptr_glGetVertexAttribdvARB = (PFN_glGetVertexAttribdvARB)GalogenGetProcAddress("glGetVertexAttribdvARB");
   _glptr_glGetVertexAttribdvARB(index, pname, params);
  CHECK_ERROR();
  _glptr_glGetVertexAttribdvARB = _impl_glGetVertexAttribdvARB;
}
PFN_glGetVertexAttribdvARB _glptr_glGetVertexAttribdvARB = _impl_glGetVertexAttribdvARB;

static void GL_APIENTRY _impl_glGetProgramStringARB (GLenum target, GLenum pname, void * string) {
  printf("* glGetProgramStringARB\n");
  _glptr_glGetProgramStringARB = (PFN_glGetProgramStringARB)GalogenGetProcAddress("glGetProgramStringARB");
   _glptr_glGetProgramStringARB(target, pname, string);
  CHECK_ERROR();
  _glptr_glGetProgramStringARB = _impl_glGetProgramStringARB;
}
PFN_glGetProgramStringARB _glptr_glGetProgramStringARB = _impl_glGetProgramStringARB;

static void GL_APIENTRY _impl_glProgramEnvParameter4fvARB (GLenum target, GLuint index, const GLfloat * params) {
  printf("* glProgramEnvParameter4fvARB\n");
  _glptr_glProgramEnvParameter4fvARB = (PFN_glProgramEnvParameter4fvARB)GalogenGetProcAddress("glProgramEnvParameter4fvARB");
   _glptr_glProgramEnvParameter4fvARB(target, index, params);
  CHECK_ERROR();
  _glptr_glProgramEnvParameter4fvARB = _impl_glProgramEnvParameter4fvARB;
}
PFN_glProgramEnvParameter4fvARB _glptr_glProgramEnvParameter4fvARB = _impl_glProgramEnvParameter4fvARB;

static void GL_APIENTRY _impl_glProgramEnvParameter4fARB (GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) {
  printf("* glProgramEnvParameter4fARB\n");
  _glptr_glProgramEnvParameter4fARB = (PFN_glProgramEnvParameter4fARB)GalogenGetProcAddress("glProgramEnvParameter4fARB");
   _glptr_glProgramEnvParameter4fARB(target, index, x, y, z, w);
  CHECK_ERROR();
  _glptr_glProgramEnvParameter4fARB = _impl_glProgramEnvParameter4fARB;
}
PFN_glProgramEnvParameter4fARB _glptr_glProgramEnvParameter4fARB = _impl_glProgramEnvParameter4fARB;

static void GL_APIENTRY _impl_glProgramEnvParameter4dvARB (GLenum target, GLuint index, const GLdouble * params) {
  printf("* glProgramEnvParameter4dvARB\n");
  _glptr_glProgramEnvParameter4dvARB = (PFN_glProgramEnvParameter4dvARB)GalogenGetProcAddress("glProgramEnvParameter4dvARB");
   _glptr_glProgramEnvParameter4dvARB(target, index, params);
  CHECK_ERROR();
  _glptr_glProgramEnvParameter4dvARB = _impl_glProgramEnvParameter4dvARB;
}
PFN_glProgramEnvParameter4dvARB _glptr_glProgramEnvParameter4dvARB = _impl_glProgramEnvParameter4dvARB;

static void GL_APIENTRY _impl_glProgramEnvParameter4dARB (GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) {
  printf("* glProgramEnvParameter4dARB\n");
  _glptr_glProgramEnvParameter4dARB = (PFN_glProgramEnvParameter4dARB)GalogenGetProcAddress("glProgramEnvParameter4dARB");
   _glptr_glProgramEnvParameter4dARB(target, index, x, y, z, w);
  CHECK_ERROR();
  _glptr_glProgramEnvParameter4dARB = _impl_glProgramEnvParameter4dARB;
}
PFN_glProgramEnvParameter4dARB _glptr_glProgramEnvParameter4dARB = _impl_glProgramEnvParameter4dARB;

static void GL_APIENTRY _impl_glGenProgramsARB (GLsizei n, GLuint * programs) {
  printf("* glGenProgramsARB\n");
  _glptr_glGenProgramsARB = (PFN_glGenProgramsARB)GalogenGetProcAddress("glGenProgramsARB");
   _glptr_glGenProgramsARB(n, programs);
  CHECK_ERROR();
  _glptr_glGenProgramsARB = _impl_glGenProgramsARB;
}
PFN_glGenProgramsARB _glptr_glGenProgramsARB = _impl_glGenProgramsARB;

static void GL_APIENTRY _impl_glGetProgramEnvParameterdvARB (GLenum target, GLuint index, GLdouble * params) {
  printf("* glGetProgramEnvParameterdvARB\n");
  _glptr_glGetProgramEnvParameterdvARB = (PFN_glGetProgramEnvParameterdvARB)GalogenGetProcAddress("glGetProgramEnvParameterdvARB");
   _glptr_glGetProgramEnvParameterdvARB(target, index, params);
  CHECK_ERROR();
  _glptr_glGetProgramEnvParameterdvARB = _impl_glGetProgramEnvParameterdvARB;
}
PFN_glGetProgramEnvParameterdvARB _glptr_glGetProgramEnvParameterdvARB = _impl_glGetProgramEnvParameterdvARB;

static void GL_APIENTRY _impl_glProgramStringARB (GLenum target, GLenum format, GLsizei len, const void * string) {
  printf("* glProgramStringARB\n");
  _glptr_glProgramStringARB = (PFN_glProgramStringARB)GalogenGetProcAddress("glProgramStringARB");
   _glptr_glProgramStringARB(target, format, len, string);
  CHECK_ERROR();
  _glptr_glProgramStringARB = _impl_glProgramStringARB;
}
PFN_glProgramStringARB _glptr_glProgramStringARB = _impl_glProgramStringARB;

static void GL_APIENTRY _impl_glEnableVertexAttribArrayARB (GLuint index) {
  printf("* glEnableVertexAttribArrayARB\n");
  _glptr_glEnableVertexAttribArrayARB = (PFN_glEnableVertexAttribArrayARB)GalogenGetProcAddress("glEnableVertexAttribArrayARB");
   _glptr_glEnableVertexAttribArrayARB(index);
  CHECK_ERROR();
  _glptr_glEnableVertexAttribArrayARB = _impl_glEnableVertexAttribArrayARB;
}
PFN_glEnableVertexAttribArrayARB _glptr_glEnableVertexAttribArrayARB = _impl_glEnableVertexAttribArrayARB;

static void GL_APIENTRY _impl_glVertexAttribPointerARB (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void * pointer) {
  printf("* glVertexAttribPointerARB\n");
  _glptr_glVertexAttribPointerARB = (PFN_glVertexAttribPointerARB)GalogenGetProcAddress("glVertexAttribPointerARB");
   _glptr_glVertexAttribPointerARB(index, size, type, normalized, stride, pointer);
  CHECK_ERROR();
  _glptr_glVertexAttribPointerARB = _impl_glVertexAttribPointerARB;
}
PFN_glVertexAttribPointerARB _glptr_glVertexAttribPointerARB = _impl_glVertexAttribPointerARB;

static void GL_APIENTRY _impl_glVertexAttrib4ubvARB (GLuint index, const GLubyte * v) {
  printf("* glVertexAttrib4ubvARB\n");
  _glptr_glVertexAttrib4ubvARB = (PFN_glVertexAttrib4ubvARB)GalogenGetProcAddress("glVertexAttrib4ubvARB");
   _glptr_glVertexAttrib4ubvARB(index, v);
  CHECK_ERROR();
  _glptr_glVertexAttrib4ubvARB = _impl_glVertexAttrib4ubvARB;
}
PFN_glVertexAttrib4ubvARB _glptr_glVertexAttrib4ubvARB = _impl_glVertexAttrib4ubvARB;

static void GL_APIENTRY _impl_glVertexAttrib4svARB (GLuint index, const GLshort * v) {
  printf("* glVertexAttrib4svARB\n");
  _glptr_glVertexAttrib4svARB = (PFN_glVertexAttrib4svARB)GalogenGetProcAddress("glVertexAttrib4svARB");
   _glptr_glVertexAttrib4svARB(index, v);
  CHECK_ERROR();
  _glptr_glVertexAttrib4svARB = _impl_glVertexAttrib4svARB;
}
PFN_glVertexAttrib4svARB _glptr_glVertexAttrib4svARB = _impl_glVertexAttrib4svARB;

static void GL_APIENTRY _impl_glVertexAttrib4ivARB (GLuint index, const GLint * v) {
  printf("* glVertexAttrib4ivARB\n");
  _glptr_glVertexAttrib4ivARB = (PFN_glVertexAttrib4ivARB)GalogenGetProcAddress("glVertexAttrib4ivARB");
   _glptr_glVertexAttrib4ivARB(index, v);
  CHECK_ERROR();
  _glptr_glVertexAttrib4ivARB = _impl_glVertexAttrib4ivARB;
}
PFN_glVertexAttrib4ivARB _glptr_glVertexAttrib4ivARB = _impl_glVertexAttrib4ivARB;

static void GL_APIENTRY _impl_glVertexAttrib4dARB (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) {
  printf("* glVertexAttrib4dARB\n");
  _glptr_glVertexAttrib4dARB = (PFN_glVertexAttrib4dARB)GalogenGetProcAddress("glVertexAttrib4dARB");
   _glptr_glVertexAttrib4dARB(index, x, y, z, w);
  CHECK_ERROR();
  _glptr_glVertexAttrib4dARB = _impl_glVertexAttrib4dARB;
}
PFN_glVertexAttrib4dARB _glptr_glVertexAttrib4dARB = _impl_glVertexAttrib4dARB;

static void GL_APIENTRY _impl_glVertexAttrib4NubvARB (GLuint index, const GLubyte * v) {
  printf("* glVertexAttrib4NubvARB\n");
  _glptr_glVertexAttrib4NubvARB = (PFN_glVertexAttrib4NubvARB)GalogenGetProcAddress("glVertexAttrib4NubvARB");
   _glptr_glVertexAttrib4NubvARB(index, v);
  CHECK_ERROR();
  _glptr_glVertexAttrib4NubvARB = _impl_glVertexAttrib4NubvARB;
}
PFN_glVertexAttrib4NubvARB _glptr_glVertexAttrib4NubvARB = _impl_glVertexAttrib4NubvARB;

static void GL_APIENTRY _impl_glVertexAttrib4NubARB (GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w) {
  printf("* glVertexAttrib4NubARB\n");
  _glptr_glVertexAttrib4NubARB = (PFN_glVertexAttrib4NubARB)GalogenGetProcAddress("glVertexAttrib4NubARB");
   _glptr_glVertexAttrib4NubARB(index, x, y, z, w);
  CHECK_ERROR();
  _glptr_glVertexAttrib4NubARB = _impl_glVertexAttrib4NubARB;
}
PFN_glVertexAttrib4NubARB _glptr_glVertexAttrib4NubARB = _impl_glVertexAttrib4NubARB;

static void GL_APIENTRY _impl_glVertexAttrib4NivARB (GLuint index, const GLint * v) {
  printf("* glVertexAttrib4NivARB\n");
  _glptr_glVertexAttrib4NivARB = (PFN_glVertexAttrib4NivARB)GalogenGetProcAddress("glVertexAttrib4NivARB");
   _glptr_glVertexAttrib4NivARB(index, v);
  CHECK_ERROR();
  _glptr_glVertexAttrib4NivARB = _impl_glVertexAttrib4NivARB;
}
PFN_glVertexAttrib4NivARB _glptr_glVertexAttrib4NivARB = _impl_glVertexAttrib4NivARB;

static void GL_APIENTRY _impl_glVertexAttrib4NbvARB (GLuint index, const GLbyte * v) {
  printf("* glVertexAttrib4NbvARB\n");
  _glptr_glVertexAttrib4NbvARB = (PFN_glVertexAttrib4NbvARB)GalogenGetProcAddress("glVertexAttrib4NbvARB");
   _glptr_glVertexAttrib4NbvARB(index, v);
  CHECK_ERROR();
  _glptr_glVertexAttrib4NbvARB = _impl_glVertexAttrib4NbvARB;
}
PFN_glVertexAttrib4NbvARB _glptr_glVertexAttrib4NbvARB = _impl_glVertexAttrib4NbvARB;

static void GL_APIENTRY _impl_glVertexAttrib3svARB (GLuint index, const GLshort * v) {
  printf("* glVertexAttrib3svARB\n");
  _glptr_glVertexAttrib3svARB = (PFN_glVertexAttrib3svARB)GalogenGetProcAddress("glVertexAttrib3svARB");
   _glptr_glVertexAttrib3svARB(index, v);
  CHECK_ERROR();
  _glptr_glVertexAttrib3svARB = _impl_glVertexAttrib3svARB;
}
PFN_glVertexAttrib3svARB _glptr_glVertexAttrib3svARB = _impl_glVertexAttrib3svARB;

static void GL_APIENTRY _impl_glVertexAttrib3sARB (GLuint index, GLshort x, GLshort y, GLshort z) {
  printf("* glVertexAttrib3sARB\n");
  _glptr_glVertexAttrib3sARB = (PFN_glVertexAttrib3sARB)GalogenGetProcAddress("glVertexAttrib3sARB");
   _glptr_glVertexAttrib3sARB(index, x, y, z);
  CHECK_ERROR();
  _glptr_glVertexAttrib3sARB = _impl_glVertexAttrib3sARB;
}
PFN_glVertexAttrib3sARB _glptr_glVertexAttrib3sARB = _impl_glVertexAttrib3sARB;

static void GL_APIENTRY _impl_glVertexAttrib3dvARB (GLuint index, const GLdouble * v) {
  printf("* glVertexAttrib3dvARB\n");
  _glptr_glVertexAttrib3dvARB = (PFN_glVertexAttrib3dvARB)GalogenGetProcAddress("glVertexAttrib3dvARB");
   _glptr_glVertexAttrib3dvARB(index, v);
  CHECK_ERROR();
  _glptr_glVertexAttrib3dvARB = _impl_glVertexAttrib3dvARB;
}
PFN_glVertexAttrib3dvARB _glptr_glVertexAttrib3dvARB = _impl_glVertexAttrib3dvARB;

static void GL_APIENTRY _impl_glVertexAttrib2sARB (GLuint index, GLshort x, GLshort y) {
  printf("* glVertexAttrib2sARB\n");
  _glptr_glVertexAttrib2sARB = (PFN_glVertexAttrib2sARB)GalogenGetProcAddress("glVertexAttrib2sARB");
   _glptr_glVertexAttrib2sARB(index, x, y);
  CHECK_ERROR();
  _glptr_glVertexAttrib2sARB = _impl_glVertexAttrib2sARB;
}
PFN_glVertexAttrib2sARB _glptr_glVertexAttrib2sARB = _impl_glVertexAttrib2sARB;

static void GL_APIENTRY _impl_glVertexAttrib2fvARB (GLuint index, const GLfloat * v) {
  printf("* glVertexAttrib2fvARB\n");
  _glptr_glVertexAttrib2fvARB = (PFN_glVertexAttrib2fvARB)GalogenGetProcAddress("glVertexAttrib2fvARB");
   _glptr_glVertexAttrib2fvARB(index, v);
  CHECK_ERROR();
  _glptr_glVertexAttrib2fvARB = _impl_glVertexAttrib2fvARB;
}
PFN_glVertexAttrib2fvARB _glptr_glVertexAttrib2fvARB = _impl_glVertexAttrib2fvARB;

static void GL_APIENTRY _impl_glVertexAttrib2dvARB (GLuint index, const GLdouble * v) {
  printf("* glVertexAttrib2dvARB\n");
  _glptr_glVertexAttrib2dvARB = (PFN_glVertexAttrib2dvARB)GalogenGetProcAddress("glVertexAttrib2dvARB");
   _glptr_glVertexAttrib2dvARB(index, v);
  CHECK_ERROR();
  _glptr_glVertexAttrib2dvARB = _impl_glVertexAttrib2dvARB;
}
PFN_glVertexAttrib2dvARB _glptr_glVertexAttrib2dvARB = _impl_glVertexAttrib2dvARB;

static void GL_APIENTRY _impl_glVertexAttrib1svARB (GLuint index, const GLshort * v) {
  printf("* glVertexAttrib1svARB\n");
  _glptr_glVertexAttrib1svARB = (PFN_glVertexAttrib1svARB)GalogenGetProcAddress("glVertexAttrib1svARB");
   _glptr_glVertexAttrib1svARB(index, v);
  CHECK_ERROR();
  _glptr_glVertexAttrib1svARB = _impl_glVertexAttrib1svARB;
}
PFN_glVertexAttrib1svARB _glptr_glVertexAttrib1svARB = _impl_glVertexAttrib1svARB;

static void GL_APIENTRY _impl_glVertexAttrib1sARB (GLuint index, GLshort x) {
  printf("* glVertexAttrib1sARB\n");
  _glptr_glVertexAttrib1sARB = (PFN_glVertexAttrib1sARB)GalogenGetProcAddress("glVertexAttrib1sARB");
   _glptr_glVertexAttrib1sARB(index, x);
  CHECK_ERROR();
  _glptr_glVertexAttrib1sARB = _impl_glVertexAttrib1sARB;
}
PFN_glVertexAttrib1sARB _glptr_glVertexAttrib1sARB = _impl_glVertexAttrib1sARB;

static void GL_APIENTRY _impl_glVertexAttrib1fvARB (GLuint index, const GLfloat * v) {
  printf("* glVertexAttrib1fvARB\n");
  _glptr_glVertexAttrib1fvARB = (PFN_glVertexAttrib1fvARB)GalogenGetProcAddress("glVertexAttrib1fvARB");
   _glptr_glVertexAttrib1fvARB(index, v);
  CHECK_ERROR();
  _glptr_glVertexAttrib1fvARB = _impl_glVertexAttrib1fvARB;
}
PFN_glVertexAttrib1fvARB _glptr_glVertexAttrib1fvARB = _impl_glVertexAttrib1fvARB;

static void GL_APIENTRY _impl_glVertexAttrib1dvARB (GLuint index, const GLdouble * v) {
  printf("* glVertexAttrib1dvARB\n");
  _glptr_glVertexAttrib1dvARB = (PFN_glVertexAttrib1dvARB)GalogenGetProcAddress("glVertexAttrib1dvARB");
   _glptr_glVertexAttrib1dvARB(index, v);
  CHECK_ERROR();
  _glptr_glVertexAttrib1dvARB = _impl_glVertexAttrib1dvARB;
}
PFN_glVertexAttrib1dvARB _glptr_glVertexAttrib1dvARB = _impl_glVertexAttrib1dvARB;

static void GL_APIENTRY _impl_glGetCompressedTexImageARB (GLenum target, GLint level, void * img) {
  printf("* glGetCompressedTexImageARB\n");
  _glptr_glGetCompressedTexImageARB = (PFN_glGetCompressedTexImageARB)GalogenGetProcAddress("glGetCompressedTexImageARB");
   _glptr_glGetCompressedTexImageARB(target, level, img);
  CHECK_ERROR();
  _glptr_glGetCompressedTexImageARB = _impl_glGetCompressedTexImageARB;
}
PFN_glGetCompressedTexImageARB _glptr_glGetCompressedTexImageARB = _impl_glGetCompressedTexImageARB;

static void GL_APIENTRY _impl_glCompressedTexSubImage1DARB (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void * data) {
  printf("* glCompressedTexSubImage1DARB\n");
  _glptr_glCompressedTexSubImage1DARB = (PFN_glCompressedTexSubImage1DARB)GalogenGetProcAddress("glCompressedTexSubImage1DARB");
   _glptr_glCompressedTexSubImage1DARB(target, level, xoffset, width, format, imageSize, data);
  CHECK_ERROR();
  _glptr_glCompressedTexSubImage1DARB = _impl_glCompressedTexSubImage1DARB;
}
PFN_glCompressedTexSubImage1DARB _glptr_glCompressedTexSubImage1DARB = _impl_glCompressedTexSubImage1DARB;

static void GL_APIENTRY _impl_glCompressedTexSubImage3DARB (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void * data) {
  printf("* glCompressedTexSubImage3DARB\n");
  _glptr_glCompressedTexSubImage3DARB = (PFN_glCompressedTexSubImage3DARB)GalogenGetProcAddress("glCompressedTexSubImage3DARB");
   _glptr_glCompressedTexSubImage3DARB(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
  CHECK_ERROR();
  _glptr_glCompressedTexSubImage3DARB = _impl_glCompressedTexSubImage3DARB;
}
PFN_glCompressedTexSubImage3DARB _glptr_glCompressedTexSubImage3DARB = _impl_glCompressedTexSubImage3DARB;

static void GL_APIENTRY _impl_glCompressedTexImage2DARB (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void * data) {
  printf("* glCompressedTexImage2DARB\n");
  _glptr_glCompressedTexImage2DARB = (PFN_glCompressedTexImage2DARB)GalogenGetProcAddress("glCompressedTexImage2DARB");
   _glptr_glCompressedTexImage2DARB(target, level, internalformat, width, height, border, imageSize, data);
  CHECK_ERROR();
  _glptr_glCompressedTexImage2DARB = _impl_glCompressedTexImage2DARB;
}
PFN_glCompressedTexImage2DARB _glptr_glCompressedTexImage2DARB = _impl_glCompressedTexImage2DARB;

static void GL_APIENTRY _impl_glCompressedTexImage3DARB (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void * data) {
  printf("* glCompressedTexImage3DARB\n");
  _glptr_glCompressedTexImage3DARB = (PFN_glCompressedTexImage3DARB)GalogenGetProcAddress("glCompressedTexImage3DARB");
   _glptr_glCompressedTexImage3DARB(target, level, internalformat, width, height, depth, border, imageSize, data);
  CHECK_ERROR();
  _glptr_glCompressedTexImage3DARB = _impl_glCompressedTexImage3DARB;
}
PFN_glCompressedTexImage3DARB _glptr_glCompressedTexImage3DARB = _impl_glCompressedTexImage3DARB;

static void GL_APIENTRY _impl_glFramebufferTextureLayer (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer) {
  printf("* glFramebufferTextureLayer\n");
  _glptr_glFramebufferTextureLayer = (PFN_glFramebufferTextureLayer)GalogenGetProcAddress("glFramebufferTextureLayer");
   _glptr_glFramebufferTextureLayer(target, attachment, texture, level, layer);
  CHECK_ERROR();
  _glptr_glFramebufferTextureLayer = _impl_glFramebufferTextureLayer;
}
PFN_glFramebufferTextureLayer _glptr_glFramebufferTextureLayer = _impl_glFramebufferTextureLayer;

static void GL_APIENTRY _impl_glRenderbufferStorageMultisample (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) {
  printf("* glRenderbufferStorageMultisample\n");
  _glptr_glRenderbufferStorageMultisample = (PFN_glRenderbufferStorageMultisample)GalogenGetProcAddress("glRenderbufferStorageMultisample");
   _glptr_glRenderbufferStorageMultisample(target, samples, internalformat, width, height);
  CHECK_ERROR();
  _glptr_glRenderbufferStorageMultisample = _impl_glRenderbufferStorageMultisample;
}
PFN_glRenderbufferStorageMultisample _glptr_glRenderbufferStorageMultisample = _impl_glRenderbufferStorageMultisample;

static void GL_APIENTRY _impl_glBlitFramebuffer (GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter) {
  printf("* glBlitFramebuffer\n");
  _glptr_glBlitFramebuffer = (PFN_glBlitFramebuffer)GalogenGetProcAddress("glBlitFramebuffer");
   _glptr_glBlitFramebuffer(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
  CHECK_ERROR();
  _glptr_glBlitFramebuffer = _impl_glBlitFramebuffer;
}
PFN_glBlitFramebuffer _glptr_glBlitFramebuffer = _impl_glBlitFramebuffer;

static void GL_APIENTRY _impl_glGenerateMipmap (GLenum target) {
  printf("* glGenerateMipmap\n");
  _glptr_glGenerateMipmap = (PFN_glGenerateMipmap)GalogenGetProcAddress("glGenerateMipmap");
   _glptr_glGenerateMipmap(target);
  CHECK_ERROR();
  _glptr_glGenerateMipmap = _impl_glGenerateMipmap;
}
PFN_glGenerateMipmap _glptr_glGenerateMipmap = _impl_glGenerateMipmap;

static void GL_APIENTRY _impl_glFramebufferRenderbuffer (GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer) {
  printf("* glFramebufferRenderbuffer\n");
  _glptr_glFramebufferRenderbuffer = (PFN_glFramebufferRenderbuffer)GalogenGetProcAddress("glFramebufferRenderbuffer");
   _glptr_glFramebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer);
  CHECK_ERROR();
  _glptr_glFramebufferRenderbuffer = _impl_glFramebufferRenderbuffer;
}
PFN_glFramebufferRenderbuffer _glptr_glFramebufferRenderbuffer = _impl_glFramebufferRenderbuffer;

static void GL_APIENTRY _impl_glFramebufferTexture3D (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset) {
  printf("* glFramebufferTexture3D\n");
  _glptr_glFramebufferTexture3D = (PFN_glFramebufferTexture3D)GalogenGetProcAddress("glFramebufferTexture3D");
   _glptr_glFramebufferTexture3D(target, attachment, textarget, texture, level, zoffset);
  CHECK_ERROR();
  _glptr_glFramebufferTexture3D = _impl_glFramebufferTexture3D;
}
PFN_glFramebufferTexture3D _glptr_glFramebufferTexture3D = _impl_glFramebufferTexture3D;

static void GL_APIENTRY _impl_glFramebufferTexture2D (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level) {
  printf("* glFramebufferTexture2D\n");
  _glptr_glFramebufferTexture2D = (PFN_glFramebufferTexture2D)GalogenGetProcAddress("glFramebufferTexture2D");
   _glptr_glFramebufferTexture2D(target, attachment, textarget, texture, level);
  CHECK_ERROR();
  _glptr_glFramebufferTexture2D = _impl_glFramebufferTexture2D;
}
PFN_glFramebufferTexture2D _glptr_glFramebufferTexture2D = _impl_glFramebufferTexture2D;

static void GL_APIENTRY _impl_glGenFramebuffers (GLsizei n, GLuint * framebuffers) {
  printf("* glGenFramebuffers\n");
  _glptr_glGenFramebuffers = (PFN_glGenFramebuffers)GalogenGetProcAddress("glGenFramebuffers");
   _glptr_glGenFramebuffers(n, framebuffers);
  CHECK_ERROR();
  _glptr_glGenFramebuffers = _impl_glGenFramebuffers;
}
PFN_glGenFramebuffers _glptr_glGenFramebuffers = _impl_glGenFramebuffers;

static void GL_APIENTRY _impl_glBindFramebuffer (GLenum target, GLuint framebuffer) {
  printf("* glBindFramebuffer\n");
  _glptr_glBindFramebuffer = (PFN_glBindFramebuffer)GalogenGetProcAddress("glBindFramebuffer");
   _glptr_glBindFramebuffer(target, framebuffer);
  CHECK_ERROR();
  _glptr_glBindFramebuffer = _impl_glBindFramebuffer;
}
PFN_glBindFramebuffer _glptr_glBindFramebuffer = _impl_glBindFramebuffer;

static void GL_APIENTRY _impl_glGetRenderbufferParameteriv (GLenum target, GLenum pname, GLint * params) {
  printf("* glGetRenderbufferParameteriv\n");
  _glptr_glGetRenderbufferParameteriv = (PFN_glGetRenderbufferParameteriv)GalogenGetProcAddress("glGetRenderbufferParameteriv");
   _glptr_glGetRenderbufferParameteriv(target, pname, params);
  CHECK_ERROR();
  _glptr_glGetRenderbufferParameteriv = _impl_glGetRenderbufferParameteriv;
}
PFN_glGetRenderbufferParameteriv _glptr_glGetRenderbufferParameteriv = _impl_glGetRenderbufferParameteriv;

static void GL_APIENTRY _impl_glGenRenderbuffers (GLsizei n, GLuint * renderbuffers) {
  printf("* glGenRenderbuffers\n");
  _glptr_glGenRenderbuffers = (PFN_glGenRenderbuffers)GalogenGetProcAddress("glGenRenderbuffers");
   _glptr_glGenRenderbuffers(n, renderbuffers);
  CHECK_ERROR();
  _glptr_glGenRenderbuffers = _impl_glGenRenderbuffers;
}
PFN_glGenRenderbuffers _glptr_glGenRenderbuffers = _impl_glGenRenderbuffers;

static GLboolean GL_APIENTRY _impl_glIsRenderbuffer (GLuint renderbuffer) {
  printf("* glIsRenderbuffer\n");
  _glptr_glIsRenderbuffer = (PFN_glIsRenderbuffer)GalogenGetProcAddress("glIsRenderbuffer");
  return _glptr_glIsRenderbuffer(renderbuffer);
  CHECK_ERROR();
  _glptr_glIsRenderbuffer = _impl_glIsRenderbuffer;
}
PFN_glIsRenderbuffer _glptr_glIsRenderbuffer = _impl_glIsRenderbuffer;

static void GL_APIENTRY _impl_glUniformMatrix4x3fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) {
  printf("* glUniformMatrix4x3fv\n");
  _glptr_glUniformMatrix4x3fv = (PFN_glUniformMatrix4x3fv)GalogenGetProcAddress("glUniformMatrix4x3fv");
   _glptr_glUniformMatrix4x3fv(location, count, transpose, value);
  CHECK_ERROR();
  _glptr_glUniformMatrix4x3fv = _impl_glUniformMatrix4x3fv;
}
PFN_glUniformMatrix4x3fv _glptr_glUniformMatrix4x3fv = _impl_glUniformMatrix4x3fv;

static void GL_APIENTRY _impl_glUniformMatrix4x2fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) {
  printf("* glUniformMatrix4x2fv\n");
  _glptr_glUniformMatrix4x2fv = (PFN_glUniformMatrix4x2fv)GalogenGetProcAddress("glUniformMatrix4x2fv");
   _glptr_glUniformMatrix4x2fv(location, count, transpose, value);
  CHECK_ERROR();
  _glptr_glUniformMatrix4x2fv = _impl_glUniformMatrix4x2fv;
}
PFN_glUniformMatrix4x2fv _glptr_glUniformMatrix4x2fv = _impl_glUniformMatrix4x2fv;

static void GL_APIENTRY _impl_glUniformMatrix2x4fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) {
  printf("* glUniformMatrix2x4fv\n");
  _glptr_glUniformMatrix2x4fv = (PFN_glUniformMatrix2x4fv)GalogenGetProcAddress("glUniformMatrix2x4fv");
   _glptr_glUniformMatrix2x4fv(location, count, transpose, value);
  CHECK_ERROR();
  _glptr_glUniformMatrix2x4fv = _impl_glUniformMatrix2x4fv;
}
PFN_glUniformMatrix2x4fv _glptr_glUniformMatrix2x4fv = _impl_glUniformMatrix2x4fv;

static void GL_APIENTRY _impl_glUniformMatrix3x2fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) {
  printf("* glUniformMatrix3x2fv\n");
  _glptr_glUniformMatrix3x2fv = (PFN_glUniformMatrix3x2fv)GalogenGetProcAddress("glUniformMatrix3x2fv");
   _glptr_glUniformMatrix3x2fv(location, count, transpose, value);
  CHECK_ERROR();
  _glptr_glUniformMatrix3x2fv = _impl_glUniformMatrix3x2fv;
}
PFN_glUniformMatrix3x2fv _glptr_glUniformMatrix3x2fv = _impl_glUniformMatrix3x2fv;

static void GL_APIENTRY _impl_glVertexAttribPointer (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void * pointer) {
  printf("* glVertexAttribPointer\n");
  _glptr_glVertexAttribPointer = (PFN_glVertexAttribPointer)GalogenGetProcAddress("glVertexAttribPointer");
   _glptr_glVertexAttribPointer(index, size, type, normalized, stride, pointer);
  CHECK_ERROR();
  _glptr_glVertexAttribPointer = _impl_glVertexAttribPointer;
}
PFN_glVertexAttribPointer _glptr_glVertexAttribPointer = _impl_glVertexAttribPointer;

static void GL_APIENTRY _impl_glVertexAttrib4ubv (GLuint index, const GLubyte * v) {
  printf("* glVertexAttrib4ubv\n");
  _glptr_glVertexAttrib4ubv = (PFN_glVertexAttrib4ubv)GalogenGetProcAddress("glVertexAttrib4ubv");
   _glptr_glVertexAttrib4ubv(index, v);
  CHECK_ERROR();
  _glptr_glVertexAttrib4ubv = _impl_glVertexAttrib4ubv;
}
PFN_glVertexAttrib4ubv _glptr_glVertexAttrib4ubv = _impl_glVertexAttrib4ubv;

static void GL_APIENTRY _impl_glVertexAttrib1dARB (GLuint index, GLdouble x) {
  printf("* glVertexAttrib1dARB\n");
  _glptr_glVertexAttrib1dARB = (PFN_glVertexAttrib1dARB)GalogenGetProcAddress("glVertexAttrib1dARB");
   _glptr_glVertexAttrib1dARB(index, x);
  CHECK_ERROR();
  _glptr_glVertexAttrib1dARB = _impl_glVertexAttrib1dARB;
}
PFN_glVertexAttrib1dARB _glptr_glVertexAttrib1dARB = _impl_glVertexAttrib1dARB;

static void GL_APIENTRY _impl_glVertexAttrib4f (GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) {
  printf("* glVertexAttrib4f\n");
  _glptr_glVertexAttrib4f = (PFN_glVertexAttrib4f)GalogenGetProcAddress("glVertexAttrib4f");
   _glptr_glVertexAttrib4f(index, x, y, z, w);
  CHECK_ERROR();
  _glptr_glVertexAttrib4f = _impl_glVertexAttrib4f;
}
PFN_glVertexAttrib4f _glptr_glVertexAttrib4f = _impl_glVertexAttrib4f;

static void GL_APIENTRY _impl_glVertexAttrib4Nubv (GLuint index, const GLubyte * v) {
  printf("* glVertexAttrib4Nubv\n");
  _glptr_glVertexAttrib4Nubv = (PFN_glVertexAttrib4Nubv)GalogenGetProcAddress("glVertexAttrib4Nubv");
   _glptr_glVertexAttrib4Nubv(index, v);
  CHECK_ERROR();
  _glptr_glVertexAttrib4Nubv = _impl_glVertexAttrib4Nubv;
}
PFN_glVertexAttrib4Nubv _glptr_glVertexAttrib4Nubv = _impl_glVertexAttrib4Nubv;

static void GL_APIENTRY _impl_glVertexAttrib3sv (GLuint index, const GLshort * v) {
  printf("* glVertexAttrib3sv\n");
  _glptr_glVertexAttrib3sv = (PFN_glVertexAttrib3sv)GalogenGetProcAddress("glVertexAttrib3sv");
   _glptr_glVertexAttrib3sv(index, v);
  CHECK_ERROR();
  _glptr_glVertexAttrib3sv = _impl_glVertexAttrib3sv;
}
PFN_glVertexAttrib3sv _glptr_glVertexAttrib3sv = _impl_glVertexAttrib3sv;

static void GL_APIENTRY _impl_glVertexAttrib3fv (GLuint index, const GLfloat * v) {
  printf("* glVertexAttrib3fv\n");
  _glptr_glVertexAttrib3fv = (PFN_glVertexAttrib3fv)GalogenGetProcAddress("glVertexAttrib3fv");
   _glptr_glVertexAttrib3fv(index, v);
  CHECK_ERROR();
  _glptr_glVertexAttrib3fv = _impl_glVertexAttrib3fv;
}
PFN_glVertexAttrib3fv _glptr_glVertexAttrib3fv = _impl_glVertexAttrib3fv;

static void GL_APIENTRY _impl_glVertexAttrib3dv (GLuint index, const GLdouble * v) {
  printf("* glVertexAttrib3dv\n");
  _glptr_glVertexAttrib3dv = (PFN_glVertexAttrib3dv)GalogenGetProcAddress("glVertexAttrib3dv");
   _glptr_glVertexAttrib3dv(index, v);
  CHECK_ERROR();
  _glptr_glVertexAttrib3dv = _impl_glVertexAttrib3dv;
}
PFN_glVertexAttrib3dv _glptr_glVertexAttrib3dv = _impl_glVertexAttrib3dv;

static void GL_APIENTRY _impl_glVertexAttrib3d (GLuint index, GLdouble x, GLdouble y, GLdouble z) {
  printf("* glVertexAttrib3d\n");
  _glptr_glVertexAttrib3d = (PFN_glVertexAttrib3d)GalogenGetProcAddress("glVertexAttrib3d");
   _glptr_glVertexAttrib3d(index, x, y, z);
  CHECK_ERROR();
  _glptr_glVertexAttrib3d = _impl_glVertexAttrib3d;
}
PFN_glVertexAttrib3d _glptr_glVertexAttrib3d = _impl_glVertexAttrib3d;

static void GL_APIENTRY _impl_glVertexAttrib2f (GLuint index, GLfloat x, GLfloat y) {
  printf("* glVertexAttrib2f\n");
  _glptr_glVertexAttrib2f = (PFN_glVertexAttrib2f)GalogenGetProcAddress("glVertexAttrib2f");
   _glptr_glVertexAttrib2f(index, x, y);
  CHECK_ERROR();
  _glptr_glVertexAttrib2f = _impl_glVertexAttrib2f;
}
PFN_glVertexAttrib2f _glptr_glVertexAttrib2f = _impl_glVertexAttrib2f;

static void GL_APIENTRY _impl_glVertexAttrib2d (GLuint index, GLdouble x, GLdouble y) {
  printf("* glVertexAttrib2d\n");
  _glptr_glVertexAttrib2d = (PFN_glVertexAttrib2d)GalogenGetProcAddress("glVertexAttrib2d");
   _glptr_glVertexAttrib2d(index, x, y);
  CHECK_ERROR();
  _glptr_glVertexAttrib2d = _impl_glVertexAttrib2d;
}
PFN_glVertexAttrib2d _glptr_glVertexAttrib2d = _impl_glVertexAttrib2d;

static void GL_APIENTRY _impl_glVertexAttrib1sv (GLuint index, const GLshort * v) {
  printf("* glVertexAttrib1sv\n");
  _glptr_glVertexAttrib1sv = (PFN_glVertexAttrib1sv)GalogenGetProcAddress("glVertexAttrib1sv");
   _glptr_glVertexAttrib1sv(index, v);
  CHECK_ERROR();
  _glptr_glVertexAttrib1sv = _impl_glVertexAttrib1sv;
}
PFN_glVertexAttrib1sv _glptr_glVertexAttrib1sv = _impl_glVertexAttrib1sv;

static void GL_APIENTRY _impl_glVertexAttrib1s (GLuint index, GLshort x) {
  printf("* glVertexAttrib1s\n");
  _glptr_glVertexAttrib1s = (PFN_glVertexAttrib1s)GalogenGetProcAddress("glVertexAttrib1s");
   _glptr_glVertexAttrib1s(index, x);
  CHECK_ERROR();
  _glptr_glVertexAttrib1s = _impl_glVertexAttrib1s;
}
PFN_glVertexAttrib1s _glptr_glVertexAttrib1s = _impl_glVertexAttrib1s;

static void GL_APIENTRY _impl_glVertexAttrib1fv (GLuint index, const GLfloat * v) {
  printf("* glVertexAttrib1fv\n");
  _glptr_glVertexAttrib1fv = (PFN_glVertexAttrib1fv)GalogenGetProcAddress("glVertexAttrib1fv");
   _glptr_glVertexAttrib1fv(index, v);
  CHECK_ERROR();
  _glptr_glVertexAttrib1fv = _impl_glVertexAttrib1fv;
}
PFN_glVertexAttrib1fv _glptr_glVertexAttrib1fv = _impl_glVertexAttrib1fv;

static void GL_APIENTRY _impl_glVertexAttrib1f (GLuint index, GLfloat x) {
  printf("* glVertexAttrib1f\n");
  _glptr_glVertexAttrib1f = (PFN_glVertexAttrib1f)GalogenGetProcAddress("glVertexAttrib1f");
   _glptr_glVertexAttrib1f(index, x);
  CHECK_ERROR();
  _glptr_glVertexAttrib1f = _impl_glVertexAttrib1f;
}
PFN_glVertexAttrib1f _glptr_glVertexAttrib1f = _impl_glVertexAttrib1f;

static void GL_APIENTRY _impl_glVertexAttrib1d (GLuint index, GLdouble x) {
  printf("* glVertexAttrib1d\n");
  _glptr_glVertexAttrib1d = (PFN_glVertexAttrib1d)GalogenGetProcAddress("glVertexAttrib1d");
   _glptr_glVertexAttrib1d(index, x);
  CHECK_ERROR();
  _glptr_glVertexAttrib1d = _impl_glVertexAttrib1d;
}
PFN_glVertexAttrib1d _glptr_glVertexAttrib1d = _impl_glVertexAttrib1d;

static void GL_APIENTRY _impl_glUniformMatrix2fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) {
  printf("* glUniformMatrix2fv\n");
  _glptr_glUniformMatrix2fv = (PFN_glUniformMatrix2fv)GalogenGetProcAddress("glUniformMatrix2fv");
   _glptr_glUniformMatrix2fv(location, count, transpose, value);
  CHECK_ERROR();
  _glptr_glUniformMatrix2fv = _impl_glUniformMatrix2fv;
}
PFN_glUniformMatrix2fv _glptr_glUniformMatrix2fv = _impl_glUniformMatrix2fv;

static void GL_APIENTRY _impl_glUniform3iv (GLint location, GLsizei count, const GLint * value) {
  printf("* glUniform3iv\n");
  _glptr_glUniform3iv = (PFN_glUniform3iv)GalogenGetProcAddress("glUniform3iv");
   _glptr_glUniform3iv(location, count, value);
  CHECK_ERROR();
  _glptr_glUniform3iv = _impl_glUniform3iv;
}
PFN_glUniform3iv _glptr_glUniform3iv = _impl_glUniform3iv;

static void GL_APIENTRY _impl_glUniform3fv (GLint location, GLsizei count, const GLfloat * value) {
  printf("* glUniform3fv\n");
  _glptr_glUniform3fv = (PFN_glUniform3fv)GalogenGetProcAddress("glUniform3fv");
   _glptr_glUniform3fv(location, count, value);
  CHECK_ERROR();
  _glptr_glUniform3fv = _impl_glUniform3fv;
}
PFN_glUniform3fv _glptr_glUniform3fv = _impl_glUniform3fv;

static void GL_APIENTRY _impl_glUniform2fv (GLint location, GLsizei count, const GLfloat * value) {
  printf("* glUniform2fv\n");
  _glptr_glUniform2fv = (PFN_glUniform2fv)GalogenGetProcAddress("glUniform2fv");
   _glptr_glUniform2fv(location, count, value);
  CHECK_ERROR();
  _glptr_glUniform2fv = _impl_glUniform2fv;
}
PFN_glUniform2fv _glptr_glUniform2fv = _impl_glUniform2fv;

static void GL_APIENTRY _impl_glUniform4i (GLint location, GLint v0, GLint v1, GLint v2, GLint v3) {
  printf("* glUniform4i\n");
  _glptr_glUniform4i = (PFN_glUniform4i)GalogenGetProcAddress("glUniform4i");
   _glptr_glUniform4i(location, v0, v1, v2, v3);
  CHECK_ERROR();
  _glptr_glUniform4i = _impl_glUniform4i;
}
PFN_glUniform4i _glptr_glUniform4i = _impl_glUniform4i;

static void GL_APIENTRY _impl_glUniform3i (GLint location, GLint v0, GLint v1, GLint v2) {
  printf("* glUniform3i\n");
  _glptr_glUniform3i = (PFN_glUniform3i)GalogenGetProcAddress("glUniform3i");
   _glptr_glUniform3i(location, v0, v1, v2);
  CHECK_ERROR();
  _glptr_glUniform3i = _impl_glUniform3i;
}
PFN_glUniform3i _glptr_glUniform3i = _impl_glUniform3i;

static void GL_APIENTRY _impl_glUniform2i (GLint location, GLint v0, GLint v1) {
  printf("* glUniform2i\n");
  _glptr_glUniform2i = (PFN_glUniform2i)GalogenGetProcAddress("glUniform2i");
   _glptr_glUniform2i(location, v0, v1);
  CHECK_ERROR();
  _glptr_glUniform2i = _impl_glUniform2i;
}
PFN_glUniform2i _glptr_glUniform2i = _impl_glUniform2i;

static void GL_APIENTRY _impl_glUniform4f (GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3) {
  printf("* glUniform4f\n");
  _glptr_glUniform4f = (PFN_glUniform4f)GalogenGetProcAddress("glUniform4f");
   _glptr_glUniform4f(location, v0, v1, v2, v3);
  CHECK_ERROR();
  _glptr_glUniform4f = _impl_glUniform4f;
}
PFN_glUniform4f _glptr_glUniform4f = _impl_glUniform4f;

static void GL_APIENTRY _impl_glUseProgram (GLuint program) {
  printf("* glUseProgram\n");
  _glptr_glUseProgram = (PFN_glUseProgram)GalogenGetProcAddress("glUseProgram");
   _glptr_glUseProgram(program);
  CHECK_ERROR();
  _glptr_glUseProgram = _impl_glUseProgram;
}
PFN_glUseProgram _glptr_glUseProgram = _impl_glUseProgram;

static GLboolean GL_APIENTRY _impl_glIsShader (GLuint shader) {
  printf("* glIsShader\n");
  _glptr_glIsShader = (PFN_glIsShader)GalogenGetProcAddress("glIsShader");
  return _glptr_glIsShader(shader);
  CHECK_ERROR();
  _glptr_glIsShader = _impl_glIsShader;
}
PFN_glIsShader _glptr_glIsShader = _impl_glIsShader;

static GLboolean GL_APIENTRY _impl_glIsProgram (GLuint program) {
  printf("* glIsProgram\n");
  _glptr_glIsProgram = (PFN_glIsProgram)GalogenGetProcAddress("glIsProgram");
  return _glptr_glIsProgram(program);
  CHECK_ERROR();
  _glptr_glIsProgram = _impl_glIsProgram;
}
PFN_glIsProgram _glptr_glIsProgram = _impl_glIsProgram;

static void GL_APIENTRY _impl_glGetVertexAttribiv (GLuint index, GLenum pname, GLint * params) {
  printf("* glGetVertexAttribiv\n");
  _glptr_glGetVertexAttribiv = (PFN_glGetVertexAttribiv)GalogenGetProcAddress("glGetVertexAttribiv");
   _glptr_glGetVertexAttribiv(index, pname, params);
  CHECK_ERROR();
  _glptr_glGetVertexAttribiv = _impl_glGetVertexAttribiv;
}
PFN_glGetVertexAttribiv _glptr_glGetVertexAttribiv = _impl_glGetVertexAttribiv;

static void GL_APIENTRY _impl_glDeleteProgramsARB (GLsizei n, const GLuint * programs) {
  printf("* glDeleteProgramsARB\n");
  _glptr_glDeleteProgramsARB = (PFN_glDeleteProgramsARB)GalogenGetProcAddress("glDeleteProgramsARB");
   _glptr_glDeleteProgramsARB(n, programs);
  CHECK_ERROR();
  _glptr_glDeleteProgramsARB = _impl_glDeleteProgramsARB;
}
PFN_glDeleteProgramsARB _glptr_glDeleteProgramsARB = _impl_glDeleteProgramsARB;

static void GL_APIENTRY _impl_glGetVertexAttribfv (GLuint index, GLenum pname, GLfloat * params) {
  printf("* glGetVertexAttribfv\n");
  _glptr_glGetVertexAttribfv = (PFN_glGetVertexAttribfv)GalogenGetProcAddress("glGetVertexAttribfv");
   _glptr_glGetVertexAttribfv(index, pname, params);
  CHECK_ERROR();
  _glptr_glGetVertexAttribfv = _impl_glGetVertexAttribfv;
}
PFN_glGetVertexAttribfv _glptr_glGetVertexAttribfv = _impl_glGetVertexAttribfv;

static void GL_APIENTRY _impl_glGetUniformfv (GLuint program, GLint location, GLfloat * params) {
  printf("* glGetUniformfv\n");
  _glptr_glGetUniformfv = (PFN_glGetUniformfv)GalogenGetProcAddress("glGetUniformfv");
   _glptr_glGetUniformfv(program, location, params);
  CHECK_ERROR();
  _glptr_glGetUniformfv = _impl_glGetUniformfv;
}
PFN_glGetUniformfv _glptr_glGetUniformfv = _impl_glGetUniformfv;

static void GL_APIENTRY _impl_glGetShaderSource (GLuint shader, GLsizei bufSize, GLsizei * length, GLchar * source) {
  printf("* glGetShaderSource\n");
  _glptr_glGetShaderSource = (PFN_glGetShaderSource)GalogenGetProcAddress("glGetShaderSource");
   _glptr_glGetShaderSource(shader, bufSize, length, source);
  CHECK_ERROR();
  _glptr_glGetShaderSource = _impl_glGetShaderSource;
}
PFN_glGetShaderSource _glptr_glGetShaderSource = _impl_glGetShaderSource;

static void GL_APIENTRY _impl_glGetProgramInfoLog (GLuint program, GLsizei bufSize, GLsizei * length, GLchar * infoLog) {
  printf("* glGetProgramInfoLog\n");
  _glptr_glGetProgramInfoLog = (PFN_glGetProgramInfoLog)GalogenGetProcAddress("glGetProgramInfoLog");
   _glptr_glGetProgramInfoLog(program, bufSize, length, infoLog);
  CHECK_ERROR();
  _glptr_glGetProgramInfoLog = _impl_glGetProgramInfoLog;
}
PFN_glGetProgramInfoLog _glptr_glGetProgramInfoLog = _impl_glGetProgramInfoLog;

static void GL_APIENTRY _impl_glGetShaderiv (GLuint shader, GLenum pname, GLint * params) {
  printf("* glGetShaderiv\n");
  _glptr_glGetShaderiv = (PFN_glGetShaderiv)GalogenGetProcAddress("glGetShaderiv");
   _glptr_glGetShaderiv(shader, pname, params);
  CHECK_ERROR();
  _glptr_glGetShaderiv = _impl_glGetShaderiv;
}
PFN_glGetShaderiv _glptr_glGetShaderiv = _impl_glGetShaderiv;

static void GL_APIENTRY _impl_glGetProgramiv (GLuint program, GLenum pname, GLint * params) {
  printf("* glGetProgramiv\n");
  _glptr_glGetProgramiv = (PFN_glGetProgramiv)GalogenGetProcAddress("glGetProgramiv");
   _glptr_glGetProgramiv(program, pname, params);
  CHECK_ERROR();
  _glptr_glGetProgramiv = _impl_glGetProgramiv;
}
PFN_glGetProgramiv _glptr_glGetProgramiv = _impl_glGetProgramiv;

static void GL_APIENTRY _impl_glGetActiveAttrib (GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLint * size, GLenum * type, GLchar * name) {
  printf("* glGetActiveAttrib\n");
  _glptr_glGetActiveAttrib = (PFN_glGetActiveAttrib)GalogenGetProcAddress("glGetActiveAttrib");
   _glptr_glGetActiveAttrib(program, index, bufSize, length, size, type, name);
  CHECK_ERROR();
  _glptr_glGetActiveAttrib = _impl_glGetActiveAttrib;
}
PFN_glGetActiveAttrib _glptr_glGetActiveAttrib = _impl_glGetActiveAttrib;

static void GL_APIENTRY _impl_glDetachShader (GLuint program, GLuint shader) {
  printf("* glDetachShader\n");
  _glptr_glDetachShader = (PFN_glDetachShader)GalogenGetProcAddress("glDetachShader");
   _glptr_glDetachShader(program, shader);
  CHECK_ERROR();
  _glptr_glDetachShader = _impl_glDetachShader;
}
PFN_glDetachShader _glptr_glDetachShader = _impl_glDetachShader;

static void GL_APIENTRY _impl_glDeleteProgram (GLuint program) {
  printf("* glDeleteProgram\n");
  _glptr_glDeleteProgram = (PFN_glDeleteProgram)GalogenGetProcAddress("glDeleteProgram");
   _glptr_glDeleteProgram(program);
  CHECK_ERROR();
  _glptr_glDeleteProgram = _impl_glDeleteProgram;
}
PFN_glDeleteProgram _glptr_glDeleteProgram = _impl_glDeleteProgram;

static GLuint GL_APIENTRY _impl_glCreateProgram () {
  printf("* glCreateProgram\n");
  _glptr_glCreateProgram = (PFN_glCreateProgram)GalogenGetProcAddress("glCreateProgram");
  return _glptr_glCreateProgram();
  CHECK_ERROR();
  _glptr_glCreateProgram = _impl_glCreateProgram;
}
PFN_glCreateProgram _glptr_glCreateProgram = _impl_glCreateProgram;

static void GL_APIENTRY _impl_glAttachShader (GLuint program, GLuint shader) {
  printf("* glAttachShader\n");
  _glptr_glAttachShader = (PFN_glAttachShader)GalogenGetProcAddress("glAttachShader");
   _glptr_glAttachShader(program, shader);
  CHECK_ERROR();
  _glptr_glAttachShader = _impl_glAttachShader;
}
PFN_glAttachShader _glptr_glAttachShader = _impl_glAttachShader;

static void GL_APIENTRY _impl_glStencilMaskSeparate (GLenum face, GLuint mask) {
  printf("* glStencilMaskSeparate\n");
  _glptr_glStencilMaskSeparate = (PFN_glStencilMaskSeparate)GalogenGetProcAddress("glStencilMaskSeparate");
   _glptr_glStencilMaskSeparate(face, mask);
  CHECK_ERROR();
  _glptr_glStencilMaskSeparate = _impl_glStencilMaskSeparate;
}
PFN_glStencilMaskSeparate _glptr_glStencilMaskSeparate = _impl_glStencilMaskSeparate;

static void GL_APIENTRY _impl_glStencilFuncSeparate (GLenum face, GLenum func, GLint ref, GLuint mask) {
  printf("* glStencilFuncSeparate\n");
  _glptr_glStencilFuncSeparate = (PFN_glStencilFuncSeparate)GalogenGetProcAddress("glStencilFuncSeparate");
   _glptr_glStencilFuncSeparate(face, func, ref, mask);
  CHECK_ERROR();
  _glptr_glStencilFuncSeparate = _impl_glStencilFuncSeparate;
}
PFN_glStencilFuncSeparate _glptr_glStencilFuncSeparate = _impl_glStencilFuncSeparate;

static void GL_APIENTRY _impl_glUniformMatrix3x4fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) {
  printf("* glUniformMatrix3x4fv\n");
  _glptr_glUniformMatrix3x4fv = (PFN_glUniformMatrix3x4fv)GalogenGetProcAddress("glUniformMatrix3x4fv");
   _glptr_glUniformMatrix3x4fv(location, count, transpose, value);
  CHECK_ERROR();
  _glptr_glUniformMatrix3x4fv = _impl_glUniformMatrix3x4fv;
}
PFN_glUniformMatrix3x4fv _glptr_glUniformMatrix3x4fv = _impl_glUniformMatrix3x4fv;

static void GL_APIENTRY _impl_glBlendEquationSeparate (GLenum modeRGB, GLenum modeAlpha) {
  printf("* glBlendEquationSeparate\n");
  _glptr_glBlendEquationSeparate = (PFN_glBlendEquationSeparate)GalogenGetProcAddress("glBlendEquationSeparate");
   _glptr_glBlendEquationSeparate(modeRGB, modeAlpha);
  CHECK_ERROR();
  _glptr_glBlendEquationSeparate = _impl_glBlendEquationSeparate;
}
PFN_glBlendEquationSeparate _glptr_glBlendEquationSeparate = _impl_glBlendEquationSeparate;

static GLboolean GL_APIENTRY _impl_glIsProgramARB (GLuint program) {
  printf("* glIsProgramARB\n");
  _glptr_glIsProgramARB = (PFN_glIsProgramARB)GalogenGetProcAddress("glIsProgramARB");
  return _glptr_glIsProgramARB(program);
  CHECK_ERROR();
  _glptr_glIsProgramARB = _impl_glIsProgramARB;
}
PFN_glIsProgramARB _glptr_glIsProgramARB = _impl_glIsProgramARB;

static void GL_APIENTRY _impl_glGetBufferPointerv (GLenum target, GLenum pname, void ** params) {
  printf("* glGetBufferPointerv\n");
  _glptr_glGetBufferPointerv = (PFN_glGetBufferPointerv)GalogenGetProcAddress("glGetBufferPointerv");
   _glptr_glGetBufferPointerv(target, pname, params);
  CHECK_ERROR();
  _glptr_glGetBufferPointerv = _impl_glGetBufferPointerv;
}
PFN_glGetBufferPointerv _glptr_glGetBufferPointerv = _impl_glGetBufferPointerv;

static void GL_APIENTRY _impl_glProgramLocalParameter4dARB (GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) {
  printf("* glProgramLocalParameter4dARB\n");
  _glptr_glProgramLocalParameter4dARB = (PFN_glProgramLocalParameter4dARB)GalogenGetProcAddress("glProgramLocalParameter4dARB");
   _glptr_glProgramLocalParameter4dARB(target, index, x, y, z, w);
  CHECK_ERROR();
  _glptr_glProgramLocalParameter4dARB = _impl_glProgramLocalParameter4dARB;
}
PFN_glProgramLocalParameter4dARB _glptr_glProgramLocalParameter4dARB = _impl_glProgramLocalParameter4dARB;

static void GL_APIENTRY _impl_glGetBufferParameteriv (GLenum target, GLenum pname, GLint * params) {
  printf("* glGetBufferParameteriv\n");
  _glptr_glGetBufferParameteriv = (PFN_glGetBufferParameteriv)GalogenGetProcAddress("glGetBufferParameteriv");
   _glptr_glGetBufferParameteriv(target, pname, params);
  CHECK_ERROR();
  _glptr_glGetBufferParameteriv = _impl_glGetBufferParameteriv;
}
PFN_glGetBufferParameteriv _glptr_glGetBufferParameteriv = _impl_glGetBufferParameteriv;

static GLboolean GL_APIENTRY _impl_glUnmapBuffer (GLenum target) {
  printf("* glUnmapBuffer\n");
  _glptr_glUnmapBuffer = (PFN_glUnmapBuffer)GalogenGetProcAddress("glUnmapBuffer");
  return _glptr_glUnmapBuffer(target);
  CHECK_ERROR();
  _glptr_glUnmapBuffer = _impl_glUnmapBuffer;
}
PFN_glUnmapBuffer _glptr_glUnmapBuffer = _impl_glUnmapBuffer;

static void GL_APIENTRY _impl_glVertexAttrib4usv (GLuint index, const GLushort * v) {
  printf("* glVertexAttrib4usv\n");
  _glptr_glVertexAttrib4usv = (PFN_glVertexAttrib4usv)GalogenGetProcAddress("glVertexAttrib4usv");
   _glptr_glVertexAttrib4usv(index, v);
  CHECK_ERROR();
  _glptr_glVertexAttrib4usv = _impl_glVertexAttrib4usv;
}
PFN_glVertexAttrib4usv _glptr_glVertexAttrib4usv = _impl_glVertexAttrib4usv;

static void GL_APIENTRY _impl_glGetBufferSubData (GLenum target, GLintptr offset, GLsizeiptr size, void * data) {
  printf("* glGetBufferSubData\n");
  _glptr_glGetBufferSubData = (PFN_glGetBufferSubData)GalogenGetProcAddress("glGetBufferSubData");
   _glptr_glGetBufferSubData(target, offset, size, data);
  CHECK_ERROR();
  _glptr_glGetBufferSubData = _impl_glGetBufferSubData;
}
PFN_glGetBufferSubData _glptr_glGetBufferSubData = _impl_glGetBufferSubData;

static void GL_APIENTRY _impl_glBufferData (GLenum target, GLsizeiptr size, const void * data, GLenum usage) {
  printf("* glBufferData\n");
  _glptr_glBufferData = (PFN_glBufferData)GalogenGetProcAddress("glBufferData");
   _glptr_glBufferData(target, size, data, usage);
  CHECK_ERROR();
  _glptr_glBufferData = _impl_glBufferData;
}
PFN_glBufferData _glptr_glBufferData = _impl_glBufferData;

static GLboolean GL_APIENTRY _impl_glIsBuffer (GLuint buffer) {
  printf("* glIsBuffer\n");
  _glptr_glIsBuffer = (PFN_glIsBuffer)GalogenGetProcAddress("glIsBuffer");
  return _glptr_glIsBuffer(buffer);
  CHECK_ERROR();
  _glptr_glIsBuffer = _impl_glIsBuffer;
}
PFN_glIsBuffer _glptr_glIsBuffer = _impl_glIsBuffer;

static void GL_APIENTRY _impl_glGenBuffers (GLsizei n, GLuint * buffers) {
  printf("* glGenBuffers\n");
  _glptr_glGenBuffers = (PFN_glGenBuffers)GalogenGetProcAddress("glGenBuffers");
   _glptr_glGenBuffers(n, buffers);
  CHECK_ERROR();
  _glptr_glGenBuffers = _impl_glGenBuffers;
}
PFN_glGenBuffers _glptr_glGenBuffers = _impl_glGenBuffers;

static void GL_APIENTRY _impl_glDeleteBuffers (GLsizei n, const GLuint * buffers) {
  printf("* glDeleteBuffers\n");
  _glptr_glDeleteBuffers = (PFN_glDeleteBuffers)GalogenGetProcAddress("glDeleteBuffers");
   _glptr_glDeleteBuffers(n, buffers);
  CHECK_ERROR();
  _glptr_glDeleteBuffers = _impl_glDeleteBuffers;
}
PFN_glDeleteBuffers _glptr_glDeleteBuffers = _impl_glDeleteBuffers;

static void GL_APIENTRY _impl_glBindBuffer (GLenum target, GLuint buffer) {
  printf("* glBindBuffer\n");
  _glptr_glBindBuffer = (PFN_glBindBuffer)GalogenGetProcAddress("glBindBuffer");
   _glptr_glBindBuffer(target, buffer);
  CHECK_ERROR();
  _glptr_glBindBuffer = _impl_glBindBuffer;
}
PFN_glBindBuffer _glptr_glBindBuffer = _impl_glBindBuffer;

static void GL_APIENTRY _impl_glGetQueryObjectuiv (GLuint id, GLenum pname, GLuint * params) {
  printf("* glGetQueryObjectuiv\n");
  _glptr_glGetQueryObjectuiv = (PFN_glGetQueryObjectuiv)GalogenGetProcAddress("glGetQueryObjectuiv");
   _glptr_glGetQueryObjectuiv(id, pname, params);
  CHECK_ERROR();
  _glptr_glGetQueryObjectuiv = _impl_glGetQueryObjectuiv;
}
PFN_glGetQueryObjectuiv _glptr_glGetQueryObjectuiv = _impl_glGetQueryObjectuiv;

static void GL_APIENTRY _impl_glGetAttachedShaders (GLuint program, GLsizei maxCount, GLsizei * count, GLuint * shaders) {
  printf("* glGetAttachedShaders\n");
  _glptr_glGetAttachedShaders = (PFN_glGetAttachedShaders)GalogenGetProcAddress("glGetAttachedShaders");
   _glptr_glGetAttachedShaders(program, maxCount, count, shaders);
  CHECK_ERROR();
  _glptr_glGetAttachedShaders = _impl_glGetAttachedShaders;
}
PFN_glGetAttachedShaders _glptr_glGetAttachedShaders = _impl_glGetAttachedShaders;

static void GL_APIENTRY _impl_glGetQueryiv (GLenum target, GLenum pname, GLint * params) {
  printf("* glGetQueryiv\n");
  _glptr_glGetQueryiv = (PFN_glGetQueryiv)GalogenGetProcAddress("glGetQueryiv");
   _glptr_glGetQueryiv(target, pname, params);
  CHECK_ERROR();
  _glptr_glGetQueryiv = _impl_glGetQueryiv;
}
PFN_glGetQueryiv _glptr_glGetQueryiv = _impl_glGetQueryiv;

static void GL_APIENTRY _impl_glEndQuery (GLenum target) {
  printf("* glEndQuery\n");
  _glptr_glEndQuery = (PFN_glEndQuery)GalogenGetProcAddress("glEndQuery");
   _glptr_glEndQuery(target);
  CHECK_ERROR();
  _glptr_glEndQuery = _impl_glEndQuery;
}
PFN_glEndQuery _glptr_glEndQuery = _impl_glEndQuery;

static GLboolean GL_APIENTRY _impl_glIsQuery (GLuint id) {
  printf("* glIsQuery\n");
  _glptr_glIsQuery = (PFN_glIsQuery)GalogenGetProcAddress("glIsQuery");
  return _glptr_glIsQuery(id);
  CHECK_ERROR();
  _glptr_glIsQuery = _impl_glIsQuery;
}
PFN_glIsQuery _glptr_glIsQuery = _impl_glIsQuery;

static void GL_APIENTRY _impl_glDeleteQueries (GLsizei n, const GLuint * ids) {
  printf("* glDeleteQueries\n");
  _glptr_glDeleteQueries = (PFN_glDeleteQueries)GalogenGetProcAddress("glDeleteQueries");
   _glptr_glDeleteQueries(n, ids);
  CHECK_ERROR();
  _glptr_glDeleteQueries = _impl_glDeleteQueries;
}
PFN_glDeleteQueries _glptr_glDeleteQueries = _impl_glDeleteQueries;

static void GL_APIENTRY _impl_glGenQueries (GLsizei n, GLuint * ids) {
  printf("* glGenQueries\n");
  _glptr_glGenQueries = (PFN_glGenQueries)GalogenGetProcAddress("glGenQueries");
   _glptr_glGenQueries(n, ids);
  CHECK_ERROR();
  _glptr_glGenQueries = _impl_glGenQueries;
}
PFN_glGenQueries _glptr_glGenQueries = _impl_glGenQueries;

static void GL_APIENTRY _impl_glVertexAttrib2dARB (GLuint index, GLdouble x, GLdouble y) {
  printf("* glVertexAttrib2dARB\n");
  _glptr_glVertexAttrib2dARB = (PFN_glVertexAttrib2dARB)GalogenGetProcAddress("glVertexAttrib2dARB");
   _glptr_glVertexAttrib2dARB(index, x, y);
  CHECK_ERROR();
  _glptr_glVertexAttrib2dARB = _impl_glVertexAttrib2dARB;
}
PFN_glVertexAttrib2dARB _glptr_glVertexAttrib2dARB = _impl_glVertexAttrib2dARB;

static void GL_APIENTRY _impl_glBlendEquation (GLenum mode) {
  printf("* glBlendEquation\n");
  _glptr_glBlendEquation = (PFN_glBlendEquation)GalogenGetProcAddress("glBlendEquation");
   _glptr_glBlendEquation(mode);
  CHECK_ERROR();
  _glptr_glBlendEquation = _impl_glBlendEquation;
}
PFN_glBlendEquation _glptr_glBlendEquation = _impl_glBlendEquation;

static void GL_APIENTRY _impl_glBlendColor (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha) {
  printf("* glBlendColor\n");
  _glptr_glBlendColor = (PFN_glBlendColor)GalogenGetProcAddress("glBlendColor");
   _glptr_glBlendColor(red, green, blue, alpha);
  CHECK_ERROR();
  _glptr_glBlendColor = _impl_glBlendColor;
}
PFN_glBlendColor _glptr_glBlendColor = _impl_glBlendColor;

static void GL_APIENTRY _impl_glWindowPos3sv (const GLshort * v) {
  printf("* glWindowPos3sv\n");
  _glptr_glWindowPos3sv = (PFN_glWindowPos3sv)GalogenGetProcAddress("glWindowPos3sv");
   _glptr_glWindowPos3sv(v);
  CHECK_ERROR();
  _glptr_glWindowPos3sv = _impl_glWindowPos3sv;
}
PFN_glWindowPos3sv _glptr_glWindowPos3sv = _impl_glWindowPos3sv;

static void GL_APIENTRY _impl_glDrawBuffers (GLsizei n, const GLenum * bufs) {
  printf("* glDrawBuffers\n");
  _glptr_glDrawBuffers = (PFN_glDrawBuffers)GalogenGetProcAddress("glDrawBuffers");
   _glptr_glDrawBuffers(n, bufs);
  CHECK_ERROR();
  _glptr_glDrawBuffers = _impl_glDrawBuffers;
}
PFN_glDrawBuffers _glptr_glDrawBuffers = _impl_glDrawBuffers;

static void GL_APIENTRY _impl_glWindowPos3i (GLint x, GLint y, GLint z) {
  printf("* glWindowPos3i\n");
  _glptr_glWindowPos3i = (PFN_glWindowPos3i)GalogenGetProcAddress("glWindowPos3i");
   _glptr_glWindowPos3i(x, y, z);
  CHECK_ERROR();
  _glptr_glWindowPos3i = _impl_glWindowPos3i;
}
PFN_glWindowPos3i _glptr_glWindowPos3i = _impl_glWindowPos3i;

static void GL_APIENTRY _impl_glWindowPos3fv (const GLfloat * v) {
  printf("* glWindowPos3fv\n");
  _glptr_glWindowPos3fv = (PFN_glWindowPos3fv)GalogenGetProcAddress("glWindowPos3fv");
   _glptr_glWindowPos3fv(v);
  CHECK_ERROR();
  _glptr_glWindowPos3fv = _impl_glWindowPos3fv;
}
PFN_glWindowPos3fv _glptr_glWindowPos3fv = _impl_glWindowPos3fv;

static void GL_APIENTRY _impl_glWindowPos3dv (const GLdouble * v) {
  printf("* glWindowPos3dv\n");
  _glptr_glWindowPos3dv = (PFN_glWindowPos3dv)GalogenGetProcAddress("glWindowPos3dv");
   _glptr_glWindowPos3dv(v);
  CHECK_ERROR();
  _glptr_glWindowPos3dv = _impl_glWindowPos3dv;
}
PFN_glWindowPos3dv _glptr_glWindowPos3dv = _impl_glWindowPos3dv;

static void GL_APIENTRY _impl_glWindowPos3d (GLdouble x, GLdouble y, GLdouble z) {
  printf("* glWindowPos3d\n");
  _glptr_glWindowPos3d = (PFN_glWindowPos3d)GalogenGetProcAddress("glWindowPos3d");
   _glptr_glWindowPos3d(x, y, z);
  CHECK_ERROR();
  _glptr_glWindowPos3d = _impl_glWindowPos3d;
}
PFN_glWindowPos3d _glptr_glWindowPos3d = _impl_glWindowPos3d;

static void GL_APIENTRY _impl_glFramebufferTexture1D (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level) {
  printf("* glFramebufferTexture1D\n");
  _glptr_glFramebufferTexture1D = (PFN_glFramebufferTexture1D)GalogenGetProcAddress("glFramebufferTexture1D");
   _glptr_glFramebufferTexture1D(target, attachment, textarget, texture, level);
  CHECK_ERROR();
  _glptr_glFramebufferTexture1D = _impl_glFramebufferTexture1D;
}
PFN_glFramebufferTexture1D _glptr_glFramebufferTexture1D = _impl_glFramebufferTexture1D;

static void GL_APIENTRY _impl_glWindowPos2sv (const GLshort * v) {
  printf("* glWindowPos2sv\n");
  _glptr_glWindowPos2sv = (PFN_glWindowPos2sv)GalogenGetProcAddress("glWindowPos2sv");
   _glptr_glWindowPos2sv(v);
  CHECK_ERROR();
  _glptr_glWindowPos2sv = _impl_glWindowPos2sv;
}
PFN_glWindowPos2sv _glptr_glWindowPos2sv = _impl_glWindowPos2sv;

static void GL_APIENTRY _impl_glWindowPos2iv (const GLint * v) {
  printf("* glWindowPos2iv\n");
  _glptr_glWindowPos2iv = (PFN_glWindowPos2iv)GalogenGetProcAddress("glWindowPos2iv");
   _glptr_glWindowPos2iv(v);
  CHECK_ERROR();
  _glptr_glWindowPos2iv = _impl_glWindowPos2iv;
}
PFN_glWindowPos2iv _glptr_glWindowPos2iv = _impl_glWindowPos2iv;

static void GL_APIENTRY _impl_glUniform4fv (GLint location, GLsizei count, const GLfloat * value) {
  printf("* glUniform4fv\n");
  _glptr_glUniform4fv = (PFN_glUniform4fv)GalogenGetProcAddress("glUniform4fv");
   _glptr_glUniform4fv(location, count, value);
  CHECK_ERROR();
  _glptr_glUniform4fv = _impl_glUniform4fv;
}
PFN_glUniform4fv _glptr_glUniform4fv = _impl_glUniform4fv;

static void GL_APIENTRY _impl_glWindowPos2i (GLint x, GLint y) {
  printf("* glWindowPos2i\n");
  _glptr_glWindowPos2i = (PFN_glWindowPos2i)GalogenGetProcAddress("glWindowPos2i");
   _glptr_glWindowPos2i(x, y);
  CHECK_ERROR();
  _glptr_glWindowPos2i = _impl_glWindowPos2i;
}
PFN_glWindowPos2i _glptr_glWindowPos2i = _impl_glWindowPos2i;

static void GL_APIENTRY _impl_glWindowPos2fv (const GLfloat * v) {
  printf("* glWindowPos2fv\n");
  _glptr_glWindowPos2fv = (PFN_glWindowPos2fv)GalogenGetProcAddress("glWindowPos2fv");
   _glptr_glWindowPos2fv(v);
  CHECK_ERROR();
  _glptr_glWindowPos2fv = _impl_glWindowPos2fv;
}
PFN_glWindowPos2fv _glptr_glWindowPos2fv = _impl_glWindowPos2fv;

static void GL_APIENTRY _impl_glWindowPos2d (GLdouble x, GLdouble y) {
  printf("* glWindowPos2d\n");
  _glptr_glWindowPos2d = (PFN_glWindowPos2d)GalogenGetProcAddress("glWindowPos2d");
   _glptr_glWindowPos2d(x, y);
  CHECK_ERROR();
  _glptr_glWindowPos2d = _impl_glWindowPos2d;
}
PFN_glWindowPos2d _glptr_glWindowPos2d = _impl_glWindowPos2d;

static void GL_APIENTRY _impl_glSecondaryColorPointer (GLint size, GLenum type, GLsizei stride, const void * pointer) {
  printf("* glSecondaryColorPointer\n");
  _glptr_glSecondaryColorPointer = (PFN_glSecondaryColorPointer)GalogenGetProcAddress("glSecondaryColorPointer");
   _glptr_glSecondaryColorPointer(size, type, stride, pointer);
  CHECK_ERROR();
  _glptr_glSecondaryColorPointer = _impl_glSecondaryColorPointer;
}
PFN_glSecondaryColorPointer _glptr_glSecondaryColorPointer = _impl_glSecondaryColorPointer;

static void GL_APIENTRY _impl_glSecondaryColor3usv (const GLushort * v) {
  printf("* glSecondaryColor3usv\n");
  _glptr_glSecondaryColor3usv = (PFN_glSecondaryColor3usv)GalogenGetProcAddress("glSecondaryColor3usv");
   _glptr_glSecondaryColor3usv(v);
  CHECK_ERROR();
  _glptr_glSecondaryColor3usv = _impl_glSecondaryColor3usv;
}
PFN_glSecondaryColor3usv _glptr_glSecondaryColor3usv = _impl_glSecondaryColor3usv;

static void GL_APIENTRY _impl_glSecondaryColor3us (GLushort red, GLushort green, GLushort blue) {
  printf("* glSecondaryColor3us\n");
  _glptr_glSecondaryColor3us = (PFN_glSecondaryColor3us)GalogenGetProcAddress("glSecondaryColor3us");
   _glptr_glSecondaryColor3us(red, green, blue);
  CHECK_ERROR();
  _glptr_glSecondaryColor3us = _impl_glSecondaryColor3us;
}
PFN_glSecondaryColor3us _glptr_glSecondaryColor3us = _impl_glSecondaryColor3us;

static void GL_APIENTRY _impl_glVertexAttrib3f (GLuint index, GLfloat x, GLfloat y, GLfloat z) {
  printf("* glVertexAttrib3f\n");
  _glptr_glVertexAttrib3f = (PFN_glVertexAttrib3f)GalogenGetProcAddress("glVertexAttrib3f");
   _glptr_glVertexAttrib3f(index, x, y, z);
  CHECK_ERROR();
  _glptr_glVertexAttrib3f = _impl_glVertexAttrib3f;
}
PFN_glVertexAttrib3f _glptr_glVertexAttrib3f = _impl_glVertexAttrib3f;

static void GL_APIENTRY _impl_glSecondaryColor3ui (GLuint red, GLuint green, GLuint blue) {
  printf("* glSecondaryColor3ui\n");
  _glptr_glSecondaryColor3ui = (PFN_glSecondaryColor3ui)GalogenGetProcAddress("glSecondaryColor3ui");
   _glptr_glSecondaryColor3ui(red, green, blue);
  CHECK_ERROR();
  _glptr_glSecondaryColor3ui = _impl_glSecondaryColor3ui;
}
PFN_glSecondaryColor3ui _glptr_glSecondaryColor3ui = _impl_glSecondaryColor3ui;

static void GL_APIENTRY _impl_glSecondaryColor3sv (const GLshort * v) {
  printf("* glSecondaryColor3sv\n");
  _glptr_glSecondaryColor3sv = (PFN_glSecondaryColor3sv)GalogenGetProcAddress("glSecondaryColor3sv");
   _glptr_glSecondaryColor3sv(v);
  CHECK_ERROR();
  _glptr_glSecondaryColor3sv = _impl_glSecondaryColor3sv;
}
PFN_glSecondaryColor3sv _glptr_glSecondaryColor3sv = _impl_glSecondaryColor3sv;

static void GL_APIENTRY _impl_glVertexAttrib4dvARB (GLuint index, const GLdouble * v) {
  printf("* glVertexAttrib4dvARB\n");
  _glptr_glVertexAttrib4dvARB = (PFN_glVertexAttrib4dvARB)GalogenGetProcAddress("glVertexAttrib4dvARB");
   _glptr_glVertexAttrib4dvARB(index, v);
  CHECK_ERROR();
  _glptr_glVertexAttrib4dvARB = _impl_glVertexAttrib4dvARB;
}
PFN_glVertexAttrib4dvARB _glptr_glVertexAttrib4dvARB = _impl_glVertexAttrib4dvARB;

static void GL_APIENTRY _impl_glSecondaryColor3fv (const GLfloat * v) {
  printf("* glSecondaryColor3fv\n");
  _glptr_glSecondaryColor3fv = (PFN_glSecondaryColor3fv)GalogenGetProcAddress("glSecondaryColor3fv");
   _glptr_glSecondaryColor3fv(v);
  CHECK_ERROR();
  _glptr_glSecondaryColor3fv = _impl_glSecondaryColor3fv;
}
PFN_glSecondaryColor3fv _glptr_glSecondaryColor3fv = _impl_glSecondaryColor3fv;

static void GL_APIENTRY _impl_glSecondaryColor3d (GLdouble red, GLdouble green, GLdouble blue) {
  printf("* glSecondaryColor3d\n");
  _glptr_glSecondaryColor3d = (PFN_glSecondaryColor3d)GalogenGetProcAddress("glSecondaryColor3d");
   _glptr_glSecondaryColor3d(red, green, blue);
  CHECK_ERROR();
  _glptr_glSecondaryColor3d = _impl_glSecondaryColor3d;
}
PFN_glSecondaryColor3d _glptr_glSecondaryColor3d = _impl_glSecondaryColor3d;

static void GL_APIENTRY _impl_glSecondaryColor3bv (const GLbyte * v) {
  printf("* glSecondaryColor3bv\n");
  _glptr_glSecondaryColor3bv = (PFN_glSecondaryColor3bv)GalogenGetProcAddress("glSecondaryColor3bv");
   _glptr_glSecondaryColor3bv(v);
  CHECK_ERROR();
  _glptr_glSecondaryColor3bv = _impl_glSecondaryColor3bv;
}
PFN_glSecondaryColor3bv _glptr_glSecondaryColor3bv = _impl_glSecondaryColor3bv;

static void GL_APIENTRY _impl_glFogCoorddv (const GLdouble * coord) {
  printf("* glFogCoorddv\n");
  _glptr_glFogCoorddv = (PFN_glFogCoorddv)GalogenGetProcAddress("glFogCoorddv");
   _glptr_glFogCoorddv(coord);
  CHECK_ERROR();
  _glptr_glFogCoorddv = _impl_glFogCoorddv;
}
PFN_glFogCoorddv _glptr_glFogCoorddv = _impl_glFogCoorddv;

static void GL_APIENTRY _impl_glFlush () {
  printf("* glFlush\n");
  _glptr_glFlush = (PFN_glFlush)GalogenGetProcAddress("glFlush");
   _glptr_glFlush();
  CHECK_ERROR();
  _glptr_glFlush = _impl_glFlush;
}
PFN_glFlush _glptr_glFlush = _impl_glFlush;

static void GL_APIENTRY _impl_glFogCoordd (GLdouble coord) {
  printf("* glFogCoordd\n");
  _glptr_glFogCoordd = (PFN_glFogCoordd)GalogenGetProcAddress("glFogCoordd");
   _glptr_glFogCoordd(coord);
  CHECK_ERROR();
  _glptr_glFogCoordd = _impl_glFogCoordd;
}
PFN_glFogCoordd _glptr_glFogCoordd = _impl_glFogCoordd;

static void GL_APIENTRY _impl_glSecondaryColor3ubv (const GLubyte * v) {
  printf("* glSecondaryColor3ubv\n");
  _glptr_glSecondaryColor3ubv = (PFN_glSecondaryColor3ubv)GalogenGetProcAddress("glSecondaryColor3ubv");
   _glptr_glSecondaryColor3ubv(v);
  CHECK_ERROR();
  _glptr_glSecondaryColor3ubv = _impl_glSecondaryColor3ubv;
}
PFN_glSecondaryColor3ubv _glptr_glSecondaryColor3ubv = _impl_glSecondaryColor3ubv;

static void GL_APIENTRY _impl_glFogCoordf (GLfloat coord) {
  printf("* glFogCoordf\n");
  _glptr_glFogCoordf = (PFN_glFogCoordf)GalogenGetProcAddress("glFogCoordf");
   _glptr_glFogCoordf(coord);
  CHECK_ERROR();
  _glptr_glFogCoordf = _impl_glFogCoordf;
}
PFN_glFogCoordf _glptr_glFogCoordf = _impl_glFogCoordf;

static void GL_APIENTRY _impl_glPointParameteriv (GLenum pname, const GLint * params) {
  printf("* glPointParameteriv\n");
  _glptr_glPointParameteriv = (PFN_glPointParameteriv)GalogenGetProcAddress("glPointParameteriv");
   _glptr_glPointParameteriv(pname, params);
  CHECK_ERROR();
  _glptr_glPointParameteriv = _impl_glPointParameteriv;
}
PFN_glPointParameteriv _glptr_glPointParameteriv = _impl_glPointParameteriv;

static void GL_APIENTRY _impl_glMultiTexCoord3i (GLenum target, GLint s, GLint t, GLint r) {
  printf("* glMultiTexCoord3i\n");
  _glptr_glMultiTexCoord3i = (PFN_glMultiTexCoord3i)GalogenGetProcAddress("glMultiTexCoord3i");
   _glptr_glMultiTexCoord3i(target, s, t, r);
  CHECK_ERROR();
  _glptr_glMultiTexCoord3i = _impl_glMultiTexCoord3i;
}
PFN_glMultiTexCoord3i _glptr_glMultiTexCoord3i = _impl_glMultiTexCoord3i;

static void GL_APIENTRY _impl_glPointParameterfv (GLenum pname, const GLfloat * params) {
  printf("* glPointParameterfv\n");
  _glptr_glPointParameterfv = (PFN_glPointParameterfv)GalogenGetProcAddress("glPointParameterfv");
   _glptr_glPointParameterfv(pname, params);
  CHECK_ERROR();
  _glptr_glPointParameterfv = _impl_glPointParameterfv;
}
PFN_glPointParameterfv _glptr_glPointParameterfv = _impl_glPointParameterfv;

static void GL_APIENTRY _impl_glBlendFuncSeparate (GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha) {
  printf("* glBlendFuncSeparate\n");
  _glptr_glBlendFuncSeparate = (PFN_glBlendFuncSeparate)GalogenGetProcAddress("glBlendFuncSeparate");
   _glptr_glBlendFuncSeparate(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
  CHECK_ERROR();
  _glptr_glBlendFuncSeparate = _impl_glBlendFuncSeparate;
}
PFN_glBlendFuncSeparate _glptr_glBlendFuncSeparate = _impl_glBlendFuncSeparate;

static void GL_APIENTRY _impl_glColor3fv (const GLfloat * v) {
  printf("* glColor3fv\n");
  _glptr_glColor3fv = (PFN_glColor3fv)GalogenGetProcAddress("glColor3fv");
   _glptr_glColor3fv(v);
  CHECK_ERROR();
  _glptr_glColor3fv = _impl_glColor3fv;
}
PFN_glColor3fv _glptr_glColor3fv = _impl_glColor3fv;

static void GL_APIENTRY _impl_glMultTransposeMatrixd (const GLdouble * m) {
  printf("* glMultTransposeMatrixd\n");
  _glptr_glMultTransposeMatrixd = (PFN_glMultTransposeMatrixd)GalogenGetProcAddress("glMultTransposeMatrixd");
   _glptr_glMultTransposeMatrixd(m);
  CHECK_ERROR();
  _glptr_glMultTransposeMatrixd = _impl_glMultTransposeMatrixd;
}
PFN_glMultTransposeMatrixd _glptr_glMultTransposeMatrixd = _impl_glMultTransposeMatrixd;

static void GL_APIENTRY _impl_glVertexAttrib2fv (GLuint index, const GLfloat * v) {
  printf("* glVertexAttrib2fv\n");
  _glptr_glVertexAttrib2fv = (PFN_glVertexAttrib2fv)GalogenGetProcAddress("glVertexAttrib2fv");
   _glptr_glVertexAttrib2fv(index, v);
  CHECK_ERROR();
  _glptr_glVertexAttrib2fv = _impl_glVertexAttrib2fv;
}
PFN_glVertexAttrib2fv _glptr_glVertexAttrib2fv = _impl_glVertexAttrib2fv;

static void GL_APIENTRY _impl_glMultiDrawElements (GLenum mode, const GLsizei * count, GLenum type, const void *const* indices, GLsizei drawcount) {
  printf("* glMultiDrawElements\n");
  _glptr_glMultiDrawElements = (PFN_glMultiDrawElements)GalogenGetProcAddress("glMultiDrawElements");
   _glptr_glMultiDrawElements(mode, count, type, indices, drawcount);
  CHECK_ERROR();
  _glptr_glMultiDrawElements = _impl_glMultiDrawElements;
}
PFN_glMultiDrawElements _glptr_glMultiDrawElements = _impl_glMultiDrawElements;

static void GL_APIENTRY _impl_glMultTransposeMatrixf (const GLfloat * m) {
  printf("* glMultTransposeMatrixf\n");
  _glptr_glMultTransposeMatrixf = (PFN_glMultTransposeMatrixf)GalogenGetProcAddress("glMultTransposeMatrixf");
   _glptr_glMultTransposeMatrixf(m);
  CHECK_ERROR();
  _glptr_glMultTransposeMatrixf = _impl_glMultTransposeMatrixf;
}
PFN_glMultTransposeMatrixf _glptr_glMultTransposeMatrixf = _impl_glMultTransposeMatrixf;

static void GL_APIENTRY _impl_glMultiTexCoord4iv (GLenum target, const GLint * v) {
  printf("* glMultiTexCoord4iv\n");
  _glptr_glMultiTexCoord4iv = (PFN_glMultiTexCoord4iv)GalogenGetProcAddress("glMultiTexCoord4iv");
   _glptr_glMultiTexCoord4iv(target, v);
  CHECK_ERROR();
  _glptr_glMultiTexCoord4iv = _impl_glMultiTexCoord4iv;
}
PFN_glMultiTexCoord4iv _glptr_glMultiTexCoord4iv = _impl_glMultiTexCoord4iv;

static void GL_APIENTRY _impl_glTexGendv (GLenum coord, GLenum pname, const GLdouble * params) {
  printf("* glTexGendv\n");
  _glptr_glTexGendv = (PFN_glTexGendv)GalogenGetProcAddress("glTexGendv");
   _glptr_glTexGendv(coord, pname, params);
  CHECK_ERROR();
  _glptr_glTexGendv = _impl_glTexGendv;
}
PFN_glTexGendv _glptr_glTexGendv = _impl_glTexGendv;

static void GL_APIENTRY _impl_glMultiTexCoord4f (GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q) {
  printf("* glMultiTexCoord4f\n");
  _glptr_glMultiTexCoord4f = (PFN_glMultiTexCoord4f)GalogenGetProcAddress("glMultiTexCoord4f");
   _glptr_glMultiTexCoord4f(target, s, t, r, q);
  CHECK_ERROR();
  _glptr_glMultiTexCoord4f = _impl_glMultiTexCoord4f;
}
PFN_glMultiTexCoord4f _glptr_glMultiTexCoord4f = _impl_glMultiTexCoord4f;

static void GL_APIENTRY _impl_glColorMaterial (GLenum face, GLenum mode) {
  printf("* glColorMaterial\n");
  _glptr_glColorMaterial = (PFN_glColorMaterial)GalogenGetProcAddress("glColorMaterial");
   _glptr_glColorMaterial(face, mode);
  CHECK_ERROR();
  _glptr_glColorMaterial = _impl_glColorMaterial;
}
PFN_glColorMaterial _glptr_glColorMaterial = _impl_glColorMaterial;

static void GL_APIENTRY _impl_glFinish () {
  printf("* glFinish\n");
  _glptr_glFinish = (PFN_glFinish)GalogenGetProcAddress("glFinish");
   _glptr_glFinish();
  CHECK_ERROR();
  _glptr_glFinish = _impl_glFinish;
}
PFN_glFinish _glptr_glFinish = _impl_glFinish;

static void GL_APIENTRY _impl_glVertex3iv (const GLint * v) {
  printf("* glVertex3iv\n");
  _glptr_glVertex3iv = (PFN_glVertex3iv)GalogenGetProcAddress("glVertex3iv");
   _glptr_glVertex3iv(v);
  CHECK_ERROR();
  _glptr_glVertex3iv = _impl_glVertex3iv;
}
PFN_glVertex3iv _glptr_glVertex3iv = _impl_glVertex3iv;

static void GL_APIENTRY _impl_glMultiTexCoord4dv (GLenum target, const GLdouble * v) {
  printf("* glMultiTexCoord4dv\n");
  _glptr_glMultiTexCoord4dv = (PFN_glMultiTexCoord4dv)GalogenGetProcAddress("glMultiTexCoord4dv");
   _glptr_glMultiTexCoord4dv(target, v);
  CHECK_ERROR();
  _glptr_glMultiTexCoord4dv = _impl_glMultiTexCoord4dv;
}
PFN_glMultiTexCoord4dv _glptr_glMultiTexCoord4dv = _impl_glMultiTexCoord4dv;

static void GL_APIENTRY _impl_glVertex4dv (const GLdouble * v) {
  printf("* glVertex4dv\n");
  _glptr_glVertex4dv = (PFN_glVertex4dv)GalogenGetProcAddress("glVertex4dv");
   _glptr_glVertex4dv(v);
  CHECK_ERROR();
  _glptr_glVertex4dv = _impl_glVertex4dv;
}
PFN_glVertex4dv _glptr_glVertex4dv = _impl_glVertex4dv;

static void GL_APIENTRY _impl_glMultiTexCoord4d (GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q) {
  printf("* glMultiTexCoord4d\n");
  _glptr_glMultiTexCoord4d = (PFN_glMultiTexCoord4d)GalogenGetProcAddress("glMultiTexCoord4d");
   _glptr_glMultiTexCoord4d(target, s, t, r, q);
  CHECK_ERROR();
  _glptr_glMultiTexCoord4d = _impl_glMultiTexCoord4d;
}
PFN_glMultiTexCoord4d _glptr_glMultiTexCoord4d = _impl_glMultiTexCoord4d;

static void GL_APIENTRY _impl_glPopName () {
  printf("* glPopName\n");
  _glptr_glPopName = (PFN_glPopName)GalogenGetProcAddress("glPopName");
   _glptr_glPopName();
  CHECK_ERROR();
  _glptr_glPopName = _impl_glPopName;
}
PFN_glPopName _glptr_glPopName = _impl_glPopName;

static void GL_APIENTRY _impl_glRasterPos4s (GLshort x, GLshort y, GLshort z, GLshort w) {
  printf("* glRasterPos4s\n");
  _glptr_glRasterPos4s = (PFN_glRasterPos4s)GalogenGetProcAddress("glRasterPos4s");
   _glptr_glRasterPos4s(x, y, z, w);
  CHECK_ERROR();
  _glptr_glRasterPos4s = _impl_glRasterPos4s;
}
PFN_glRasterPos4s _glptr_glRasterPos4s = _impl_glRasterPos4s;

static void GL_APIENTRY _impl_glMultiTexCoord3sv (GLenum target, const GLshort * v) {
  printf("* glMultiTexCoord3sv\n");
  _glptr_glMultiTexCoord3sv = (PFN_glMultiTexCoord3sv)GalogenGetProcAddress("glMultiTexCoord3sv");
   _glptr_glMultiTexCoord3sv(target, v);
  CHECK_ERROR();
  _glptr_glMultiTexCoord3sv = _impl_glMultiTexCoord3sv;
}
PFN_glMultiTexCoord3sv _glptr_glMultiTexCoord3sv = _impl_glMultiTexCoord3sv;

static void GL_APIENTRY _impl_glStencilFunc (GLenum func, GLint ref, GLuint mask) {
  printf("* glStencilFunc\n");
  _glptr_glStencilFunc = (PFN_glStencilFunc)GalogenGetProcAddress("glStencilFunc");
   _glptr_glStencilFunc(func, ref, mask);
  CHECK_ERROR();
  _glptr_glStencilFunc = _impl_glStencilFunc;
}
PFN_glStencilFunc _glptr_glStencilFunc = _impl_glStencilFunc;

static void GL_APIENTRY _impl_glBindTexture (GLenum target, GLuint texture) {
  printf("* glBindTexture\n");
  _glptr_glBindTexture = (PFN_glBindTexture)GalogenGetProcAddress("glBindTexture");
   _glptr_glBindTexture(target, texture);
  CHECK_ERROR();
  _glptr_glBindTexture = _impl_glBindTexture;
}
PFN_glBindTexture _glptr_glBindTexture = _impl_glBindTexture;

static void GL_APIENTRY _impl_glMultiTexCoord3iv (GLenum target, const GLint * v) {
  printf("* glMultiTexCoord3iv\n");
  _glptr_glMultiTexCoord3iv = (PFN_glMultiTexCoord3iv)GalogenGetProcAddress("glMultiTexCoord3iv");
   _glptr_glMultiTexCoord3iv(target, v);
  CHECK_ERROR();
  _glptr_glMultiTexCoord3iv = _impl_glMultiTexCoord3iv;
}
PFN_glMultiTexCoord3iv _glptr_glMultiTexCoord3iv = _impl_glMultiTexCoord3iv;

static void GL_APIENTRY _impl_glColor4b (GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha) {
  printf("* glColor4b\n");
  _glptr_glColor4b = (PFN_glColor4b)GalogenGetProcAddress("glColor4b");
   _glptr_glColor4b(red, green, blue, alpha);
  CHECK_ERROR();
  _glptr_glColor4b = _impl_glColor4b;
}
PFN_glColor4b _glptr_glColor4b = _impl_glColor4b;

static void GL_APIENTRY _impl_glMultiTexCoord3fv (GLenum target, const GLfloat * v) {
  printf("* glMultiTexCoord3fv\n");
  _glptr_glMultiTexCoord3fv = (PFN_glMultiTexCoord3fv)GalogenGetProcAddress("glMultiTexCoord3fv");
   _glptr_glMultiTexCoord3fv(target, v);
  CHECK_ERROR();
  _glptr_glMultiTexCoord3fv = _impl_glMultiTexCoord3fv;
}
PFN_glMultiTexCoord3fv _glptr_glMultiTexCoord3fv = _impl_glMultiTexCoord3fv;

static void GL_APIENTRY _impl_glMultiTexCoord3dv (GLenum target, const GLdouble * v) {
  printf("* glMultiTexCoord3dv\n");
  _glptr_glMultiTexCoord3dv = (PFN_glMultiTexCoord3dv)GalogenGetProcAddress("glMultiTexCoord3dv");
   _glptr_glMultiTexCoord3dv(target, v);
  CHECK_ERROR();
  _glptr_glMultiTexCoord3dv = _impl_glMultiTexCoord3dv;
}
PFN_glMultiTexCoord3dv _glptr_glMultiTexCoord3dv = _impl_glMultiTexCoord3dv;

static void GL_APIENTRY _impl_glVertexAttrib3dARB (GLuint index, GLdouble x, GLdouble y, GLdouble z) {
  printf("* glVertexAttrib3dARB\n");
  _glptr_glVertexAttrib3dARB = (PFN_glVertexAttrib3dARB)GalogenGetProcAddress("glVertexAttrib3dARB");
   _glptr_glVertexAttrib3dARB(index, x, y, z);
  CHECK_ERROR();
  _glptr_glVertexAttrib3dARB = _impl_glVertexAttrib3dARB;
}
PFN_glVertexAttrib3dARB _glptr_glVertexAttrib3dARB = _impl_glVertexAttrib3dARB;

static void GL_APIENTRY _impl_glMultiTexCoord3d (GLenum target, GLdouble s, GLdouble t, GLdouble r) {
  printf("* glMultiTexCoord3d\n");
  _glptr_glMultiTexCoord3d = (PFN_glMultiTexCoord3d)GalogenGetProcAddress("glMultiTexCoord3d");
   _glptr_glMultiTexCoord3d(target, s, t, r);
  CHECK_ERROR();
  _glptr_glMultiTexCoord3d = _impl_glMultiTexCoord3d;
}
PFN_glMultiTexCoord3d _glptr_glMultiTexCoord3d = _impl_glMultiTexCoord3d;

static void GL_APIENTRY _impl_glMultiTexCoord2sv (GLenum target, const GLshort * v) {
  printf("* glMultiTexCoord2sv\n");
  _glptr_glMultiTexCoord2sv = (PFN_glMultiTexCoord2sv)GalogenGetProcAddress("glMultiTexCoord2sv");
   _glptr_glMultiTexCoord2sv(target, v);
  CHECK_ERROR();
  _glptr_glMultiTexCoord2sv = _impl_glMultiTexCoord2sv;
}
PFN_glMultiTexCoord2sv _glptr_glMultiTexCoord2sv = _impl_glMultiTexCoord2sv;

static void GL_APIENTRY _impl_glUniform4iv (GLint location, GLsizei count, const GLint * value) {
  printf("* glUniform4iv\n");
  _glptr_glUniform4iv = (PFN_glUniform4iv)GalogenGetProcAddress("glUniform4iv");
   _glptr_glUniform4iv(location, count, value);
  CHECK_ERROR();
  _glptr_glUniform4iv = _impl_glUniform4iv;
}
PFN_glUniform4iv _glptr_glUniform4iv = _impl_glUniform4iv;

static void GL_APIENTRY _impl_glMultiTexCoord2dv (GLenum target, const GLdouble * v) {
  printf("* glMultiTexCoord2dv\n");
  _glptr_glMultiTexCoord2dv = (PFN_glMultiTexCoord2dv)GalogenGetProcAddress("glMultiTexCoord2dv");
   _glptr_glMultiTexCoord2dv(target, v);
  CHECK_ERROR();
  _glptr_glMultiTexCoord2dv = _impl_glMultiTexCoord2dv;
}
PFN_glMultiTexCoord2dv _glptr_glMultiTexCoord2dv = _impl_glMultiTexCoord2dv;

static void GL_APIENTRY _impl_glVertex2f (GLfloat x, GLfloat y) {
  printf("* glVertex2f\n");
  _glptr_glVertex2f = (PFN_glVertex2f)GalogenGetProcAddress("glVertex2f");
   _glptr_glVertex2f(x, y);
  CHECK_ERROR();
  _glptr_glVertex2f = _impl_glVertex2f;
}
PFN_glVertex2f _glptr_glVertex2f = _impl_glVertex2f;

static void GL_APIENTRY _impl_glLoadName (GLuint name) {
  printf("* glLoadName\n");
  _glptr_glLoadName = (PFN_glLoadName)GalogenGetProcAddress("glLoadName");
   _glptr_glLoadName(name);
  CHECK_ERROR();
  _glptr_glLoadName = _impl_glLoadName;
}
PFN_glLoadName _glptr_glLoadName = _impl_glLoadName;

static void GL_APIENTRY _impl_glMultiTexCoord2f (GLenum target, GLfloat s, GLfloat t) {
  printf("* glMultiTexCoord2f\n");
  _glptr_glMultiTexCoord2f = (PFN_glMultiTexCoord2f)GalogenGetProcAddress("glMultiTexCoord2f");
   _glptr_glMultiTexCoord2f(target, s, t);
  CHECK_ERROR();
  _glptr_glMultiTexCoord2f = _impl_glMultiTexCoord2f;
}
PFN_glMultiTexCoord2f _glptr_glMultiTexCoord2f = _impl_glMultiTexCoord2f;

static void GL_APIENTRY _impl_glMultiTexCoord1f (GLenum target, GLfloat s) {
  printf("* glMultiTexCoord1f\n");
  _glptr_glMultiTexCoord1f = (PFN_glMultiTexCoord1f)GalogenGetProcAddress("glMultiTexCoord1f");
   _glptr_glMultiTexCoord1f(target, s);
  CHECK_ERROR();
  _glptr_glMultiTexCoord1f = _impl_glMultiTexCoord1f;
}
PFN_glMultiTexCoord1f _glptr_glMultiTexCoord1f = _impl_glMultiTexCoord1f;

static void GL_APIENTRY _impl_glVertexAttrib2fARB (GLuint index, GLfloat x, GLfloat y) {
  printf("* glVertexAttrib2fARB\n");
  _glptr_glVertexAttrib2fARB = (PFN_glVertexAttrib2fARB)GalogenGetProcAddress("glVertexAttrib2fARB");
   _glptr_glVertexAttrib2fARB(index, x, y);
  CHECK_ERROR();
  _glptr_glVertexAttrib2fARB = _impl_glVertexAttrib2fARB;
}
PFN_glVertexAttrib2fARB _glptr_glVertexAttrib2fARB = _impl_glVertexAttrib2fARB;

static void GL_APIENTRY _impl_glTexCoord3s (GLshort s, GLshort t, GLshort r) {
  printf("* glTexCoord3s\n");
  _glptr_glTexCoord3s = (PFN_glTexCoord3s)GalogenGetProcAddress("glTexCoord3s");
   _glptr_glTexCoord3s(s, t, r);
  CHECK_ERROR();
  _glptr_glTexCoord3s = _impl_glTexCoord3s;
}
PFN_glTexCoord3s _glptr_glTexCoord3s = _impl_glTexCoord3s;

static void GL_APIENTRY _impl_glMultiTexCoord1d (GLenum target, GLdouble s) {
  printf("* glMultiTexCoord1d\n");
  _glptr_glMultiTexCoord1d = (PFN_glMultiTexCoord1d)GalogenGetProcAddress("glMultiTexCoord1d");
   _glptr_glMultiTexCoord1d(target, s);
  CHECK_ERROR();
  _glptr_glMultiTexCoord1d = _impl_glMultiTexCoord1d;
}
PFN_glMultiTexCoord1d _glptr_glMultiTexCoord1d = _impl_glMultiTexCoord1d;

static void GL_APIENTRY _impl_glWindowPos2s (GLshort x, GLshort y) {
  printf("* glWindowPos2s\n");
  _glptr_glWindowPos2s = (PFN_glWindowPos2s)GalogenGetProcAddress("glWindowPos2s");
   _glptr_glWindowPos2s(x, y);
  CHECK_ERROR();
  _glptr_glWindowPos2s = _impl_glWindowPos2s;
}
PFN_glWindowPos2s _glptr_glWindowPos2s = _impl_glWindowPos2s;

static void GL_APIENTRY _impl_glTexCoord4iv (const GLint * v) {
  printf("* glTexCoord4iv\n");
  _glptr_glTexCoord4iv = (PFN_glTexCoord4iv)GalogenGetProcAddress("glTexCoord4iv");
   _glptr_glTexCoord4iv(v);
  CHECK_ERROR();
  _glptr_glTexCoord4iv = _impl_glTexCoord4iv;
}
PFN_glTexCoord4iv _glptr_glTexCoord4iv = _impl_glTexCoord4iv;

static void GL_APIENTRY _impl_glClientActiveTexture (GLenum texture) {
  printf("* glClientActiveTexture\n");
  _glptr_glClientActiveTexture = (PFN_glClientActiveTexture)GalogenGetProcAddress("glClientActiveTexture");
   _glptr_glClientActiveTexture(texture);
  CHECK_ERROR();
  _glptr_glClientActiveTexture = _impl_glClientActiveTexture;
}
PFN_glClientActiveTexture _glptr_glClientActiveTexture = _impl_glClientActiveTexture;

static void GL_APIENTRY _impl_glMultiTexCoord4i (GLenum target, GLint s, GLint t, GLint r, GLint q) {
  printf("* glMultiTexCoord4i\n");
  _glptr_glMultiTexCoord4i = (PFN_glMultiTexCoord4i)GalogenGetProcAddress("glMultiTexCoord4i");
   _glptr_glMultiTexCoord4i(target, s, t, r, q);
  CHECK_ERROR();
  _glptr_glMultiTexCoord4i = _impl_glMultiTexCoord4i;
}
PFN_glMultiTexCoord4i _glptr_glMultiTexCoord4i = _impl_glMultiTexCoord4i;

static void GL_APIENTRY _impl_glUniform1i (GLint location, GLint v0) {
  printf("* glUniform1i\n");
  _glptr_glUniform1i = (PFN_glUniform1i)GalogenGetProcAddress("glUniform1i");
   _glptr_glUniform1i(location, v0);
  CHECK_ERROR();
  _glptr_glUniform1i = _impl_glUniform1i;
}
PFN_glUniform1i _glptr_glUniform1i = _impl_glUniform1i;

static void GL_APIENTRY _impl_glCompressedTexImage3D (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void * data) {
  printf("* glCompressedTexImage3D\n");
  _glptr_glCompressedTexImage3D = (PFN_glCompressedTexImage3D)GalogenGetProcAddress("glCompressedTexImage3D");
   _glptr_glCompressedTexImage3D(target, level, internalformat, width, height, depth, border, imageSize, data);
  CHECK_ERROR();
  _glptr_glCompressedTexImage3D = _impl_glCompressedTexImage3D;
}
PFN_glCompressedTexImage3D _glptr_glCompressedTexImage3D = _impl_glCompressedTexImage3D;

static void GL_APIENTRY _impl_glRasterPos3fv (const GLfloat * v) {
  printf("* glRasterPos3fv\n");
  _glptr_glRasterPos3fv = (PFN_glRasterPos3fv)GalogenGetProcAddress("glRasterPos3fv");
   _glptr_glRasterPos3fv(v);
  CHECK_ERROR();
  _glptr_glRasterPos3fv = _impl_glRasterPos3fv;
}
PFN_glRasterPos3fv _glptr_glRasterPos3fv = _impl_glRasterPos3fv;

static void GL_APIENTRY _impl_glSampleCoverage (GLfloat value, GLboolean invert) {
  printf("* glSampleCoverage\n");
  _glptr_glSampleCoverage = (PFN_glSampleCoverage)GalogenGetProcAddress("glSampleCoverage");
   _glptr_glSampleCoverage(value, invert);
  CHECK_ERROR();
  _glptr_glSampleCoverage = _impl_glSampleCoverage;
}
PFN_glSampleCoverage _glptr_glSampleCoverage = _impl_glSampleCoverage;

static void GL_APIENTRY _impl_glVertexAttrib4Nusv (GLuint index, const GLushort * v) {
  printf("* glVertexAttrib4Nusv\n");
  _glptr_glVertexAttrib4Nusv = (PFN_glVertexAttrib4Nusv)GalogenGetProcAddress("glVertexAttrib4Nusv");
   _glptr_glVertexAttrib4Nusv(index, v);
  CHECK_ERROR();
  _glptr_glVertexAttrib4Nusv = _impl_glVertexAttrib4Nusv;
}
PFN_glVertexAttrib4Nusv _glptr_glVertexAttrib4Nusv = _impl_glVertexAttrib4Nusv;

static void GL_APIENTRY _impl_glVertexAttrib4Nuiv (GLuint index, const GLuint * v) {
  printf("* glVertexAttrib4Nuiv\n");
  _glptr_glVertexAttrib4Nuiv = (PFN_glVertexAttrib4Nuiv)GalogenGetProcAddress("glVertexAttrib4Nuiv");
   _glptr_glVertexAttrib4Nuiv(index, v);
  CHECK_ERROR();
  _glptr_glVertexAttrib4Nuiv = _impl_glVertexAttrib4Nuiv;
}
PFN_glVertexAttrib4Nuiv _glptr_glVertexAttrib4Nuiv = _impl_glVertexAttrib4Nuiv;

static void GL_APIENTRY _impl_glVertex2i (GLint x, GLint y) {
  printf("* glVertex2i\n");
  _glptr_glVertex2i = (PFN_glVertex2i)GalogenGetProcAddress("glVertex2i");
   _glptr_glVertex2i(x, y);
  CHECK_ERROR();
  _glptr_glVertex2i = _impl_glVertex2i;
}
PFN_glVertex2i _glptr_glVertex2i = _impl_glVertex2i;

static void GL_APIENTRY _impl_glActiveTexture (GLenum texture) {
  printf("* glActiveTexture\n");
  _glptr_glActiveTexture = (PFN_glActiveTexture)GalogenGetProcAddress("glActiveTexture");
   _glptr_glActiveTexture(texture);
  CHECK_ERROR();
  _glptr_glActiveTexture = _impl_glActiveTexture;
}
PFN_glActiveTexture _glptr_glActiveTexture = _impl_glActiveTexture;

static GLint GL_APIENTRY _impl_glGetAttribLocation (GLuint program, const GLchar * name) {
  printf("* glGetAttribLocation\n");
  _glptr_glGetAttribLocation = (PFN_glGetAttribLocation)GalogenGetProcAddress("glGetAttribLocation");
  return _glptr_glGetAttribLocation(program, name);
  CHECK_ERROR();
  _glptr_glGetAttribLocation = _impl_glGetAttribLocation;
}
PFN_glGetAttribLocation _glptr_glGetAttribLocation = _impl_glGetAttribLocation;

static void GL_APIENTRY _impl_glStencilMask (GLuint mask) {
  printf("* glStencilMask\n");
  _glptr_glStencilMask = (PFN_glStencilMask)GalogenGetProcAddress("glStencilMask");
   _glptr_glStencilMask(mask);
  CHECK_ERROR();
  _glptr_glStencilMask = _impl_glStencilMask;
}
PFN_glStencilMask _glptr_glStencilMask = _impl_glStencilMask;

static void GL_APIENTRY _impl_glCopyTexSubImage3D (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height) {
  printf("* glCopyTexSubImage3D\n");
  _glptr_glCopyTexSubImage3D = (PFN_glCopyTexSubImage3D)GalogenGetProcAddress("glCopyTexSubImage3D");
   _glptr_glCopyTexSubImage3D(target, level, xoffset, yoffset, zoffset, x, y, width, height);
  CHECK_ERROR();
  _glptr_glCopyTexSubImage3D = _impl_glCopyTexSubImage3D;
}
PFN_glCopyTexSubImage3D _glptr_glCopyTexSubImage3D = _impl_glCopyTexSubImage3D;

static void GL_APIENTRY _impl_glDrawRangeElements (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void * indices) {
  printf("* glDrawRangeElements\n");
  _glptr_glDrawRangeElements = (PFN_glDrawRangeElements)GalogenGetProcAddress("glDrawRangeElements");
   _glptr_glDrawRangeElements(mode, start, end, count, type, indices);
  CHECK_ERROR();
  _glptr_glDrawRangeElements = _impl_glDrawRangeElements;
}
PFN_glDrawRangeElements _glptr_glDrawRangeElements = _impl_glDrawRangeElements;

static void GL_APIENTRY _impl_glVertexAttrib4fvARB (GLuint index, const GLfloat * v) {
  printf("* glVertexAttrib4fvARB\n");
  _glptr_glVertexAttrib4fvARB = (PFN_glVertexAttrib4fvARB)GalogenGetProcAddress("glVertexAttrib4fvARB");
   _glptr_glVertexAttrib4fvARB(index, v);
  CHECK_ERROR();
  _glptr_glVertexAttrib4fvARB = _impl_glVertexAttrib4fvARB;
}
PFN_glVertexAttrib4fvARB _glptr_glVertexAttrib4fvARB = _impl_glVertexAttrib4fvARB;

static GLboolean GL_APIENTRY _impl_glIsFramebuffer (GLuint framebuffer) {
  printf("* glIsFramebuffer\n");
  _glptr_glIsFramebuffer = (PFN_glIsFramebuffer)GalogenGetProcAddress("glIsFramebuffer");
  return _glptr_glIsFramebuffer(framebuffer);
  CHECK_ERROR();
  _glptr_glIsFramebuffer = _impl_glIsFramebuffer;
}
PFN_glIsFramebuffer _glptr_glIsFramebuffer = _impl_glIsFramebuffer;

static void GL_APIENTRY _impl_glWindowPos3s (GLshort x, GLshort y, GLshort z) {
  printf("* glWindowPos3s\n");
  _glptr_glWindowPos3s = (PFN_glWindowPos3s)GalogenGetProcAddress("glWindowPos3s");
   _glptr_glWindowPos3s(x, y, z);
  CHECK_ERROR();
  _glptr_glWindowPos3s = _impl_glWindowPos3s;
}
PFN_glWindowPos3s _glptr_glWindowPos3s = _impl_glWindowPos3s;

static void GL_APIENTRY _impl_glStencilOp (GLenum fail, GLenum zfail, GLenum zpass) {
  printf("* glStencilOp\n");
  _glptr_glStencilOp = (PFN_glStencilOp)GalogenGetProcAddress("glStencilOp");
   _glptr_glStencilOp(fail, zfail, zpass);
  CHECK_ERROR();
  _glptr_glStencilOp = _impl_glStencilOp;
}
PFN_glStencilOp _glptr_glStencilOp = _impl_glStencilOp;

static void GL_APIENTRY _impl_glPointSize (GLfloat size) {
  printf("* glPointSize\n");
  _glptr_glPointSize = (PFN_glPointSize)GalogenGetProcAddress("glPointSize");
   _glptr_glPointSize(size);
  CHECK_ERROR();
  _glptr_glPointSize = _impl_glPointSize;
}
PFN_glPointSize _glptr_glPointSize = _impl_glPointSize;

static void GL_APIENTRY _impl_glPushClientAttrib (GLbitfield mask) {
  printf("* glPushClientAttrib\n");
  _glptr_glPushClientAttrib = (PFN_glPushClientAttrib)GalogenGetProcAddress("glPushClientAttrib");
   _glptr_glPushClientAttrib(mask);
  CHECK_ERROR();
  _glptr_glPushClientAttrib = _impl_glPushClientAttrib;
}
PFN_glPushClientAttrib _glptr_glPushClientAttrib = _impl_glPushClientAttrib;

static void GL_APIENTRY _impl_glPopClientAttrib () {
  printf("* glPopClientAttrib\n");
  _glptr_glPopClientAttrib = (PFN_glPopClientAttrib)GalogenGetProcAddress("glPopClientAttrib");
   _glptr_glPopClientAttrib();
  CHECK_ERROR();
  _glptr_glPopClientAttrib = _impl_glPopClientAttrib;
}
PFN_glPopClientAttrib _glptr_glPopClientAttrib = _impl_glPopClientAttrib;

static void GL_APIENTRY _impl_glIndexubv (const GLubyte * c) {
  printf("* glIndexubv\n");
  _glptr_glIndexubv = (PFN_glIndexubv)GalogenGetProcAddress("glIndexubv");
   _glptr_glIndexubv(c);
  CHECK_ERROR();
  _glptr_glIndexubv = _impl_glIndexubv;
}
PFN_glIndexubv _glptr_glIndexubv = _impl_glIndexubv;

static void * GL_APIENTRY _impl_glMapBuffer (GLenum target, GLenum access) {
  printf("* glMapBuffer\n");
  _glptr_glMapBuffer = (PFN_glMapBuffer)GalogenGetProcAddress("glMapBuffer");
  return _glptr_glMapBuffer(target, access);
  CHECK_ERROR();
  _glptr_glMapBuffer = _impl_glMapBuffer;
}
PFN_glMapBuffer _glptr_glMapBuffer = _impl_glMapBuffer;

static void GL_APIENTRY _impl_glLoadTransposeMatrixd (const GLdouble * m) {
  printf("* glLoadTransposeMatrixd\n");
  _glptr_glLoadTransposeMatrixd = (PFN_glLoadTransposeMatrixd)GalogenGetProcAddress("glLoadTransposeMatrixd");
   _glptr_glLoadTransposeMatrixd(m);
  CHECK_ERROR();
  _glptr_glLoadTransposeMatrixd = _impl_glLoadTransposeMatrixd;
}
PFN_glLoadTransposeMatrixd _glptr_glLoadTransposeMatrixd = _impl_glLoadTransposeMatrixd;

static void GL_APIENTRY _impl_glPrioritizeTextures (GLsizei n, const GLuint * textures, const GLfloat * priorities) {
  printf("* glPrioritizeTextures\n");
  _glptr_glPrioritizeTextures = (PFN_glPrioritizeTextures)GalogenGetProcAddress("glPrioritizeTextures");
   _glptr_glPrioritizeTextures(n, textures, priorities);
  CHECK_ERROR();
  _glptr_glPrioritizeTextures = _impl_glPrioritizeTextures;
}
PFN_glPrioritizeTextures _glptr_glPrioritizeTextures = _impl_glPrioritizeTextures;

static void GL_APIENTRY _impl_glTexCoord1f (GLfloat s) {
  printf("* glTexCoord1f\n");
  _glptr_glTexCoord1f = (PFN_glTexCoord1f)GalogenGetProcAddress("glTexCoord1f");
   _glptr_glTexCoord1f(s);
  CHECK_ERROR();
  _glptr_glTexCoord1f = _impl_glTexCoord1f;
}
PFN_glTexCoord1f _glptr_glTexCoord1f = _impl_glTexCoord1f;

static void GL_APIENTRY _impl_glTexCoordPointer (GLint size, GLenum type, GLsizei stride, const void * pointer) {
  printf("* glTexCoordPointer\n");
  _glptr_glTexCoordPointer = (PFN_glTexCoordPointer)GalogenGetProcAddress("glTexCoordPointer");
   _glptr_glTexCoordPointer(size, type, stride, pointer);
  CHECK_ERROR();
  _glptr_glTexCoordPointer = _impl_glTexCoordPointer;
}
PFN_glTexCoordPointer _glptr_glTexCoordPointer = _impl_glTexCoordPointer;

static void GL_APIENTRY _impl_glUniform1iv (GLint location, GLsizei count, const GLint * value) {
  printf("* glUniform1iv\n");
  _glptr_glUniform1iv = (PFN_glUniform1iv)GalogenGetProcAddress("glUniform1iv");
   _glptr_glUniform1iv(location, count, value);
  CHECK_ERROR();
  _glptr_glUniform1iv = _impl_glUniform1iv;
}
PFN_glUniform1iv _glptr_glUniform1iv = _impl_glUniform1iv;

static void GL_APIENTRY _impl_glIndexPointer (GLenum type, GLsizei stride, const void * pointer) {
  printf("* glIndexPointer\n");
  _glptr_glIndexPointer = (PFN_glIndexPointer)GalogenGetProcAddress("glIndexPointer");
   _glptr_glIndexPointer(type, stride, pointer);
  CHECK_ERROR();
  _glptr_glIndexPointer = _impl_glIndexPointer;
}
PFN_glIndexPointer _glptr_glIndexPointer = _impl_glIndexPointer;

static void GL_APIENTRY _impl_glEnableClientState (GLenum array) {
  printf("* glEnableClientState\n");
  _glptr_glEnableClientState = (PFN_glEnableClientState)GalogenGetProcAddress("glEnableClientState");
   _glptr_glEnableClientState(array);
  CHECK_ERROR();
  _glptr_glEnableClientState = _impl_glEnableClientState;
}
PFN_glEnableClientState _glptr_glEnableClientState = _impl_glEnableClientState;

static void GL_APIENTRY _impl_glGetActiveUniform (GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLint * size, GLenum * type, GLchar * name) {
  printf("* glGetActiveUniform\n");
  _glptr_glGetActiveUniform = (PFN_glGetActiveUniform)GalogenGetProcAddress("glGetActiveUniform");
   _glptr_glGetActiveUniform(program, index, bufSize, length, size, type, name);
  CHECK_ERROR();
  _glptr_glGetActiveUniform = _impl_glGetActiveUniform;
}
PFN_glGetActiveUniform _glptr_glGetActiveUniform = _impl_glGetActiveUniform;

static void GL_APIENTRY _impl_glColorPointer (GLint size, GLenum type, GLsizei stride, const void * pointer) {
  printf("* glColorPointer\n");
  _glptr_glColorPointer = (PFN_glColorPointer)GalogenGetProcAddress("glColorPointer");
   _glptr_glColorPointer(size, type, stride, pointer);
  CHECK_ERROR();
  _glptr_glColorPointer = _impl_glColorPointer;
}
PFN_glColorPointer _glptr_glColorPointer = _impl_glColorPointer;

static void GL_APIENTRY _impl_glTexSubImage2D (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * pixels) {
  printf("* glTexSubImage2D\n");
  _glptr_glTexSubImage2D = (PFN_glTexSubImage2D)GalogenGetProcAddress("glTexSubImage2D");
   _glptr_glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels);
  CHECK_ERROR();
  _glptr_glTexSubImage2D = _impl_glTexSubImage2D;
}
PFN_glTexSubImage2D _glptr_glTexSubImage2D = _impl_glTexSubImage2D;

static void GL_APIENTRY _impl_glCopyTexImage2D (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border) {
  printf("* glCopyTexImage2D\n");
  _glptr_glCopyTexImage2D = (PFN_glCopyTexImage2D)GalogenGetProcAddress("glCopyTexImage2D");
   _glptr_glCopyTexImage2D(target, level, internalformat, x, y, width, height, border);
  CHECK_ERROR();
  _glptr_glCopyTexImage2D = _impl_glCopyTexImage2D;
}
PFN_glCopyTexImage2D _glptr_glCopyTexImage2D = _impl_glCopyTexImage2D;

static void GL_APIENTRY _impl_glBindAttribLocation (GLuint program, GLuint index, const GLchar * name) {
  printf("* glBindAttribLocation\n");
  _glptr_glBindAttribLocation = (PFN_glBindAttribLocation)GalogenGetProcAddress("glBindAttribLocation");
   _glptr_glBindAttribLocation(program, index, name);
  CHECK_ERROR();
  _glptr_glBindAttribLocation = _impl_glBindAttribLocation;
}
PFN_glBindAttribLocation _glptr_glBindAttribLocation = _impl_glBindAttribLocation;

static void GL_APIENTRY _impl_glGetPointerv (GLenum pname, void ** params) {
  printf("* glGetPointerv\n");
  _glptr_glGetPointerv = (PFN_glGetPointerv)GalogenGetProcAddress("glGetPointerv");
   _glptr_glGetPointerv(pname, params);
  CHECK_ERROR();
  _glptr_glGetPointerv = _impl_glGetPointerv;
}
PFN_glGetPointerv _glptr_glGetPointerv = _impl_glGetPointerv;

static void GL_APIENTRY _impl_glInterleavedArrays (GLenum format, GLsizei stride, const void * pointer) {
  printf("* glInterleavedArrays\n");
  _glptr_glInterleavedArrays = (PFN_glInterleavedArrays)GalogenGetProcAddress("glInterleavedArrays");
   _glptr_glInterleavedArrays(format, stride, pointer);
  CHECK_ERROR();
  _glptr_glInterleavedArrays = _impl_glInterleavedArrays;
}
PFN_glInterleavedArrays _glptr_glInterleavedArrays = _impl_glInterleavedArrays;

static void GL_APIENTRY _impl_glDrawElements (GLenum mode, GLsizei count, GLenum type, const void * indices) {
  printf("* glDrawElements\n");
  _glptr_glDrawElements = (PFN_glDrawElements)GalogenGetProcAddress("glDrawElements");
   _glptr_glDrawElements(mode, count, type, indices);
  CHECK_ERROR();
  _glptr_glDrawElements = _impl_glDrawElements;
}
PFN_glDrawElements _glptr_glDrawElements = _impl_glDrawElements;

static void GL_APIENTRY _impl_glVertexAttrib2sv (GLuint index, const GLshort * v) {
  printf("* glVertexAttrib2sv\n");
  _glptr_glVertexAttrib2sv = (PFN_glVertexAttrib2sv)GalogenGetProcAddress("glVertexAttrib2sv");
   _glptr_glVertexAttrib2sv(index, v);
  CHECK_ERROR();
  _glptr_glVertexAttrib2sv = _impl_glVertexAttrib2sv;
}
PFN_glVertexAttrib2sv _glptr_glVertexAttrib2sv = _impl_glVertexAttrib2sv;

static void GL_APIENTRY _impl_glCopyTexSubImage1D (GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width) {
  printf("* glCopyTexSubImage1D\n");
  _glptr_glCopyTexSubImage1D = (PFN_glCopyTexSubImage1D)GalogenGetProcAddress("glCopyTexSubImage1D");
   _glptr_glCopyTexSubImage1D(target, level, xoffset, x, y, width);
  CHECK_ERROR();
  _glptr_glCopyTexSubImage1D = _impl_glCopyTexSubImage1D;
}
PFN_glCopyTexSubImage1D _glptr_glCopyTexSubImage1D = _impl_glCopyTexSubImage1D;

static void GL_APIENTRY _impl_glDrawArrays (GLenum mode, GLint first, GLsizei count) {
  printf("* glDrawArrays\n");
  _glptr_glDrawArrays = (PFN_glDrawArrays)GalogenGetProcAddress("glDrawArrays");
   _glptr_glDrawArrays(mode, first, count);
  CHECK_ERROR();
  _glptr_glDrawArrays = _impl_glDrawArrays;
}
PFN_glDrawArrays _glptr_glDrawArrays = _impl_glDrawArrays;

static void GL_APIENTRY _impl_glScalef (GLfloat x, GLfloat y, GLfloat z) {
  printf("* glScalef\n");
  _glptr_glScalef = (PFN_glScalef)GalogenGetProcAddress("glScalef");
   _glptr_glScalef(x, y, z);
  CHECK_ERROR();
  _glptr_glScalef = _impl_glScalef;
}
PFN_glScalef _glptr_glScalef = _impl_glScalef;

static void GL_APIENTRY _impl_glUniform2iv (GLint location, GLsizei count, const GLint * value) {
  printf("* glUniform2iv\n");
  _glptr_glUniform2iv = (PFN_glUniform2iv)GalogenGetProcAddress("glUniform2iv");
   _glptr_glUniform2iv(location, count, value);
  CHECK_ERROR();
  _glptr_glUniform2iv = _impl_glUniform2iv;
}
PFN_glUniform2iv _glptr_glUniform2iv = _impl_glUniform2iv;

static void GL_APIENTRY _impl_glGetVertexAttribPointerv (GLuint index, GLenum pname, void ** pointer) {
  printf("* glGetVertexAttribPointerv\n");
  _glptr_glGetVertexAttribPointerv = (PFN_glGetVertexAttribPointerv)GalogenGetProcAddress("glGetVertexAttribPointerv");
   _glptr_glGetVertexAttribPointerv(index, pname, pointer);
  CHECK_ERROR();
  _glptr_glGetVertexAttribPointerv = _impl_glGetVertexAttribPointerv;
}
PFN_glGetVertexAttribPointerv _glptr_glGetVertexAttribPointerv = _impl_glGetVertexAttribPointerv;

static void GL_APIENTRY _impl_glScaled (GLdouble x, GLdouble y, GLdouble z) {
  printf("* glScaled\n");
  _glptr_glScaled = (PFN_glScaled)GalogenGetProcAddress("glScaled");
   _glptr_glScaled(x, y, z);
  CHECK_ERROR();
  _glptr_glScaled = _impl_glScaled;
}
PFN_glScaled _glptr_glScaled = _impl_glScaled;

static void GL_APIENTRY _impl_glRotatef (GLfloat angle, GLfloat x, GLfloat y, GLfloat z) {
  printf("* glRotatef\n");
  _glptr_glRotatef = (PFN_glRotatef)GalogenGetProcAddress("glRotatef");
   _glptr_glRotatef(angle, x, y, z);
  CHECK_ERROR();
  _glptr_glRotatef = _impl_glRotatef;
}
PFN_glRotatef _glptr_glRotatef = _impl_glRotatef;

static void GL_APIENTRY _impl_glPopMatrix () {
  printf("* glPopMatrix\n");
  _glptr_glPopMatrix = (PFN_glPopMatrix)GalogenGetProcAddress("glPopMatrix");
   _glptr_glPopMatrix();
  CHECK_ERROR();
  _glptr_glPopMatrix = _impl_glPopMatrix;
}
PFN_glPopMatrix _glptr_glPopMatrix = _impl_glPopMatrix;

static void GL_APIENTRY _impl_glMultiTexCoord1s (GLenum target, GLshort s) {
  printf("* glMultiTexCoord1s\n");
  _glptr_glMultiTexCoord1s = (PFN_glMultiTexCoord1s)GalogenGetProcAddress("glMultiTexCoord1s");
   _glptr_glMultiTexCoord1s(target, s);
  CHECK_ERROR();
  _glptr_glMultiTexCoord1s = _impl_glMultiTexCoord1s;
}
PFN_glMultiTexCoord1s _glptr_glMultiTexCoord1s = _impl_glMultiTexCoord1s;

static void GL_APIENTRY _impl_glMultMatrixf (const GLfloat * m) {
  printf("* glMultMatrixf\n");
  _glptr_glMultMatrixf = (PFN_glMultMatrixf)GalogenGetProcAddress("glMultMatrixf");
   _glptr_glMultMatrixf(m);
  CHECK_ERROR();
  _glptr_glMultMatrixf = _impl_glMultMatrixf;
}
PFN_glMultMatrixf _glptr_glMultMatrixf = _impl_glMultMatrixf;

static void GL_APIENTRY _impl_glVertexAttrib4s (GLuint index, GLshort x, GLshort y, GLshort z, GLshort w) {
  printf("* glVertexAttrib4s\n");
  _glptr_glVertexAttrib4s = (PFN_glVertexAttrib4s)GalogenGetProcAddress("glVertexAttrib4s");
   _glptr_glVertexAttrib4s(index, x, y, z, w);
  CHECK_ERROR();
  _glptr_glVertexAttrib4s = _impl_glVertexAttrib4s;
}
PFN_glVertexAttrib4s _glptr_glVertexAttrib4s = _impl_glVertexAttrib4s;

static void GL_APIENTRY _impl_glMatrixMode (GLenum mode) {
  printf("* glMatrixMode\n");
  _glptr_glMatrixMode = (PFN_glMatrixMode)GalogenGetProcAddress("glMatrixMode");
   _glptr_glMatrixMode(mode);
  CHECK_ERROR();
  _glptr_glMatrixMode = _impl_glMatrixMode;
}
PFN_glMatrixMode _glptr_glMatrixMode = _impl_glMatrixMode;

static void GL_APIENTRY _impl_glFrustum (GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar) {
  printf("* glFrustum\n");
  _glptr_glFrustum = (PFN_glFrustum)GalogenGetProcAddress("glFrustum");
   _glptr_glFrustum(left, right, bottom, top, zNear, zFar);
  CHECK_ERROR();
  _glptr_glFrustum = _impl_glFrustum;
}
PFN_glFrustum _glptr_glFrustum = _impl_glFrustum;

static void GL_APIENTRY _impl_glReadBuffer (GLenum src) {
  printf("* glReadBuffer\n");
  _glptr_glReadBuffer = (PFN_glReadBuffer)GalogenGetProcAddress("glReadBuffer");
   _glptr_glReadBuffer(src);
  CHECK_ERROR();
  _glptr_glReadBuffer = _impl_glReadBuffer;
}
PFN_glReadBuffer _glptr_glReadBuffer = _impl_glReadBuffer;

static void GL_APIENTRY _impl_glGetTexGeniv (GLenum coord, GLenum pname, GLint * params) {
  printf("* glGetTexGeniv\n");
  _glptr_glGetTexGeniv = (PFN_glGetTexGeniv)GalogenGetProcAddress("glGetTexGeniv");
   _glptr_glGetTexGeniv(coord, pname, params);
  CHECK_ERROR();
  _glptr_glGetTexGeniv = _impl_glGetTexGeniv;
}
PFN_glGetTexGeniv _glptr_glGetTexGeniv = _impl_glGetTexGeniv;

static void GL_APIENTRY _impl_glBeginQuery (GLenum target, GLuint id) {
  printf("* glBeginQuery\n");
  _glptr_glBeginQuery = (PFN_glBeginQuery)GalogenGetProcAddress("glBeginQuery");
   _glptr_glBeginQuery(target, id);
  CHECK_ERROR();
  _glptr_glBeginQuery = _impl_glBeginQuery;
}
PFN_glBeginQuery _glptr_glBeginQuery = _impl_glBeginQuery;

static void GL_APIENTRY _impl_glGetTexGendv (GLenum coord, GLenum pname, GLdouble * params) {
  printf("* glGetTexGendv\n");
  _glptr_glGetTexGendv = (PFN_glGetTexGendv)GalogenGetProcAddress("glGetTexGendv");
   _glptr_glGetTexGendv(coord, pname, params);
  CHECK_ERROR();
  _glptr_glGetTexGendv = _impl_glGetTexGendv;
}
PFN_glGetTexGendv _glptr_glGetTexGendv = _impl_glGetTexGendv;

static void GL_APIENTRY _impl_glGetTexEnviv (GLenum target, GLenum pname, GLint * params) {
  printf("* glGetTexEnviv\n");
  _glptr_glGetTexEnviv = (PFN_glGetTexEnviv)GalogenGetProcAddress("glGetTexEnviv");
   _glptr_glGetTexEnviv(target, pname, params);
  CHECK_ERROR();
  _glptr_glGetTexEnviv = _impl_glGetTexEnviv;
}
PFN_glGetTexEnviv _glptr_glGetTexEnviv = _impl_glGetTexEnviv;

static void GL_APIENTRY _impl_glTexGeni (GLenum coord, GLenum pname, GLint param) {
  printf("* glTexGeni\n");
  _glptr_glTexGeni = (PFN_glTexGeni)GalogenGetProcAddress("glTexGeni");
   _glptr_glTexGeni(coord, pname, param);
  CHECK_ERROR();
  _glptr_glTexGeni = _impl_glTexGeni;
}
PFN_glTexGeni _glptr_glTexGeni = _impl_glTexGeni;

static void GL_APIENTRY _impl_glGetPolygonStipple (GLubyte * mask) {
  printf("* glGetPolygonStipple\n");
  _glptr_glGetPolygonStipple = (PFN_glGetPolygonStipple)GalogenGetProcAddress("glGetPolygonStipple");
   _glptr_glGetPolygonStipple(mask);
  CHECK_ERROR();
  _glptr_glGetPolygonStipple = _impl_glGetPolygonStipple;
}
PFN_glGetPolygonStipple _glptr_glGetPolygonStipple = _impl_glGetPolygonStipple;

static void GL_APIENTRY _impl_glMultiTexCoord2fv (GLenum target, const GLfloat * v) {
  printf("* glMultiTexCoord2fv\n");
  _glptr_glMultiTexCoord2fv = (PFN_glMultiTexCoord2fv)GalogenGetProcAddress("glMultiTexCoord2fv");
   _glptr_glMultiTexCoord2fv(target, v);
  CHECK_ERROR();
  _glptr_glMultiTexCoord2fv = _impl_glMultiTexCoord2fv;
}
PFN_glMultiTexCoord2fv _glptr_glMultiTexCoord2fv = _impl_glMultiTexCoord2fv;

static void GL_APIENTRY _impl_glSecondaryColor3ub (GLubyte red, GLubyte green, GLubyte blue) {
  printf("* glSecondaryColor3ub\n");
  _glptr_glSecondaryColor3ub = (PFN_glSecondaryColor3ub)GalogenGetProcAddress("glSecondaryColor3ub");
   _glptr_glSecondaryColor3ub(red, green, blue);
  CHECK_ERROR();
  _glptr_glSecondaryColor3ub = _impl_glSecondaryColor3ub;
}
PFN_glSecondaryColor3ub _glptr_glSecondaryColor3ub = _impl_glSecondaryColor3ub;

static void GL_APIENTRY _impl_glLightModeli (GLenum pname, GLint param) {
  printf("* glLightModeli\n");
  _glptr_glLightModeli = (PFN_glLightModeli)GalogenGetProcAddress("glLightModeli");
   _glptr_glLightModeli(pname, param);
  CHECK_ERROR();
  _glptr_glLightModeli = _impl_glLightModeli;
}
PFN_glLightModeli _glptr_glLightModeli = _impl_glLightModeli;

static void GL_APIENTRY _impl_glCompressedTexImage2D (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void * data) {
  printf("* glCompressedTexImage2D\n");
  _glptr_glCompressedTexImage2D = (PFN_glCompressedTexImage2D)GalogenGetProcAddress("glCompressedTexImage2D");
   _glptr_glCompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, data);
  CHECK_ERROR();
  _glptr_glCompressedTexImage2D = _impl_glCompressedTexImage2D;
}
PFN_glCompressedTexImage2D _glptr_glCompressedTexImage2D = _impl_glCompressedTexImage2D;

static void GL_APIENTRY _impl_glGetPixelMapuiv (GLenum map, GLuint * values) {
  printf("* glGetPixelMapuiv\n");
  _glptr_glGetPixelMapuiv = (PFN_glGetPixelMapuiv)GalogenGetProcAddress("glGetPixelMapuiv");
   _glptr_glGetPixelMapuiv(map, values);
  CHECK_ERROR();
  _glptr_glGetPixelMapuiv = _impl_glGetPixelMapuiv;
}
PFN_glGetPixelMapuiv _glptr_glGetPixelMapuiv = _impl_glGetPixelMapuiv;

static void GL_APIENTRY _impl_glGetMapiv (GLenum target, GLenum query, GLint * v) {
  printf("* glGetMapiv\n");
  _glptr_glGetMapiv = (PFN_glGetMapiv)GalogenGetProcAddress("glGetMapiv");
   _glptr_glGetMapiv(target, query, v);
  CHECK_ERROR();
  _glptr_glGetMapiv = _impl_glGetMapiv;
}
PFN_glGetMapiv _glptr_glGetMapiv = _impl_glGetMapiv;

static void GL_APIENTRY _impl_glGetLightfv (GLenum light, GLenum pname, GLfloat * params) {
  printf("* glGetLightfv\n");
  _glptr_glGetLightfv = (PFN_glGetLightfv)GalogenGetProcAddress("glGetLightfv");
   _glptr_glGetLightfv(light, pname, params);
  CHECK_ERROR();
  _glptr_glGetLightfv = _impl_glGetLightfv;
}
PFN_glGetLightfv _glptr_glGetLightfv = _impl_glGetLightfv;

static void GL_APIENTRY _impl_glDrawPixels (GLsizei width, GLsizei height, GLenum format, GLenum type, const void * pixels) {
  printf("* glDrawPixels\n");
  _glptr_glDrawPixels = (PFN_glDrawPixels)GalogenGetProcAddress("glDrawPixels");
   _glptr_glDrawPixels(width, height, format, type, pixels);
  CHECK_ERROR();
  _glptr_glDrawPixels = _impl_glDrawPixels;
}
PFN_glDrawPixels _glptr_glDrawPixels = _impl_glDrawPixels;

static void GL_APIENTRY _impl_glBindProgramARB (GLenum target, GLuint program) {
  printf("* glBindProgramARB\n");
  _glptr_glBindProgramARB = (PFN_glBindProgramARB)GalogenGetProcAddress("glBindProgramARB");
   _glptr_glBindProgramARB(target, program);
  CHECK_ERROR();
  _glptr_glBindProgramARB = _impl_glBindProgramARB;
}
PFN_glBindProgramARB _glptr_glBindProgramARB = _impl_glBindProgramARB;

static void GL_APIENTRY _impl_glCopyPixels (GLint x, GLint y, GLsizei width, GLsizei height, GLenum type) {
  printf("* glCopyPixels\n");
  _glptr_glCopyPixels = (PFN_glCopyPixels)GalogenGetProcAddress("glCopyPixels");
   _glptr_glCopyPixels(x, y, width, height, type);
  CHECK_ERROR();
  _glptr_glCopyPixels = _impl_glCopyPixels;
}
PFN_glCopyPixels _glptr_glCopyPixels = _impl_glCopyPixels;

static void GL_APIENTRY _impl_glSecondaryColor3iv (const GLint * v) {
  printf("* glSecondaryColor3iv\n");
  _glptr_glSecondaryColor3iv = (PFN_glSecondaryColor3iv)GalogenGetProcAddress("glSecondaryColor3iv");
   _glptr_glSecondaryColor3iv(v);
  CHECK_ERROR();
  _glptr_glSecondaryColor3iv = _impl_glSecondaryColor3iv;
}
PFN_glSecondaryColor3iv _glptr_glSecondaryColor3iv = _impl_glSecondaryColor3iv;

static void GL_APIENTRY _impl_glMapGrid1d (GLint un, GLdouble u1, GLdouble u2) {
  printf("* glMapGrid1d\n");
  _glptr_glMapGrid1d = (PFN_glMapGrid1d)GalogenGetProcAddress("glMapGrid1d");
   _glptr_glMapGrid1d(un, u1, u2);
  CHECK_ERROR();
  _glptr_glMapGrid1d = _impl_glMapGrid1d;
}
PFN_glMapGrid1d _glptr_glMapGrid1d = _impl_glMapGrid1d;

static void GL_APIENTRY _impl_glAlphaFunc (GLenum func, GLfloat ref) {
  printf("* glAlphaFunc\n");
  _glptr_glAlphaFunc = (PFN_glAlphaFunc)GalogenGetProcAddress("glAlphaFunc");
   _glptr_glAlphaFunc(func, ref);
  CHECK_ERROR();
  _glptr_glAlphaFunc = _impl_glAlphaFunc;
}
PFN_glAlphaFunc _glptr_glAlphaFunc = _impl_glAlphaFunc;

static void GL_APIENTRY _impl_glDisableClientState (GLenum array) {
  printf("* glDisableClientState\n");
  _glptr_glDisableClientState = (PFN_glDisableClientState)GalogenGetProcAddress("glDisableClientState");
   _glptr_glDisableClientState(array);
  CHECK_ERROR();
  _glptr_glDisableClientState = _impl_glDisableClientState;
}
PFN_glDisableClientState _glptr_glDisableClientState = _impl_glDisableClientState;

static void GL_APIENTRY _impl_glEvalPoint2 (GLint i, GLint j) {
  printf("* glEvalPoint2\n");
  _glptr_glEvalPoint2 = (PFN_glEvalPoint2)GalogenGetProcAddress("glEvalPoint2");
   _glptr_glEvalPoint2(i, j);
  CHECK_ERROR();
  _glptr_glEvalPoint2 = _impl_glEvalPoint2;
}
PFN_glEvalPoint2 _glptr_glEvalPoint2 = _impl_glEvalPoint2;

static void GL_APIENTRY _impl_glTexCoord1d (GLdouble s) {
  printf("* glTexCoord1d\n");
  _glptr_glTexCoord1d = (PFN_glTexCoord1d)GalogenGetProcAddress("glTexCoord1d");
   _glptr_glTexCoord1d(s);
  CHECK_ERROR();
  _glptr_glTexCoord1d = _impl_glTexCoord1d;
}
PFN_glTexCoord1d _glptr_glTexCoord1d = _impl_glTexCoord1d;

static void GL_APIENTRY _impl_glVertexPointer (GLint size, GLenum type, GLsizei stride, const void * pointer) {
  printf("* glVertexPointer\n");
  _glptr_glVertexPointer = (PFN_glVertexPointer)GalogenGetProcAddress("glVertexPointer");
   _glptr_glVertexPointer(size, type, stride, pointer);
  CHECK_ERROR();
  _glptr_glVertexPointer = _impl_glVertexPointer;
}
PFN_glVertexPointer _glptr_glVertexPointer = _impl_glVertexPointer;

static void GL_APIENTRY _impl_glEvalMesh1 (GLenum mode, GLint i1, GLint i2) {
  printf("* glEvalMesh1\n");
  _glptr_glEvalMesh1 = (PFN_glEvalMesh1)GalogenGetProcAddress("glEvalMesh1");
   _glptr_glEvalMesh1(mode, i1, i2);
  CHECK_ERROR();
  _glptr_glEvalMesh1 = _impl_glEvalMesh1;
}
PFN_glEvalMesh1 _glptr_glEvalMesh1 = _impl_glEvalMesh1;

static void GL_APIENTRY _impl_glEvalCoord2f (GLfloat u, GLfloat v) {
  printf("* glEvalCoord2f\n");
  _glptr_glEvalCoord2f = (PFN_glEvalCoord2f)GalogenGetProcAddress("glEvalCoord2f");
   _glptr_glEvalCoord2f(u, v);
  CHECK_ERROR();
  _glptr_glEvalCoord2f = _impl_glEvalCoord2f;
}
PFN_glEvalCoord2f _glptr_glEvalCoord2f = _impl_glEvalCoord2f;

static void GL_APIENTRY _impl_glUniform1fv (GLint location, GLsizei count, const GLfloat * value) {
  printf("* glUniform1fv\n");
  _glptr_glUniform1fv = (PFN_glUniform1fv)GalogenGetProcAddress("glUniform1fv");
   _glptr_glUniform1fv(location, count, value);
  CHECK_ERROR();
  _glptr_glUniform1fv = _impl_glUniform1fv;
}
PFN_glUniform1fv _glptr_glUniform1fv = _impl_glUniform1fv;

static void GL_APIENTRY _impl_glEvalCoord2dv (const GLdouble * u) {
  printf("* glEvalCoord2dv\n");
  _glptr_glEvalCoord2dv = (PFN_glEvalCoord2dv)GalogenGetProcAddress("glEvalCoord2dv");
   _glptr_glEvalCoord2dv(u);
  CHECK_ERROR();
  _glptr_glEvalCoord2dv = _impl_glEvalCoord2dv;
}
PFN_glEvalCoord2dv _glptr_glEvalCoord2dv = _impl_glEvalCoord2dv;

static void GL_APIENTRY _impl_glEvalCoord2d (GLdouble u, GLdouble v) {
  printf("* glEvalCoord2d\n");
  _glptr_glEvalCoord2d = (PFN_glEvalCoord2d)GalogenGetProcAddress("glEvalCoord2d");
   _glptr_glEvalCoord2d(u, v);
  CHECK_ERROR();
  _glptr_glEvalCoord2d = _impl_glEvalCoord2d;
}
PFN_glEvalCoord2d _glptr_glEvalCoord2d = _impl_glEvalCoord2d;

static void GL_APIENTRY _impl_glGetTexEnvfv (GLenum target, GLenum pname, GLfloat * params) {
  printf("* glGetTexEnvfv\n");
  _glptr_glGetTexEnvfv = (PFN_glGetTexEnvfv)GalogenGetProcAddress("glGetTexEnvfv");
   _glptr_glGetTexEnvfv(target, pname, params);
  CHECK_ERROR();
  _glptr_glGetTexEnvfv = _impl_glGetTexEnvfv;
}
PFN_glGetTexEnvfv _glptr_glGetTexEnvfv = _impl_glGetTexEnvfv;

static void GL_APIENTRY _impl_glLightiv (GLenum light, GLenum pname, const GLint * params) {
  printf("* glLightiv\n");
  _glptr_glLightiv = (PFN_glLightiv)GalogenGetProcAddress("glLightiv");
   _glptr_glLightiv(light, pname, params);
  CHECK_ERROR();
  _glptr_glLightiv = _impl_glLightiv;
}
PFN_glLightiv _glptr_glLightiv = _impl_glLightiv;

static void GL_APIENTRY _impl_glEvalCoord1fv (const GLfloat * u) {
  printf("* glEvalCoord1fv\n");
  _glptr_glEvalCoord1fv = (PFN_glEvalCoord1fv)GalogenGetProcAddress("glEvalCoord1fv");
   _glptr_glEvalCoord1fv(u);
  CHECK_ERROR();
  _glptr_glEvalCoord1fv = _impl_glEvalCoord1fv;
}
PFN_glEvalCoord1fv _glptr_glEvalCoord1fv = _impl_glEvalCoord1fv;

static void GL_APIENTRY _impl_glMultiTexCoord2s (GLenum target, GLshort s, GLshort t) {
  printf("* glMultiTexCoord2s\n");
  _glptr_glMultiTexCoord2s = (PFN_glMultiTexCoord2s)GalogenGetProcAddress("glMultiTexCoord2s");
   _glptr_glMultiTexCoord2s(target, s, t);
  CHECK_ERROR();
  _glptr_glMultiTexCoord2s = _impl_glMultiTexCoord2s;
}
PFN_glMultiTexCoord2s _glptr_glMultiTexCoord2s = _impl_glMultiTexCoord2s;

static void GL_APIENTRY _impl_glEvalCoord1f (GLfloat u) {
  printf("* glEvalCoord1f\n");
  _glptr_glEvalCoord1f = (PFN_glEvalCoord1f)GalogenGetProcAddress("glEvalCoord1f");
   _glptr_glEvalCoord1f(u);
  CHECK_ERROR();
  _glptr_glEvalCoord1f = _impl_glEvalCoord1f;
}
PFN_glEvalCoord1f _glptr_glEvalCoord1f = _impl_glEvalCoord1f;

static void GL_APIENTRY _impl_glVertexAttrib4uivARB (GLuint index, const GLuint * v) {
  printf("* glVertexAttrib4uivARB\n");
  _glptr_glVertexAttrib4uivARB = (PFN_glVertexAttrib4uivARB)GalogenGetProcAddress("glVertexAttrib4uivARB");
   _glptr_glVertexAttrib4uivARB(index, v);
  CHECK_ERROR();
  _glptr_glVertexAttrib4uivARB = _impl_glVertexAttrib4uivARB;
}
PFN_glVertexAttrib4uivARB _glptr_glVertexAttrib4uivARB = _impl_glVertexAttrib4uivARB;

static void GL_APIENTRY _impl_glEvalCoord1d (GLdouble u) {
  printf("* glEvalCoord1d\n");
  _glptr_glEvalCoord1d = (PFN_glEvalCoord1d)GalogenGetProcAddress("glEvalCoord1d");
   _glptr_glEvalCoord1d(u);
  CHECK_ERROR();
  _glptr_glEvalCoord1d = _impl_glEvalCoord1d;
}
PFN_glEvalCoord1d _glptr_glEvalCoord1d = _impl_glEvalCoord1d;

static void GL_APIENTRY _impl_glWindowPos2f (GLfloat x, GLfloat y) {
  printf("* glWindowPos2f\n");
  _glptr_glWindowPos2f = (PFN_glWindowPos2f)GalogenGetProcAddress("glWindowPos2f");
   _glptr_glWindowPos2f(x, y);
  CHECK_ERROR();
  _glptr_glWindowPos2f = _impl_glWindowPos2f;
}
PFN_glWindowPos2f _glptr_glWindowPos2f = _impl_glWindowPos2f;

static void GL_APIENTRY _impl_glMapGrid2f (GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2) {
  printf("* glMapGrid2f\n");
  _glptr_glMapGrid2f = (PFN_glMapGrid2f)GalogenGetProcAddress("glMapGrid2f");
   _glptr_glMapGrid2f(un, u1, u2, vn, v1, v2);
  CHECK_ERROR();
  _glptr_glMapGrid2f = _impl_glMapGrid2f;
}
PFN_glMapGrid2f _glptr_glMapGrid2f = _impl_glMapGrid2f;

static void GL_APIENTRY _impl_glUniform1f (GLint location, GLfloat v0) {
  printf("* glUniform1f\n");
  _glptr_glUniform1f = (PFN_glUniform1f)GalogenGetProcAddress("glUniform1f");
   _glptr_glUniform1f(location, v0);
  CHECK_ERROR();
  _glptr_glUniform1f = _impl_glUniform1f;
}
PFN_glUniform1f _glptr_glUniform1f = _impl_glUniform1f;

static void GL_APIENTRY _impl_glIndexub (GLubyte c) {
  printf("* glIndexub\n");
  _glptr_glIndexub = (PFN_glIndexub)GalogenGetProcAddress("glIndexub");
   _glptr_glIndexub(c);
  CHECK_ERROR();
  _glptr_glIndexub = _impl_glIndexub;
}
PFN_glIndexub _glptr_glIndexub = _impl_glIndexub;

static void GL_APIENTRY _impl_glMapGrid2d (GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2) {
  printf("* glMapGrid2d\n");
  _glptr_glMapGrid2d = (PFN_glMapGrid2d)GalogenGetProcAddress("glMapGrid2d");
   _glptr_glMapGrid2d(un, u1, u2, vn, v1, v2);
  CHECK_ERROR();
  _glptr_glMapGrid2d = _impl_glMapGrid2d;
}
PFN_glMapGrid2d _glptr_glMapGrid2d = _impl_glMapGrid2d;

static void GL_APIENTRY _impl_glMapGrid1f (GLint un, GLfloat u1, GLfloat u2) {
  printf("* glMapGrid1f\n");
  _glptr_glMapGrid1f = (PFN_glMapGrid1f)GalogenGetProcAddress("glMapGrid1f");
   _glptr_glMapGrid1f(un, u1, u2);
  CHECK_ERROR();
  _glptr_glMapGrid1f = _impl_glMapGrid1f;
}
PFN_glMapGrid1f _glptr_glMapGrid1f = _impl_glMapGrid1f;

static void GL_APIENTRY _impl_glWindowPos3f (GLfloat x, GLfloat y, GLfloat z) {
  printf("* glWindowPos3f\n");
  _glptr_glWindowPos3f = (PFN_glWindowPos3f)GalogenGetProcAddress("glWindowPos3f");
   _glptr_glWindowPos3f(x, y, z);
  CHECK_ERROR();
  _glptr_glWindowPos3f = _impl_glWindowPos3f;
}
PFN_glWindowPos3f _glptr_glWindowPos3f = _impl_glWindowPos3f;

static void GL_APIENTRY _impl_glCompressedTexImage1D (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void * data) {
  printf("* glCompressedTexImage1D\n");
  _glptr_glCompressedTexImage1D = (PFN_glCompressedTexImage1D)GalogenGetProcAddress("glCompressedTexImage1D");
   _glptr_glCompressedTexImage1D(target, level, internalformat, width, border, imageSize, data);
  CHECK_ERROR();
  _glptr_glCompressedTexImage1D = _impl_glCompressedTexImage1D;
}
PFN_glCompressedTexImage1D _glptr_glCompressedTexImage1D = _impl_glCompressedTexImage1D;

static void GL_APIENTRY _impl_glMap2f (GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat * points) {
  printf("* glMap2f\n");
  _glptr_glMap2f = (PFN_glMap2f)GalogenGetProcAddress("glMap2f");
   _glptr_glMap2f(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
  CHECK_ERROR();
  _glptr_glMap2f = _impl_glMap2f;
}
PFN_glMap2f _glptr_glMap2f = _impl_glMap2f;

static void GL_APIENTRY _impl_glMap1f (GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat * points) {
  printf("* glMap1f\n");
  _glptr_glMap1f = (PFN_glMap1f)GalogenGetProcAddress("glMap1f");
   _glptr_glMap1f(target, u1, u2, stride, order, points);
  CHECK_ERROR();
  _glptr_glMap1f = _impl_glMap1f;
}
PFN_glMap1f _glptr_glMap1f = _impl_glMap1f;

static void GL_APIENTRY _impl_glCompileShader (GLuint shader) {
  printf("* glCompileShader\n");
  _glptr_glCompileShader = (PFN_glCompileShader)GalogenGetProcAddress("glCompileShader");
   _glptr_glCompileShader(shader);
  CHECK_ERROR();
  _glptr_glCompileShader = _impl_glCompileShader;
}
PFN_glCompileShader _glptr_glCompileShader = _impl_glCompileShader;

static void GL_APIENTRY _impl_glMultiTexCoord2i (GLenum target, GLint s, GLint t) {
  printf("* glMultiTexCoord2i\n");
  _glptr_glMultiTexCoord2i = (PFN_glMultiTexCoord2i)GalogenGetProcAddress("glMultiTexCoord2i");
   _glptr_glMultiTexCoord2i(target, s, t);
  CHECK_ERROR();
  _glptr_glMultiTexCoord2i = _impl_glMultiTexCoord2i;
}
PFN_glMultiTexCoord2i _glptr_glMultiTexCoord2i = _impl_glMultiTexCoord2i;

static void GL_APIENTRY _impl_glPopAttrib () {
  printf("* glPopAttrib\n");
  _glptr_glPopAttrib = (PFN_glPopAttrib)GalogenGetProcAddress("glPopAttrib");
   _glptr_glPopAttrib();
  CHECK_ERROR();
  _glptr_glPopAttrib = _impl_glPopAttrib;
}
PFN_glPopAttrib _glptr_glPopAttrib = _impl_glPopAttrib;

static void GL_APIENTRY _impl_glPolygonMode (GLenum face, GLenum mode) {
  printf("* glPolygonMode\n");
  _glptr_glPolygonMode = (PFN_glPolygonMode)GalogenGetProcAddress("glPolygonMode");
   _glptr_glPolygonMode(face, mode);
  CHECK_ERROR();
  _glptr_glPolygonMode = _impl_glPolygonMode;
}
PFN_glPolygonMode _glptr_glPolygonMode = _impl_glPolygonMode;

static void GL_APIENTRY _impl_glAccum (GLenum op, GLfloat value) {
  printf("* glAccum\n");
  _glptr_glAccum = (PFN_glAccum)GalogenGetProcAddress("glAccum");
   _glptr_glAccum(op, value);
  CHECK_ERROR();
  _glptr_glAccum = _impl_glAccum;
}
PFN_glAccum _glptr_glAccum = _impl_glAccum;

static void GL_APIENTRY _impl_glVertexAttrib2s (GLuint index, GLshort x, GLshort y) {
  printf("* glVertexAttrib2s\n");
  _glptr_glVertexAttrib2s = (PFN_glVertexAttrib2s)GalogenGetProcAddress("glVertexAttrib2s");
   _glptr_glVertexAttrib2s(index, x, y);
  CHECK_ERROR();
  _glptr_glVertexAttrib2s = _impl_glVertexAttrib2s;
}
PFN_glVertexAttrib2s _glptr_glVertexAttrib2s = _impl_glVertexAttrib2s;

static void GL_APIENTRY _impl_glMultiTexCoord4s (GLenum target, GLshort s, GLshort t, GLshort r, GLshort q) {
  printf("* glMultiTexCoord4s\n");
  _glptr_glMultiTexCoord4s = (PFN_glMultiTexCoord4s)GalogenGetProcAddress("glMultiTexCoord4s");
   _glptr_glMultiTexCoord4s(target, s, t, r, q);
  CHECK_ERROR();
  _glptr_glMultiTexCoord4s = _impl_glMultiTexCoord4s;
}
PFN_glMultiTexCoord4s _glptr_glMultiTexCoord4s = _impl_glMultiTexCoord4s;

static void GL_APIENTRY _impl_glTexSubImage3D (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * pixels) {
  printf("* glTexSubImage3D\n");
  _glptr_glTexSubImage3D = (PFN_glTexSubImage3D)GalogenGetProcAddress("glTexSubImage3D");
   _glptr_glTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
  CHECK_ERROR();
  _glptr_glTexSubImage3D = _impl_glTexSubImage3D;
}
PFN_glTexSubImage3D _glptr_glTexSubImage3D = _impl_glTexSubImage3D;

static void GL_APIENTRY _impl_glColor4f (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha) {
  printf("* glColor4f\n");
  _glptr_glColor4f = (PFN_glColor4f)GalogenGetProcAddress("glColor4f");
   _glptr_glColor4f(red, green, blue, alpha);
  CHECK_ERROR();
  _glptr_glColor4f = _impl_glColor4f;
}
PFN_glColor4f _glptr_glColor4f = _impl_glColor4f;

static void GL_APIENTRY _impl_glIndexMask (GLuint mask) {
  printf("* glIndexMask\n");
  _glptr_glIndexMask = (PFN_glIndexMask)GalogenGetProcAddress("glIndexMask");
   _glptr_glIndexMask(mask);
  CHECK_ERROR();
  _glptr_glIndexMask = _impl_glIndexMask;
}
PFN_glIndexMask _glptr_glIndexMask = _impl_glIndexMask;

static void GL_APIENTRY _impl_glClearAccum (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha) {
  printf("* glClearAccum\n");
  _glptr_glClearAccum = (PFN_glClearAccum)GalogenGetProcAddress("glClearAccum");
   _glptr_glClearAccum(red, green, blue, alpha);
  CHECK_ERROR();
  _glptr_glClearAccum = _impl_glClearAccum;
}
PFN_glClearAccum _glptr_glClearAccum = _impl_glClearAccum;

static void GL_APIENTRY _impl_glSecondaryColor3b (GLbyte red, GLbyte green, GLbyte blue) {
  printf("* glSecondaryColor3b\n");
  _glptr_glSecondaryColor3b = (PFN_glSecondaryColor3b)GalogenGetProcAddress("glSecondaryColor3b");
   _glptr_glSecondaryColor3b(red, green, blue);
  CHECK_ERROR();
  _glptr_glSecondaryColor3b = _impl_glSecondaryColor3b;
}
PFN_glSecondaryColor3b _glptr_glSecondaryColor3b = _impl_glSecondaryColor3b;

static void GL_APIENTRY _impl_glGenTextures (GLsizei n, GLuint * textures) {
  printf("* glGenTextures\n");
  _glptr_glGenTextures = (PFN_glGenTextures)GalogenGetProcAddress("glGenTextures");
   _glptr_glGenTextures(n, textures);
  CHECK_ERROR();
  _glptr_glGenTextures = _impl_glGenTextures;
}
PFN_glGenTextures _glptr_glGenTextures = _impl_glGenTextures;

static void GL_APIENTRY _impl_glVertexAttrib1dv (GLuint index, const GLdouble * v) {
  printf("* glVertexAttrib1dv\n");
  _glptr_glVertexAttrib1dv = (PFN_glVertexAttrib1dv)GalogenGetProcAddress("glVertexAttrib1dv");
   _glptr_glVertexAttrib1dv(index, v);
  CHECK_ERROR();
  _glptr_glVertexAttrib1dv = _impl_glVertexAttrib1dv;
}
PFN_glVertexAttrib1dv _glptr_glVertexAttrib1dv = _impl_glVertexAttrib1dv;

static void GL_APIENTRY _impl_glPushName (GLuint name) {
  printf("* glPushName\n");
  _glptr_glPushName = (PFN_glPushName)GalogenGetProcAddress("glPushName");
   _glptr_glPushName(name);
  CHECK_ERROR();
  _glptr_glPushName = _impl_glPushName;
}
PFN_glPushName _glptr_glPushName = _impl_glPushName;

static void GL_APIENTRY _impl_glPassThrough (GLfloat token) {
  printf("* glPassThrough\n");
  _glptr_glPassThrough = (PFN_glPassThrough)GalogenGetProcAddress("glPassThrough");
   _glptr_glPassThrough(token);
  CHECK_ERROR();
  _glptr_glPassThrough = _impl_glPassThrough;
}
PFN_glPassThrough _glptr_glPassThrough = _impl_glPassThrough;

static void GL_APIENTRY _impl_glInitNames () {
  printf("* glInitNames\n");
  _glptr_glInitNames = (PFN_glInitNames)GalogenGetProcAddress("glInitNames");
   _glptr_glInitNames();
  CHECK_ERROR();
  _glptr_glInitNames = _impl_glInitNames;
}
PFN_glInitNames _glptr_glInitNames = _impl_glInitNames;

static void GL_APIENTRY _impl_glFeedbackBuffer (GLsizei size, GLenum type, GLfloat * buffer) {
  printf("* glFeedbackBuffer\n");
  _glptr_glFeedbackBuffer = (PFN_glFeedbackBuffer)GalogenGetProcAddress("glFeedbackBuffer");
   _glptr_glFeedbackBuffer(size, type, buffer);
  CHECK_ERROR();
  _glptr_glFeedbackBuffer = _impl_glFeedbackBuffer;
}
PFN_glFeedbackBuffer _glptr_glFeedbackBuffer = _impl_glFeedbackBuffer;

static void GL_APIENTRY _impl_glPushAttrib (GLbitfield mask) {
  printf("* glPushAttrib\n");
  _glptr_glPushAttrib = (PFN_glPushAttrib)GalogenGetProcAddress("glPushAttrib");
   _glptr_glPushAttrib(mask);
  CHECK_ERROR();
  _glptr_glPushAttrib = _impl_glPushAttrib;
}
PFN_glPushAttrib _glptr_glPushAttrib = _impl_glPushAttrib;

static void GL_APIENTRY _impl_glTexGeniv (GLenum coord, GLenum pname, const GLint * params) {
  printf("* glTexGeniv\n");
  _glptr_glTexGeniv = (PFN_glTexGeniv)GalogenGetProcAddress("glTexGeniv");
   _glptr_glTexGeniv(coord, pname, params);
  CHECK_ERROR();
  _glptr_glTexGeniv = _impl_glTexGeniv;
}
PFN_glTexGeniv _glptr_glTexGeniv = _impl_glTexGeniv;

static void GL_APIENTRY _impl_glTexGenfv (GLenum coord, GLenum pname, const GLfloat * params) {
  printf("* glTexGenfv\n");
  _glptr_glTexGenfv = (PFN_glTexGenfv)GalogenGetProcAddress("glTexGenfv");
   _glptr_glTexGenfv(coord, pname, params);
  CHECK_ERROR();
  _glptr_glTexGenfv = _impl_glTexGenfv;
}
PFN_glTexGenfv _glptr_glTexGenfv = _impl_glTexGenfv;

static void GL_APIENTRY _impl_glTexGenf (GLenum coord, GLenum pname, GLfloat param) {
  printf("* glTexGenf\n");
  _glptr_glTexGenf = (PFN_glTexGenf)GalogenGetProcAddress("glTexGenf");
   _glptr_glTexGenf(coord, pname, param);
  CHECK_ERROR();
  _glptr_glTexGenf = _impl_glTexGenf;
}
PFN_glTexGenf _glptr_glTexGenf = _impl_glTexGenf;

static void GL_APIENTRY _impl_glGetPixelMapfv (GLenum map, GLfloat * values) {
  printf("* glGetPixelMapfv\n");
  _glptr_glGetPixelMapfv = (PFN_glGetPixelMapfv)GalogenGetProcAddress("glGetPixelMapfv");
   _glptr_glGetPixelMapfv(map, values);
  CHECK_ERROR();
  _glptr_glGetPixelMapfv = _impl_glGetPixelMapfv;
}
PFN_glGetPixelMapfv _glptr_glGetPixelMapfv = _impl_glGetPixelMapfv;

static void GL_APIENTRY _impl_glGetPixelMapusv (GLenum map, GLushort * values) {
  printf("* glGetPixelMapusv\n");
  _glptr_glGetPixelMapusv = (PFN_glGetPixelMapusv)GalogenGetProcAddress("glGetPixelMapusv");
   _glptr_glGetPixelMapusv(map, values);
  CHECK_ERROR();
  _glptr_glGetPixelMapusv = _impl_glGetPixelMapusv;
}
PFN_glGetPixelMapusv _glptr_glGetPixelMapusv = _impl_glGetPixelMapusv;

static void GL_APIENTRY _impl_glDeleteShader (GLuint shader) {
  printf("* glDeleteShader\n");
  _glptr_glDeleteShader = (PFN_glDeleteShader)GalogenGetProcAddress("glDeleteShader");
   _glptr_glDeleteShader(shader);
  CHECK_ERROR();
  _glptr_glDeleteShader = _impl_glDeleteShader;
}
PFN_glDeleteShader _glptr_glDeleteShader = _impl_glDeleteShader;

static void GL_APIENTRY _impl_glTexEnviv (GLenum target, GLenum pname, const GLint * params) {
  printf("* glTexEnviv\n");
  _glptr_glTexEnviv = (PFN_glTexEnviv)GalogenGetProcAddress("glTexEnviv");
   _glptr_glTexEnviv(target, pname, params);
  CHECK_ERROR();
  _glptr_glTexEnviv = _impl_glTexEnviv;
}
PFN_glTexEnviv _glptr_glTexEnviv = _impl_glTexEnviv;

static void GL_APIENTRY _impl_glTexEnvi (GLenum target, GLenum pname, GLint param) {
  printf("* glTexEnvi\n");
  _glptr_glTexEnvi = (PFN_glTexEnvi)GalogenGetProcAddress("glTexEnvi");
   _glptr_glTexEnvi(target, pname, param);
  CHECK_ERROR();
  _glptr_glTexEnvi = _impl_glTexEnvi;
}
PFN_glTexEnvi _glptr_glTexEnvi = _impl_glTexEnvi;

static void GL_APIENTRY _impl_glSecondaryColor3s (GLshort red, GLshort green, GLshort blue) {
  printf("* glSecondaryColor3s\n");
  _glptr_glSecondaryColor3s = (PFN_glSecondaryColor3s)GalogenGetProcAddress("glSecondaryColor3s");
   _glptr_glSecondaryColor3s(red, green, blue);
  CHECK_ERROR();
  _glptr_glSecondaryColor3s = _impl_glSecondaryColor3s;
}
PFN_glSecondaryColor3s _glptr_glSecondaryColor3s = _impl_glSecondaryColor3s;

static GLboolean GL_APIENTRY _impl_glAreTexturesResident (GLsizei n, const GLuint * textures, GLboolean * residences) {
  printf("* glAreTexturesResident\n");
  _glptr_glAreTexturesResident = (PFN_glAreTexturesResident)GalogenGetProcAddress("glAreTexturesResident");
  return _glptr_glAreTexturesResident(n, textures, residences);
  CHECK_ERROR();
  _glptr_glAreTexturesResident = _impl_glAreTexturesResident;
}
PFN_glAreTexturesResident _glptr_glAreTexturesResident = _impl_glAreTexturesResident;

static void GL_APIENTRY _impl_glTexEnvf (GLenum target, GLenum pname, GLfloat param) {
  printf("* glTexEnvf\n");
  _glptr_glTexEnvf = (PFN_glTexEnvf)GalogenGetProcAddress("glTexEnvf");
   _glptr_glTexEnvf(target, pname, param);
  CHECK_ERROR();
  _glptr_glTexEnvf = _impl_glTexEnvf;
}
PFN_glTexEnvf _glptr_glTexEnvf = _impl_glTexEnvf;

static void GL_APIENTRY _impl_glCompressedTexSubImage2D (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void * data) {
  printf("* glCompressedTexSubImage2D\n");
  _glptr_glCompressedTexSubImage2D = (PFN_glCompressedTexSubImage2D)GalogenGetProcAddress("glCompressedTexSubImage2D");
   _glptr_glCompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data);
  CHECK_ERROR();
  _glptr_glCompressedTexSubImage2D = _impl_glCompressedTexSubImage2D;
}
PFN_glCompressedTexSubImage2D _glptr_glCompressedTexSubImage2D = _impl_glCompressedTexSubImage2D;

static void GL_APIENTRY _impl_glPolygonStipple (const GLubyte * mask) {
  printf("* glPolygonStipple\n");
  _glptr_glPolygonStipple = (PFN_glPolygonStipple)GalogenGetProcAddress("glPolygonStipple");
   _glptr_glPolygonStipple(mask);
  CHECK_ERROR();
  _glptr_glPolygonStipple = _impl_glPolygonStipple;
}
PFN_glPolygonStipple _glptr_glPolygonStipple = _impl_glPolygonStipple;

static void GL_APIENTRY _impl_glFogCoordPointer (GLenum type, GLsizei stride, const void * pointer) {
  printf("* glFogCoordPointer\n");
  _glptr_glFogCoordPointer = (PFN_glFogCoordPointer)GalogenGetProcAddress("glFogCoordPointer");
   _glptr_glFogCoordPointer(type, stride, pointer);
  CHECK_ERROR();
  _glptr_glFogCoordPointer = _impl_glFogCoordPointer;
}
PFN_glFogCoordPointer _glptr_glFogCoordPointer = _impl_glFogCoordPointer;

static void GL_APIENTRY _impl_glMateriali (GLenum face, GLenum pname, GLint param) {
  printf("* glMateriali\n");
  _glptr_glMateriali = (PFN_glMateriali)GalogenGetProcAddress("glMateriali");
   _glptr_glMateriali(face, pname, param);
  CHECK_ERROR();
  _glptr_glMateriali = _impl_glMateriali;
}
PFN_glMateriali _glptr_glMateriali = _impl_glMateriali;

static void GL_APIENTRY _impl_glMaterialfv (GLenum face, GLenum pname, const GLfloat * params) {
  printf("* glMaterialfv\n");
  _glptr_glMaterialfv = (PFN_glMaterialfv)GalogenGetProcAddress("glMaterialfv");
   _glptr_glMaterialfv(face, pname, params);
  CHECK_ERROR();
  _glptr_glMaterialfv = _impl_glMaterialfv;
}
PFN_glMaterialfv _glptr_glMaterialfv = _impl_glMaterialfv;

static void GL_APIENTRY _impl_glMultiTexCoord4fv (GLenum target, const GLfloat * v) {
  printf("* glMultiTexCoord4fv\n");
  _glptr_glMultiTexCoord4fv = (PFN_glMultiTexCoord4fv)GalogenGetProcAddress("glMultiTexCoord4fv");
   _glptr_glMultiTexCoord4fv(target, v);
  CHECK_ERROR();
  _glptr_glMultiTexCoord4fv = _impl_glMultiTexCoord4fv;
}
PFN_glMultiTexCoord4fv _glptr_glMultiTexCoord4fv = _impl_glMultiTexCoord4fv;

static void GL_APIENTRY _impl_glClearStencil (GLint s) {
  printf("* glClearStencil\n");
  _glptr_glClearStencil = (PFN_glClearStencil)GalogenGetProcAddress("glClearStencil");
   _glptr_glClearStencil(s);
  CHECK_ERROR();
  _glptr_glClearStencil = _impl_glClearStencil;
}
PFN_glClearStencil _glptr_glClearStencil = _impl_glClearStencil;

static void GL_APIENTRY _impl_glLineStipple (GLint factor, GLushort pattern) {
  printf("* glLineStipple\n");
  _glptr_glLineStipple = (PFN_glLineStipple)GalogenGetProcAddress("glLineStipple");
   _glptr_glLineStipple(factor, pattern);
  CHECK_ERROR();
  _glptr_glLineStipple = _impl_glLineStipple;
}
PFN_glLineStipple _glptr_glLineStipple = _impl_glLineStipple;

static void GL_APIENTRY _impl_glVertexAttrib3fARB (GLuint index, GLfloat x, GLfloat y, GLfloat z) {
  printf("* glVertexAttrib3fARB\n");
  _glptr_glVertexAttrib3fARB = (PFN_glVertexAttrib3fARB)GalogenGetProcAddress("glVertexAttrib3fARB");
   _glptr_glVertexAttrib3fARB(index, x, y, z);
  CHECK_ERROR();
  _glptr_glVertexAttrib3fARB = _impl_glVertexAttrib3fARB;
}
PFN_glVertexAttrib3fARB _glptr_glVertexAttrib3fARB = _impl_glVertexAttrib3fARB;

static void GL_APIENTRY _impl_glColor4d (GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha) {
  printf("* glColor4d\n");
  _glptr_glColor4d = (PFN_glColor4d)GalogenGetProcAddress("glColor4d");
   _glptr_glColor4d(red, green, blue, alpha);
  CHECK_ERROR();
  _glptr_glColor4d = _impl_glColor4d;
}
PFN_glColor4d _glptr_glColor4d = _impl_glColor4d;

static void GL_APIENTRY _impl_glMultiTexCoord1i (GLenum target, GLint s) {
  printf("* glMultiTexCoord1i\n");
  _glptr_glMultiTexCoord1i = (PFN_glMultiTexCoord1i)GalogenGetProcAddress("glMultiTexCoord1i");
   _glptr_glMultiTexCoord1i(target, s);
  CHECK_ERROR();
  _glptr_glMultiTexCoord1i = _impl_glMultiTexCoord1i;
}
PFN_glMultiTexCoord1i _glptr_glMultiTexCoord1i = _impl_glMultiTexCoord1i;

static void GL_APIENTRY _impl_glGetMapdv (GLenum target, GLenum query, GLdouble * v) {
  printf("* glGetMapdv\n");
  _glptr_glGetMapdv = (PFN_glGetMapdv)GalogenGetProcAddress("glGetMapdv");
   _glptr_glGetMapdv(target, query, v);
  CHECK_ERROR();
  _glptr_glGetMapdv = _impl_glGetMapdv;
}
PFN_glGetMapdv _glptr_glGetMapdv = _impl_glGetMapdv;

static void GL_APIENTRY _impl_glRenderbufferStorage (GLenum target, GLenum internalformat, GLsizei width, GLsizei height) {
  printf("* glRenderbufferStorage\n");
  _glptr_glRenderbufferStorage = (PFN_glRenderbufferStorage)GalogenGetProcAddress("glRenderbufferStorage");
   _glptr_glRenderbufferStorage(target, internalformat, width, height);
  CHECK_ERROR();
  _glptr_glRenderbufferStorage = _impl_glRenderbufferStorage;
}
PFN_glRenderbufferStorage _glptr_glRenderbufferStorage = _impl_glRenderbufferStorage;

static void GL_APIENTRY _impl_glLightModelf (GLenum pname, GLfloat param) {
  printf("* glLightModelf\n");
  _glptr_glLightModelf = (PFN_glLightModelf)GalogenGetProcAddress("glLightModelf");
   _glptr_glLightModelf(pname, param);
  CHECK_ERROR();
  _glptr_glLightModelf = _impl_glLightModelf;
}
PFN_glLightModelf _glptr_glLightModelf = _impl_glLightModelf;

static void GL_APIENTRY _impl_glMultiDrawArrays (GLenum mode, const GLint * first, const GLsizei * count, GLsizei drawcount) {
  printf("* glMultiDrawArrays\n");
  _glptr_glMultiDrawArrays = (PFN_glMultiDrawArrays)GalogenGetProcAddress("glMultiDrawArrays");
   _glptr_glMultiDrawArrays(mode, first, count, drawcount);
  CHECK_ERROR();
  _glptr_glMultiDrawArrays = _impl_glMultiDrawArrays;
}
PFN_glMultiDrawArrays _glptr_glMultiDrawArrays = _impl_glMultiDrawArrays;

static void GL_APIENTRY _impl_glTexImage3D (GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void * pixels) {
  printf("* glTexImage3D\n");
  _glptr_glTexImage3D = (PFN_glTexImage3D)GalogenGetProcAddress("glTexImage3D");
   _glptr_glTexImage3D(target, level, internalformat, width, height, depth, border, format, type, pixels);
  CHECK_ERROR();
  _glptr_glTexImage3D = _impl_glTexImage3D;
}
PFN_glTexImage3D _glptr_glTexImage3D = _impl_glTexImage3D;

static void GL_APIENTRY _impl_glLighti (GLenum light, GLenum pname, GLint param) {
  printf("* glLighti\n");
  _glptr_glLighti = (PFN_glLighti)GalogenGetProcAddress("glLighti");
   _glptr_glLighti(light, pname, param);
  CHECK_ERROR();
  _glptr_glLighti = _impl_glLighti;
}
PFN_glLighti _glptr_glLighti = _impl_glLighti;

static void GL_APIENTRY _impl_glTexCoord4f (GLfloat s, GLfloat t, GLfloat r, GLfloat q) {
  printf("* glTexCoord4f\n");
  _glptr_glTexCoord4f = (PFN_glTexCoord4f)GalogenGetProcAddress("glTexCoord4f");
   _glptr_glTexCoord4f(s, t, r, q);
  CHECK_ERROR();
  _glptr_glTexCoord4f = _impl_glTexCoord4f;
}
PFN_glTexCoord4f _glptr_glTexCoord4f = _impl_glTexCoord4f;

static void GL_APIENTRY _impl_glLightf (GLenum light, GLenum pname, GLfloat param) {
  printf("* glLightf\n");
  _glptr_glLightf = (PFN_glLightf)GalogenGetProcAddress("glLightf");
   _glptr_glLightf(light, pname, param);
  CHECK_ERROR();
  _glptr_glLightf = _impl_glLightf;
}
PFN_glLightf _glptr_glLightf = _impl_glLightf;

static void GL_APIENTRY _impl_glFogCoordfv (const GLfloat * coord) {
  printf("* glFogCoordfv\n");
  _glptr_glFogCoordfv = (PFN_glFogCoordfv)GalogenGetProcAddress("glFogCoordfv");
   _glptr_glFogCoordfv(coord);
  CHECK_ERROR();
  _glptr_glFogCoordfv = _impl_glFogCoordfv;
}
PFN_glFogCoordfv _glptr_glFogCoordfv = _impl_glFogCoordfv;

static void GL_APIENTRY _impl_glFogiv (GLenum pname, const GLint * params) {
  printf("* glFogiv\n");
  _glptr_glFogiv = (PFN_glFogiv)GalogenGetProcAddress("glFogiv");
   _glptr_glFogiv(pname, params);
  CHECK_ERROR();
  _glptr_glFogiv = _impl_glFogiv;
}
PFN_glFogiv _glptr_glFogiv = _impl_glFogiv;

static void GL_APIENTRY _impl_glFogi (GLenum pname, GLint param) {
  printf("* glFogi\n");
  _glptr_glFogi = (PFN_glFogi)GalogenGetProcAddress("glFogi");
   _glptr_glFogi(pname, param);
  CHECK_ERROR();
  _glptr_glFogi = _impl_glFogi;
}
PFN_glFogi _glptr_glFogi = _impl_glFogi;

static void GL_APIENTRY _impl_glVertexAttrib4NsvARB (GLuint index, const GLshort * v) {
  printf("* glVertexAttrib4NsvARB\n");
  _glptr_glVertexAttrib4NsvARB = (PFN_glVertexAttrib4NsvARB)GalogenGetProcAddress("glVertexAttrib4NsvARB");
   _glptr_glVertexAttrib4NsvARB(index, v);
  CHECK_ERROR();
  _glptr_glVertexAttrib4NsvARB = _impl_glVertexAttrib4NsvARB;
}
PFN_glVertexAttrib4NsvARB _glptr_glVertexAttrib4NsvARB = _impl_glVertexAttrib4NsvARB;

static void GL_APIENTRY _impl_glUniformMatrix2x3fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) {
  printf("* glUniformMatrix2x3fv\n");
  _glptr_glUniformMatrix2x3fv = (PFN_glUniformMatrix2x3fv)GalogenGetProcAddress("glUniformMatrix2x3fv");
   _glptr_glUniformMatrix2x3fv(location, count, transpose, value);
  CHECK_ERROR();
  _glptr_glUniformMatrix2x3fv = _impl_glUniformMatrix2x3fv;
}
PFN_glUniformMatrix2x3fv _glptr_glUniformMatrix2x3fv = _impl_glUniformMatrix2x3fv;

static void GL_APIENTRY _impl_glVertexAttrib2dv (GLuint index, const GLdouble * v) {
  printf("* glVertexAttrib2dv\n");
  _glptr_glVertexAttrib2dv = (PFN_glVertexAttrib2dv)GalogenGetProcAddress("glVertexAttrib2dv");
   _glptr_glVertexAttrib2dv(index, v);
  CHECK_ERROR();
  _glptr_glVertexAttrib2dv = _impl_glVertexAttrib2dv;
}
PFN_glVertexAttrib2dv _glptr_glVertexAttrib2dv = _impl_glVertexAttrib2dv;

static void GL_APIENTRY _impl_glFogfv (GLenum pname, const GLfloat * params) {
  printf("* glFogfv\n");
  _glptr_glFogfv = (PFN_glFogfv)GalogenGetProcAddress("glFogfv");
   _glptr_glFogfv(pname, params);
  CHECK_ERROR();
  _glptr_glFogfv = _impl_glFogfv;
}
PFN_glFogfv _glptr_glFogfv = _impl_glFogfv;

static void GL_APIENTRY _impl_glGetCompressedTexImage (GLenum target, GLint level, void * img) {
  printf("* glGetCompressedTexImage\n");
  _glptr_glGetCompressedTexImage = (PFN_glGetCompressedTexImage)GalogenGetProcAddress("glGetCompressedTexImage");
   _glptr_glGetCompressedTexImage(target, level, img);
  CHECK_ERROR();
  _glptr_glGetCompressedTexImage = _impl_glGetCompressedTexImage;
}
PFN_glGetCompressedTexImage _glptr_glGetCompressedTexImage = _impl_glGetCompressedTexImage;

static void GL_APIENTRY _impl_glVertexAttrib4NuivARB (GLuint index, const GLuint * v) {
  printf("* glVertexAttrib4NuivARB\n");
  _glptr_glVertexAttrib4NuivARB = (PFN_glVertexAttrib4NuivARB)GalogenGetProcAddress("glVertexAttrib4NuivARB");
   _glptr_glVertexAttrib4NuivARB(index, v);
  CHECK_ERROR();
  _glptr_glVertexAttrib4NuivARB = _impl_glVertexAttrib4NuivARB;
}
PFN_glVertexAttrib4NuivARB _glptr_glVertexAttrib4NuivARB = _impl_glVertexAttrib4NuivARB;

static void GL_APIENTRY _impl_glPixelMapuiv (GLenum map, GLsizei mapsize, const GLuint * values) {
  printf("* glPixelMapuiv\n");
  _glptr_glPixelMapuiv = (PFN_glPixelMapuiv)GalogenGetProcAddress("glPixelMapuiv");
   _glptr_glPixelMapuiv(map, mapsize, values);
  CHECK_ERROR();
  _glptr_glPixelMapuiv = _impl_glPixelMapuiv;
}
PFN_glPixelMapuiv _glptr_glPixelMapuiv = _impl_glPixelMapuiv;

static void GL_APIENTRY _impl_glGetProgramEnvParameterfvARB (GLenum target, GLuint index, GLfloat * params) {
  printf("* glGetProgramEnvParameterfvARB\n");
  _glptr_glGetProgramEnvParameterfvARB = (PFN_glGetProgramEnvParameterfvARB)GalogenGetProcAddress("glGetProgramEnvParameterfvARB");
   _glptr_glGetProgramEnvParameterfvARB(target, index, params);
  CHECK_ERROR();
  _glptr_glGetProgramEnvParameterfvARB = _impl_glGetProgramEnvParameterfvARB;
}
PFN_glGetProgramEnvParameterfvARB _glptr_glGetProgramEnvParameterfvARB = _impl_glGetProgramEnvParameterfvARB;

static void GL_APIENTRY _impl_glVertex4iv (const GLint * v) {
  printf("* glVertex4iv\n");
  _glptr_glVertex4iv = (PFN_glVertex4iv)GalogenGetProcAddress("glVertex4iv");
   _glptr_glVertex4iv(v);
  CHECK_ERROR();
  _glptr_glVertex4iv = _impl_glVertex4iv;
}
PFN_glVertex4iv _glptr_glVertex4iv = _impl_glVertex4iv;

static void GL_APIENTRY _impl_glVertexAttrib4Nsv (GLuint index, const GLshort * v) {
  printf("* glVertexAttrib4Nsv\n");
  _glptr_glVertexAttrib4Nsv = (PFN_glVertexAttrib4Nsv)GalogenGetProcAddress("glVertexAttrib4Nsv");
   _glptr_glVertexAttrib4Nsv(index, v);
  CHECK_ERROR();
  _glptr_glVertexAttrib4Nsv = _impl_glVertexAttrib4Nsv;
}
PFN_glVertexAttrib4Nsv _glptr_glVertexAttrib4Nsv = _impl_glVertexAttrib4Nsv;

static void GL_APIENTRY _impl_glValidateProgram (GLuint program) {
  printf("* glValidateProgram\n");
  _glptr_glValidateProgram = (PFN_glValidateProgram)GalogenGetProcAddress("glValidateProgram");
   _glptr_glValidateProgram(program);
  CHECK_ERROR();
  _glptr_glValidateProgram = _impl_glValidateProgram;
}
PFN_glValidateProgram _glptr_glValidateProgram = _impl_glValidateProgram;

static void GL_APIENTRY _impl_glGetTexImage (GLenum target, GLint level, GLenum format, GLenum type, void * pixels) {
  printf("* glGetTexImage\n");
  _glptr_glGetTexImage = (PFN_glGetTexImage)GalogenGetProcAddress("glGetTexImage");
   _glptr_glGetTexImage(target, level, format, type, pixels);
  CHECK_ERROR();
  _glptr_glGetTexImage = _impl_glGetTexImage;
}
PFN_glGetTexImage _glptr_glGetTexImage = _impl_glGetTexImage;

static void GL_APIENTRY _impl_glPushMatrix () {
  printf("* glPushMatrix\n");
  _glptr_glPushMatrix = (PFN_glPushMatrix)GalogenGetProcAddress("glPushMatrix");
   _glptr_glPushMatrix();
  CHECK_ERROR();
  _glptr_glPushMatrix = _impl_glPushMatrix;
}
PFN_glPushMatrix _glptr_glPushMatrix = _impl_glPushMatrix;

static void GL_APIENTRY _impl_glVertex4i (GLint x, GLint y, GLint z, GLint w) {
  printf("* glVertex4i\n");
  _glptr_glVertex4i = (PFN_glVertex4i)GalogenGetProcAddress("glVertex4i");
   _glptr_glVertex4i(x, y, z, w);
  CHECK_ERROR();
  _glptr_glVertex4i = _impl_glVertex4i;
}
PFN_glVertex4i _glptr_glVertex4i = _impl_glVertex4i;

static void GL_APIENTRY _impl_glTexParameteriv (GLenum target, GLenum pname, const GLint * params) {
  printf("* glTexParameteriv\n");
  _glptr_glTexParameteriv = (PFN_glTexParameteriv)GalogenGetProcAddress("glTexParameteriv");
   _glptr_glTexParameteriv(target, pname, params);
  CHECK_ERROR();
  _glptr_glTexParameteriv = _impl_glTexParameteriv;
}
PFN_glTexParameteriv _glptr_glTexParameteriv = _impl_glTexParameteriv;

static void GL_APIENTRY _impl_glVertex4fv (const GLfloat * v) {
  printf("* glVertex4fv\n");
  _glptr_glVertex4fv = (PFN_glVertex4fv)GalogenGetProcAddress("glVertex4fv");
   _glptr_glVertex4fv(v);
  CHECK_ERROR();
  _glptr_glVertex4fv = _impl_glVertex4fv;
}
PFN_glVertex4fv _glptr_glVertex4fv = _impl_glVertex4fv;

static void GL_APIENTRY _impl_glLightfv (GLenum light, GLenum pname, const GLfloat * params) {
  printf("* glLightfv\n");
  _glptr_glLightfv = (PFN_glLightfv)GalogenGetProcAddress("glLightfv");
   _glptr_glLightfv(light, pname, params);
  CHECK_ERROR();
  _glptr_glLightfv = _impl_glLightfv;
}
PFN_glLightfv _glptr_glLightfv = _impl_glLightfv;

static void GL_APIENTRY _impl_glLoadTransposeMatrixf (const GLfloat * m) {
  printf("* glLoadTransposeMatrixf\n");
  _glptr_glLoadTransposeMatrixf = (PFN_glLoadTransposeMatrixf)GalogenGetProcAddress("glLoadTransposeMatrixf");
   _glptr_glLoadTransposeMatrixf(m);
  CHECK_ERROR();
  _glptr_glLoadTransposeMatrixf = _impl_glLoadTransposeMatrixf;
}
PFN_glLoadTransposeMatrixf _glptr_glLoadTransposeMatrixf = _impl_glLoadTransposeMatrixf;

static void GL_APIENTRY _impl_glFramebufferTexture2DEXT (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level) {
  printf("* glFramebufferTexture2DEXT\n");
  _glptr_glFramebufferTexture2DEXT = (PFN_glFramebufferTexture2DEXT)GalogenGetProcAddress("glFramebufferTexture2DEXT");
   _glptr_glFramebufferTexture2DEXT(target, attachment, textarget, texture, level);
  CHECK_ERROR();
  _glptr_glFramebufferTexture2DEXT = _impl_glFramebufferTexture2DEXT;
}
PFN_glFramebufferTexture2DEXT _glptr_glFramebufferTexture2DEXT = _impl_glFramebufferTexture2DEXT;

static void GL_APIENTRY _impl_glDeleteFramebuffersEXT (GLsizei n, const GLuint * framebuffers) {
  printf("* glDeleteFramebuffersEXT\n");
  _glptr_glDeleteFramebuffersEXT = (PFN_glDeleteFramebuffersEXT)GalogenGetProcAddress("glDeleteFramebuffersEXT");
   _glptr_glDeleteFramebuffersEXT(n, framebuffers);
  CHECK_ERROR();
  _glptr_glDeleteFramebuffersEXT = _impl_glDeleteFramebuffersEXT;
}
PFN_glDeleteFramebuffersEXT _glptr_glDeleteFramebuffersEXT = _impl_glDeleteFramebuffersEXT;

static void GL_APIENTRY _impl_glVertex4d (GLdouble x, GLdouble y, GLdouble z, GLdouble w) {
  printf("* glVertex4d\n");
  _glptr_glVertex4d = (PFN_glVertex4d)GalogenGetProcAddress("glVertex4d");
   _glptr_glVertex4d(x, y, z, w);
  CHECK_ERROR();
  _glptr_glVertex4d = _impl_glVertex4d;
}
PFN_glVertex4d _glptr_glVertex4d = _impl_glVertex4d;

static void GL_APIENTRY _impl_glVertexAttrib3s (GLuint index, GLshort x, GLshort y, GLshort z) {
  printf("* glVertexAttrib3s\n");
  _glptr_glVertexAttrib3s = (PFN_glVertexAttrib3s)GalogenGetProcAddress("glVertexAttrib3s");
   _glptr_glVertexAttrib3s(index, x, y, z);
  CHECK_ERROR();
  _glptr_glVertexAttrib3s = _impl_glVertexAttrib3s;
}
PFN_glVertexAttrib3s _glptr_glVertexAttrib3s = _impl_glVertexAttrib3s;

static void GL_APIENTRY _impl_glVertex3fv (const GLfloat * v) {
  printf("* glVertex3fv\n");
  _glptr_glVertex3fv = (PFN_glVertex3fv)GalogenGetProcAddress("glVertex3fv");
   _glptr_glVertex3fv(v);
  CHECK_ERROR();
  _glptr_glVertex3fv = _impl_glVertex3fv;
}
PFN_glVertex3fv _glptr_glVertex3fv = _impl_glVertex3fv;

static void GL_APIENTRY _impl_glMap1d (GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble * points) {
  printf("* glMap1d\n");
  _glptr_glMap1d = (PFN_glMap1d)GalogenGetProcAddress("glMap1d");
   _glptr_glMap1d(target, u1, u2, stride, order, points);
  CHECK_ERROR();
  _glptr_glMap1d = _impl_glMap1d;
}
PFN_glMap1d _glptr_glMap1d = _impl_glMap1d;

static void GL_APIENTRY _impl_glCallLists (GLsizei n, GLenum type, const void * lists) {
  printf("* glCallLists\n");
  _glptr_glCallLists = (PFN_glCallLists)GalogenGetProcAddress("glCallLists");
   _glptr_glCallLists(n, type, lists);
  CHECK_ERROR();
  _glptr_glCallLists = _impl_glCallLists;
}
PFN_glCallLists _glptr_glCallLists = _impl_glCallLists;

static void GL_APIENTRY _impl_glIndexfv (const GLfloat * c) {
  printf("* glIndexfv\n");
  _glptr_glIndexfv = (PFN_glIndexfv)GalogenGetProcAddress("glIndexfv");
   _glptr_glIndexfv(c);
  CHECK_ERROR();
  _glptr_glIndexfv = _impl_glIndexfv;
}
PFN_glIndexfv _glptr_glIndexfv = _impl_glIndexfv;

static void GL_APIENTRY _impl_glVertex3dv (const GLdouble * v) {
  printf("* glVertex3dv\n");
  _glptr_glVertex3dv = (PFN_glVertex3dv)GalogenGetProcAddress("glVertex3dv");
   _glptr_glVertex3dv(v);
  CHECK_ERROR();
  _glptr_glVertex3dv = _impl_glVertex3dv;
}
PFN_glVertex3dv _glptr_glVertex3dv = _impl_glVertex3dv;

static void GL_APIENTRY _impl_glVertex2iv (const GLint * v) {
  printf("* glVertex2iv\n");
  _glptr_glVertex2iv = (PFN_glVertex2iv)GalogenGetProcAddress("glVertex2iv");
   _glptr_glVertex2iv(v);
  CHECK_ERROR();
  _glptr_glVertex2iv = _impl_glVertex2iv;
}
PFN_glVertex2iv _glptr_glVertex2iv = _impl_glVertex2iv;

static void GL_APIENTRY _impl_glNormal3fv (const GLfloat * v) {
  printf("* glNormal3fv\n");
  _glptr_glNormal3fv = (PFN_glNormal3fv)GalogenGetProcAddress("glNormal3fv");
   _glptr_glNormal3fv(v);
  CHECK_ERROR();
  _glptr_glNormal3fv = _impl_glNormal3fv;
}
PFN_glNormal3fv _glptr_glNormal3fv = _impl_glNormal3fv;

static void GL_APIENTRY _impl_glEnableVertexAttribArray (GLuint index) {
  printf("* glEnableVertexAttribArray\n");
  _glptr_glEnableVertexAttribArray = (PFN_glEnableVertexAttribArray)GalogenGetProcAddress("glEnableVertexAttribArray");
   _glptr_glEnableVertexAttribArray(index);
  CHECK_ERROR();
  _glptr_glEnableVertexAttribArray = _impl_glEnableVertexAttribArray;
}
PFN_glEnableVertexAttribArray _glptr_glEnableVertexAttribArray = _impl_glEnableVertexAttribArray;

static void GL_APIENTRY _impl_glTexCoord4sv (const GLshort * v) {
  printf("* glTexCoord4sv\n");
  _glptr_glTexCoord4sv = (PFN_glTexCoord4sv)GalogenGetProcAddress("glTexCoord4sv");
   _glptr_glTexCoord4sv(v);
  CHECK_ERROR();
  _glptr_glTexCoord4sv = _impl_glTexCoord4sv;
}
PFN_glTexCoord4sv _glptr_glTexCoord4sv = _impl_glTexCoord4sv;

static void GL_APIENTRY _impl_glPixelMapfv (GLenum map, GLsizei mapsize, const GLfloat * values) {
  printf("* glPixelMapfv\n");
  _glptr_glPixelMapfv = (PFN_glPixelMapfv)GalogenGetProcAddress("glPixelMapfv");
   _glptr_glPixelMapfv(map, mapsize, values);
  CHECK_ERROR();
  _glptr_glPixelMapfv = _impl_glPixelMapfv;
}
PFN_glPixelMapfv _glptr_glPixelMapfv = _impl_glPixelMapfv;

static void GL_APIENTRY _impl_glEvalCoord2fv (const GLfloat * u) {
  printf("* glEvalCoord2fv\n");
  _glptr_glEvalCoord2fv = (PFN_glEvalCoord2fv)GalogenGetProcAddress("glEvalCoord2fv");
   _glptr_glEvalCoord2fv(u);
  CHECK_ERROR();
  _glptr_glEvalCoord2fv = _impl_glEvalCoord2fv;
}
PFN_glEvalCoord2fv _glptr_glEvalCoord2fv = _impl_glEvalCoord2fv;

static void GL_APIENTRY _impl_glColor4us (GLushort red, GLushort green, GLushort blue, GLushort alpha) {
  printf("* glColor4us\n");
  _glptr_glColor4us = (PFN_glColor4us)GalogenGetProcAddress("glColor4us");
   _glptr_glColor4us(red, green, blue, alpha);
  CHECK_ERROR();
  _glptr_glColor4us = _impl_glColor4us;
}
PFN_glColor4us _glptr_glColor4us = _impl_glColor4us;

static void GL_APIENTRY _impl_glTexCoord3iv (const GLint * v) {
  printf("* glTexCoord3iv\n");
  _glptr_glTexCoord3iv = (PFN_glTexCoord3iv)GalogenGetProcAddress("glTexCoord3iv");
   _glptr_glTexCoord3iv(v);
  CHECK_ERROR();
  _glptr_glTexCoord3iv = _impl_glTexCoord3iv;
}
PFN_glTexCoord3iv _glptr_glTexCoord3iv = _impl_glTexCoord3iv;

static void GL_APIENTRY _impl_glRasterPos2f (GLfloat x, GLfloat y) {
  printf("* glRasterPos2f\n");
  _glptr_glRasterPos2f = (PFN_glRasterPos2f)GalogenGetProcAddress("glRasterPos2f");
   _glptr_glRasterPos2f(x, y);
  CHECK_ERROR();
  _glptr_glRasterPos2f = _impl_glRasterPos2f;
}
PFN_glRasterPos2f _glptr_glRasterPos2f = _impl_glRasterPos2f;

static void GL_APIENTRY _impl_glTexCoord3i (GLint s, GLint t, GLint r) {
  printf("* glTexCoord3i\n");
  _glptr_glTexCoord3i = (PFN_glTexCoord3i)GalogenGetProcAddress("glTexCoord3i");
   _glptr_glTexCoord3i(s, t, r);
  CHECK_ERROR();
  _glptr_glTexCoord3i = _impl_glTexCoord3i;
}
PFN_glTexCoord3i _glptr_glTexCoord3i = _impl_glTexCoord3i;

static void GL_APIENTRY _impl_glRasterPos4f (GLfloat x, GLfloat y, GLfloat z, GLfloat w) {
  printf("* glRasterPos4f\n");
  _glptr_glRasterPos4f = (PFN_glRasterPos4f)GalogenGetProcAddress("glRasterPos4f");
   _glptr_glRasterPos4f(x, y, z, w);
  CHECK_ERROR();
  _glptr_glRasterPos4f = _impl_glRasterPos4f;
}
PFN_glRasterPos4f _glptr_glRasterPos4f = _impl_glRasterPos4f;

static void GL_APIENTRY _impl_glRasterPos3i (GLint x, GLint y, GLint z) {
  printf("* glRasterPos3i\n");
  _glptr_glRasterPos3i = (PFN_glRasterPos3i)GalogenGetProcAddress("glRasterPos3i");
   _glptr_glRasterPos3i(x, y, z);
  CHECK_ERROR();
  _glptr_glRasterPos3i = _impl_glRasterPos3i;
}
PFN_glRasterPos3i _glptr_glRasterPos3i = _impl_glRasterPos3i;

static GLenum GL_APIENTRY _impl_glCheckFramebufferStatus (GLenum target) {
  printf("* glCheckFramebufferStatus\n");
  _glptr_glCheckFramebufferStatus = (PFN_glCheckFramebufferStatus)GalogenGetProcAddress("glCheckFramebufferStatus");
  return _glptr_glCheckFramebufferStatus(target);
  CHECK_ERROR();
  _glptr_glCheckFramebufferStatus = _impl_glCheckFramebufferStatus;
}
PFN_glCheckFramebufferStatus _glptr_glCheckFramebufferStatus = _impl_glCheckFramebufferStatus;

static void GL_APIENTRY _impl_glTexCoord3f (GLfloat s, GLfloat t, GLfloat r) {
  printf("* glTexCoord3f\n");
  _glptr_glTexCoord3f = (PFN_glTexCoord3f)GalogenGetProcAddress("glTexCoord3f");
   _glptr_glTexCoord3f(s, t, r);
  CHECK_ERROR();
  _glptr_glTexCoord3f = _impl_glTexCoord3f;
}
PFN_glTexCoord3f _glptr_glTexCoord3f = _impl_glTexCoord3f;

static void GL_APIENTRY _impl_glRasterPos2s (GLshort x, GLshort y) {
  printf("* glRasterPos2s\n");
  _glptr_glRasterPos2s = (PFN_glRasterPos2s)GalogenGetProcAddress("glRasterPos2s");
   _glptr_glRasterPos2s(x, y);
  CHECK_ERROR();
  _glptr_glRasterPos2s = _impl_glRasterPos2s;
}
PFN_glRasterPos2s _glptr_glRasterPos2s = _impl_glRasterPos2s;

static void GL_APIENTRY _impl_glTexCoord3dv (const GLdouble * v) {
  printf("* glTexCoord3dv\n");
  _glptr_glTexCoord3dv = (PFN_glTexCoord3dv)GalogenGetProcAddress("glTexCoord3dv");
   _glptr_glTexCoord3dv(v);
  CHECK_ERROR();
  _glptr_glTexCoord3dv = _impl_glTexCoord3dv;
}
PFN_glTexCoord3dv _glptr_glTexCoord3dv = _impl_glTexCoord3dv;

static void GL_APIENTRY _impl_glTexGend (GLenum coord, GLenum pname, GLdouble param) {
  printf("* glTexGend\n");
  _glptr_glTexGend = (PFN_glTexGend)GalogenGetProcAddress("glTexGend");
   _glptr_glTexGend(coord, pname, param);
  CHECK_ERROR();
  _glptr_glTexGend = _impl_glTexGend;
}
PFN_glTexGend _glptr_glTexGend = _impl_glTexGend;

static void GL_APIENTRY _impl_glIndexd (GLdouble c) {
  printf("* glIndexd\n");
  _glptr_glIndexd = (PFN_glIndexd)GalogenGetProcAddress("glIndexd");
   _glptr_glIndexd(c);
  CHECK_ERROR();
  _glptr_glIndexd = _impl_glIndexd;
}
PFN_glIndexd _glptr_glIndexd = _impl_glIndexd;

static void GL_APIENTRY _impl_glSecondaryColor3dv (const GLdouble * v) {
  printf("* glSecondaryColor3dv\n");
  _glptr_glSecondaryColor3dv = (PFN_glSecondaryColor3dv)GalogenGetProcAddress("glSecondaryColor3dv");
   _glptr_glSecondaryColor3dv(v);
  CHECK_ERROR();
  _glptr_glSecondaryColor3dv = _impl_glSecondaryColor3dv;
}
PFN_glSecondaryColor3dv _glptr_glSecondaryColor3dv = _impl_glSecondaryColor3dv;

static void GL_APIENTRY _impl_glDrawBuffer (GLenum buf) {
  printf("* glDrawBuffer\n");
  _glptr_glDrawBuffer = (PFN_glDrawBuffer)GalogenGetProcAddress("glDrawBuffer");
   _glptr_glDrawBuffer(buf);
  CHECK_ERROR();
  _glptr_glDrawBuffer = _impl_glDrawBuffer;
}
PFN_glDrawBuffer _glptr_glDrawBuffer = _impl_glDrawBuffer;

static void GL_APIENTRY _impl_glReadPixels (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void * pixels) {
  printf("* glReadPixels\n");
  _glptr_glReadPixels = (PFN_glReadPixels)GalogenGetProcAddress("glReadPixels");
   _glptr_glReadPixels(x, y, width, height, format, type, pixels);
  CHECK_ERROR();
  _glptr_glReadPixels = _impl_glReadPixels;
}
PFN_glReadPixels _glptr_glReadPixels = _impl_glReadPixels;

static void GL_APIENTRY _impl_glTexCoord3d (GLdouble s, GLdouble t, GLdouble r) {
  printf("* glTexCoord3d\n");
  _glptr_glTexCoord3d = (PFN_glTexCoord3d)GalogenGetProcAddress("glTexCoord3d");
   _glptr_glTexCoord3d(s, t, r);
  CHECK_ERROR();
  _glptr_glTexCoord3d = _impl_glTexCoord3d;
}
PFN_glTexCoord3d _glptr_glTexCoord3d = _impl_glTexCoord3d;

static void GL_APIENTRY _impl_glMultiTexCoord2d (GLenum target, GLdouble s, GLdouble t) {
  printf("* glMultiTexCoord2d\n");
  _glptr_glMultiTexCoord2d = (PFN_glMultiTexCoord2d)GalogenGetProcAddress("glMultiTexCoord2d");
   _glptr_glMultiTexCoord2d(target, s, t);
  CHECK_ERROR();
  _glptr_glMultiTexCoord2d = _impl_glMultiTexCoord2d;
}
PFN_glMultiTexCoord2d _glptr_glMultiTexCoord2d = _impl_glMultiTexCoord2d;

static void GL_APIENTRY _impl_glTexCoord2iv (const GLint * v) {
  printf("* glTexCoord2iv\n");
  _glptr_glTexCoord2iv = (PFN_glTexCoord2iv)GalogenGetProcAddress("glTexCoord2iv");
   _glptr_glTexCoord2iv(v);
  CHECK_ERROR();
  _glptr_glTexCoord2iv = _impl_glTexCoord2iv;
}
PFN_glTexCoord2iv _glptr_glTexCoord2iv = _impl_glTexCoord2iv;

static void GL_APIENTRY _impl_glVertex2fv (const GLfloat * v) {
  printf("* glVertex2fv\n");
  _glptr_glVertex2fv = (PFN_glVertex2fv)GalogenGetProcAddress("glVertex2fv");
   _glptr_glVertex2fv(v);
  CHECK_ERROR();
  _glptr_glVertex2fv = _impl_glVertex2fv;
}
PFN_glVertex2fv _glptr_glVertex2fv = _impl_glVertex2fv;

static void GL_APIENTRY _impl_glDepthMask (GLboolean flag) {
  printf("* glDepthMask\n");
  _glptr_glDepthMask = (PFN_glDepthMask)GalogenGetProcAddress("glDepthMask");
   _glptr_glDepthMask(flag);
  CHECK_ERROR();
  _glptr_glDepthMask = _impl_glDepthMask;
}
PFN_glDepthMask _glptr_glDepthMask = _impl_glDepthMask;

static void GL_APIENTRY _impl_glRasterPos2dv (const GLdouble * v) {
  printf("* glRasterPos2dv\n");
  _glptr_glRasterPos2dv = (PFN_glRasterPos2dv)GalogenGetProcAddress("glRasterPos2dv");
   _glptr_glRasterPos2dv(v);
  CHECK_ERROR();
  _glptr_glRasterPos2dv = _impl_glRasterPos2dv;
}
PFN_glRasterPos2dv _glptr_glRasterPos2dv = _impl_glRasterPos2dv;

static void GL_APIENTRY _impl_glTexCoord2fv (const GLfloat * v) {
  printf("* glTexCoord2fv\n");
  _glptr_glTexCoord2fv = (PFN_glTexCoord2fv)GalogenGetProcAddress("glTexCoord2fv");
   _glptr_glTexCoord2fv(v);
  CHECK_ERROR();
  _glptr_glTexCoord2fv = _impl_glTexCoord2fv;
}
PFN_glTexCoord2fv _glptr_glTexCoord2fv = _impl_glTexCoord2fv;

static void GL_APIENTRY _impl_glColor4dv (const GLdouble * v) {
  printf("* glColor4dv\n");
  _glptr_glColor4dv = (PFN_glColor4dv)GalogenGetProcAddress("glColor4dv");
   _glptr_glColor4dv(v);
  CHECK_ERROR();
  _glptr_glColor4dv = _impl_glColor4dv;
}
PFN_glColor4dv _glptr_glColor4dv = _impl_glColor4dv;

static void GL_APIENTRY _impl_glWindowPos2dv (const GLdouble * v) {
  printf("* glWindowPos2dv\n");
  _glptr_glWindowPos2dv = (PFN_glWindowPos2dv)GalogenGetProcAddress("glWindowPos2dv");
   _glptr_glWindowPos2dv(v);
  CHECK_ERROR();
  _glptr_glWindowPos2dv = _impl_glWindowPos2dv;
}
PFN_glWindowPos2dv _glptr_glWindowPos2dv = _impl_glWindowPos2dv;

static void GL_APIENTRY _impl_glTexImage1D (GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void * pixels) {
  printf("* glTexImage1D\n");
  _glptr_glTexImage1D = (PFN_glTexImage1D)GalogenGetProcAddress("glTexImage1D");
   _glptr_glTexImage1D(target, level, internalformat, width, border, format, type, pixels);
  CHECK_ERROR();
  _glptr_glTexImage1D = _impl_glTexImage1D;
}
PFN_glTexImage1D _glptr_glTexImage1D = _impl_glTexImage1D;

static void GL_APIENTRY _impl_glTexCoord2f (GLfloat s, GLfloat t) {
  printf("* glTexCoord2f\n");
  _glptr_glTexCoord2f = (PFN_glTexCoord2f)GalogenGetProcAddress("glTexCoord2f");
   _glptr_glTexCoord2f(s, t);
  CHECK_ERROR();
  _glptr_glTexCoord2f = _impl_glTexCoord2f;
}
PFN_glTexCoord2f _glptr_glTexCoord2f = _impl_glTexCoord2f;

static void GL_APIENTRY _impl_glPointParameterf (GLenum pname, GLfloat param) {
  printf("* glPointParameterf\n");
  _glptr_glPointParameterf = (PFN_glPointParameterf)GalogenGetProcAddress("glPointParameterf");
   _glptr_glPointParameterf(pname, param);
  CHECK_ERROR();
  _glptr_glPointParameterf = _impl_glPointParameterf;
}
PFN_glPointParameterf _glptr_glPointParameterf = _impl_glPointParameterf;

static void GL_APIENTRY _impl_glVertexAttrib2svARB (GLuint index, const GLshort * v) {
  printf("* glVertexAttrib2svARB\n");
  _glptr_glVertexAttrib2svARB = (PFN_glVertexAttrib2svARB)GalogenGetProcAddress("glVertexAttrib2svARB");
   _glptr_glVertexAttrib2svARB(index, v);
  CHECK_ERROR();
  _glptr_glVertexAttrib2svARB = _impl_glVertexAttrib2svARB;
}
PFN_glVertexAttrib2svARB _glptr_glVertexAttrib2svARB = _impl_glVertexAttrib2svARB;

static GLint GL_APIENTRY _impl_glGetUniformLocation (GLuint program, const GLchar * name) {
  printf("* glGetUniformLocation\n");
  _glptr_glGetUniformLocation = (PFN_glGetUniformLocation)GalogenGetProcAddress("glGetUniformLocation");
  return _glptr_glGetUniformLocation(program, name);
  CHECK_ERROR();
  _glptr_glGetUniformLocation = _impl_glGetUniformLocation;
}
PFN_glGetUniformLocation _glptr_glGetUniformLocation = _impl_glGetUniformLocation;

static void GL_APIENTRY _impl_glTexCoord2dv (const GLdouble * v) {
  printf("* glTexCoord2dv\n");
  _glptr_glTexCoord2dv = (PFN_glTexCoord2dv)GalogenGetProcAddress("glTexCoord2dv");
   _glptr_glTexCoord2dv(v);
  CHECK_ERROR();
  _glptr_glTexCoord2dv = _impl_glTexCoord2dv;
}
PFN_glTexCoord2dv _glptr_glTexCoord2dv = _impl_glTexCoord2dv;

static void GL_APIENTRY _impl_glNormal3f (GLfloat nx, GLfloat ny, GLfloat nz) {
  printf("* glNormal3f\n");
  _glptr_glNormal3f = (PFN_glNormal3f)GalogenGetProcAddress("glNormal3f");
   _glptr_glNormal3f(nx, ny, nz);
  CHECK_ERROR();
  _glptr_glNormal3f = _impl_glNormal3f;
}
PFN_glNormal3f _glptr_glNormal3f = _impl_glNormal3f;

static void GL_APIENTRY _impl_glTexCoord2d (GLdouble s, GLdouble t) {
  printf("* glTexCoord2d\n");
  _glptr_glTexCoord2d = (PFN_glTexCoord2d)GalogenGetProcAddress("glTexCoord2d");
   _glptr_glTexCoord2d(s, t);
  CHECK_ERROR();
  _glptr_glTexCoord2d = _impl_glTexCoord2d;
}
PFN_glTexCoord2d _glptr_glTexCoord2d = _impl_glTexCoord2d;

static void GL_APIENTRY _impl_glRasterPos2iv (const GLint * v) {
  printf("* glRasterPos2iv\n");
  _glptr_glRasterPos2iv = (PFN_glRasterPos2iv)GalogenGetProcAddress("glRasterPos2iv");
   _glptr_glRasterPos2iv(v);
  CHECK_ERROR();
  _glptr_glRasterPos2iv = _impl_glRasterPos2iv;
}
PFN_glRasterPos2iv _glptr_glRasterPos2iv = _impl_glRasterPos2iv;

static void GL_APIENTRY _impl_glUniformMatrix3fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) {
  printf("* glUniformMatrix3fv\n");
  _glptr_glUniformMatrix3fv = (PFN_glUniformMatrix3fv)GalogenGetProcAddress("glUniformMatrix3fv");
   _glptr_glUniformMatrix3fv(location, count, transpose, value);
  CHECK_ERROR();
  _glptr_glUniformMatrix3fv = _impl_glUniformMatrix3fv;
}
PFN_glUniformMatrix3fv _glptr_glUniformMatrix3fv = _impl_glUniformMatrix3fv;

static void GL_APIENTRY _impl_glColor3d (GLdouble red, GLdouble green, GLdouble blue) {
  printf("* glColor3d\n");
  _glptr_glColor3d = (PFN_glColor3d)GalogenGetProcAddress("glColor3d");
   _glptr_glColor3d(red, green, blue);
  CHECK_ERROR();
  _glptr_glColor3d = _impl_glColor3d;
}
PFN_glColor3d _glptr_glColor3d = _impl_glColor3d;

static void GL_APIENTRY _impl_glTexCoord1sv (const GLshort * v) {
  printf("* glTexCoord1sv\n");
  _glptr_glTexCoord1sv = (PFN_glTexCoord1sv)GalogenGetProcAddress("glTexCoord1sv");
   _glptr_glTexCoord1sv(v);
  CHECK_ERROR();
  _glptr_glTexCoord1sv = _impl_glTexCoord1sv;
}
PFN_glTexCoord1sv _glptr_glTexCoord1sv = _impl_glTexCoord1sv;

static void GL_APIENTRY _impl_glTexCoord1s (GLshort s) {
  printf("* glTexCoord1s\n");
  _glptr_glTexCoord1s = (PFN_glTexCoord1s)GalogenGetProcAddress("glTexCoord1s");
   _glptr_glTexCoord1s(s);
  CHECK_ERROR();
  _glptr_glTexCoord1s = _impl_glTexCoord1s;
}
PFN_glTexCoord1s _glptr_glTexCoord1s = _impl_glTexCoord1s;

static void GL_APIENTRY _impl_glNormal3d (GLdouble nx, GLdouble ny, GLdouble nz) {
  printf("* glNormal3d\n");
  _glptr_glNormal3d = (PFN_glNormal3d)GalogenGetProcAddress("glNormal3d");
   _glptr_glNormal3d(nx, ny, nz);
  CHECK_ERROR();
  _glptr_glNormal3d = _impl_glNormal3d;
}
PFN_glNormal3d _glptr_glNormal3d = _impl_glNormal3d;

static GLboolean GL_APIENTRY _impl_glIsTexture (GLuint texture) {
  printf("* glIsTexture\n");
  _glptr_glIsTexture = (PFN_glIsTexture)GalogenGetProcAddress("glIsTexture");
  return _glptr_glIsTexture(texture);
  CHECK_ERROR();
  _glptr_glIsTexture = _impl_glIsTexture;
}
PFN_glIsTexture _glptr_glIsTexture = _impl_glIsTexture;

static void GL_APIENTRY _impl_glLinkProgram (GLuint program) {
  printf("* glLinkProgram\n");
  _glptr_glLinkProgram = (PFN_glLinkProgram)GalogenGetProcAddress("glLinkProgram");
   _glptr_glLinkProgram(program);
  CHECK_ERROR();
  _glptr_glLinkProgram = _impl_glLinkProgram;
}
PFN_glLinkProgram _glptr_glLinkProgram = _impl_glLinkProgram;

static void GL_APIENTRY _impl_glEvalCoord1dv (const GLdouble * u) {
  printf("* glEvalCoord1dv\n");
  _glptr_glEvalCoord1dv = (PFN_glEvalCoord1dv)GalogenGetProcAddress("glEvalCoord1dv");
   _glptr_glEvalCoord1dv(u);
  CHECK_ERROR();
  _glptr_glEvalCoord1dv = _impl_glEvalCoord1dv;
}
PFN_glEvalCoord1dv _glptr_glEvalCoord1dv = _impl_glEvalCoord1dv;

static void GL_APIENTRY _impl_glDeleteRenderbuffers (GLsizei n, const GLuint * renderbuffers) {
  printf("* glDeleteRenderbuffers\n");
  _glptr_glDeleteRenderbuffers = (PFN_glDeleteRenderbuffers)GalogenGetProcAddress("glDeleteRenderbuffers");
   _glptr_glDeleteRenderbuffers(n, renderbuffers);
  CHECK_ERROR();
  _glptr_glDeleteRenderbuffers = _impl_glDeleteRenderbuffers;
}
PFN_glDeleteRenderbuffers _glptr_glDeleteRenderbuffers = _impl_glDeleteRenderbuffers;

static void GL_APIENTRY _impl_glDeleteTextures (GLsizei n, const GLuint * textures) {
  printf("* glDeleteTextures\n");
  _glptr_glDeleteTextures = (PFN_glDeleteTextures)GalogenGetProcAddress("glDeleteTextures");
   _glptr_glDeleteTextures(n, textures);
  CHECK_ERROR();
  _glptr_glDeleteTextures = _impl_glDeleteTextures;
}
PFN_glDeleteTextures _glptr_glDeleteTextures = _impl_glDeleteTextures;

static void GL_APIENTRY _impl_glSelectBuffer (GLsizei size, GLuint * buffer) {
  printf("* glSelectBuffer\n");
  _glptr_glSelectBuffer = (PFN_glSelectBuffer)GalogenGetProcAddress("glSelectBuffer");
   _glptr_glSelectBuffer(size, buffer);
  CHECK_ERROR();
  _glptr_glSelectBuffer = _impl_glSelectBuffer;
}
PFN_glSelectBuffer _glptr_glSelectBuffer = _impl_glSelectBuffer;

static void GL_APIENTRY _impl_glBufferSubData (GLenum target, GLintptr offset, GLsizeiptr size, const void * data) {
  printf("* glBufferSubData\n");
  _glptr_glBufferSubData = (PFN_glBufferSubData)GalogenGetProcAddress("glBufferSubData");
   _glptr_glBufferSubData(target, offset, size, data);
  CHECK_ERROR();
  _glptr_glBufferSubData = _impl_glBufferSubData;
}
PFN_glBufferSubData _glptr_glBufferSubData = _impl_glBufferSubData;

static void GL_APIENTRY _impl_glArrayElement (GLint i) {
  printf("* glArrayElement\n");
  _glptr_glArrayElement = (PFN_glArrayElement)GalogenGetProcAddress("glArrayElement");
   _glptr_glArrayElement(i);
  CHECK_ERROR();
  _glptr_glArrayElement = _impl_glArrayElement;
}
PFN_glArrayElement _glptr_glArrayElement = _impl_glArrayElement;

static void GL_APIENTRY _impl_glFogf (GLenum pname, GLfloat param) {
  printf("* glFogf\n");
  _glptr_glFogf = (PFN_glFogf)GalogenGetProcAddress("glFogf");
   _glptr_glFogf(pname, param);
  CHECK_ERROR();
  _glptr_glFogf = _impl_glFogf;
}
PFN_glFogf _glptr_glFogf = _impl_glFogf;

static void GL_APIENTRY _impl_glColorMask (GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha) {
  printf("* glColorMask\n");
  _glptr_glColorMask = (PFN_glColorMask)GalogenGetProcAddress("glColorMask");
   _glptr_glColorMask(red, green, blue, alpha);
  CHECK_ERROR();
  _glptr_glColorMask = _impl_glColorMask;
}
PFN_glColorMask _glptr_glColorMask = _impl_glColorMask;

static void GL_APIENTRY _impl_glRasterPos4dv (const GLdouble * v) {
  printf("* glRasterPos4dv\n");
  _glptr_glRasterPos4dv = (PFN_glRasterPos4dv)GalogenGetProcAddress("glRasterPos4dv");
   _glptr_glRasterPos4dv(v);
  CHECK_ERROR();
  _glptr_glRasterPos4dv = _impl_glRasterPos4dv;
}
PFN_glRasterPos4dv _glptr_glRasterPos4dv = _impl_glRasterPos4dv;

static void GL_APIENTRY _impl_glShaderSource (GLuint shader, GLsizei count, const GLchar *const* string, const GLint * length) {
  printf("* glShaderSource\n");
  _glptr_glShaderSource = (PFN_glShaderSource)GalogenGetProcAddress("glShaderSource");
   _glptr_glShaderSource(shader, count, string, length);
  CHECK_ERROR();
  _glptr_glShaderSource = _impl_glShaderSource;
}
PFN_glShaderSource _glptr_glShaderSource = _impl_glShaderSource;

static void GL_APIENTRY _impl_glTexCoord1i (GLint s) {
  printf("* glTexCoord1i\n");
  _glptr_glTexCoord1i = (PFN_glTexCoord1i)GalogenGetProcAddress("glTexCoord1i");
   _glptr_glTexCoord1i(s);
  CHECK_ERROR();
  _glptr_glTexCoord1i = _impl_glTexCoord1i;
}
PFN_glTexCoord1i _glptr_glTexCoord1i = _impl_glTexCoord1i;

static void GL_APIENTRY _impl_glMultMatrixd (const GLdouble * m) {
  printf("* glMultMatrixd\n");
  _glptr_glMultMatrixd = (PFN_glMultMatrixd)GalogenGetProcAddress("glMultMatrixd");
   _glptr_glMultMatrixd(m);
  CHECK_ERROR();
  _glptr_glMultMatrixd = _impl_glMultMatrixd;
}
PFN_glMultMatrixd _glptr_glMultMatrixd = _impl_glMultMatrixd;

static void GL_APIENTRY _impl_glEvalMesh2 (GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2) {
  printf("* glEvalMesh2\n");
  _glptr_glEvalMesh2 = (PFN_glEvalMesh2)GalogenGetProcAddress("glEvalMesh2");
   _glptr_glEvalMesh2(mode, i1, i2, j1, j2);
  CHECK_ERROR();
  _glptr_glEvalMesh2 = _impl_glEvalMesh2;
}
PFN_glEvalMesh2 _glptr_glEvalMesh2 = _impl_glEvalMesh2;

static GLboolean GL_APIENTRY _impl_glIsRenderbufferEXT (GLuint renderbuffer) {
  printf("* glIsRenderbufferEXT\n");
  _glptr_glIsRenderbufferEXT = (PFN_glIsRenderbufferEXT)GalogenGetProcAddress("glIsRenderbufferEXT");
  return _glptr_glIsRenderbufferEXT(renderbuffer);
  CHECK_ERROR();
  _glptr_glIsRenderbufferEXT = _impl_glIsRenderbufferEXT;
}
PFN_glIsRenderbufferEXT _glptr_glIsRenderbufferEXT = _impl_glIsRenderbufferEXT;

static void GL_APIENTRY _impl_glSecondaryColor3i (GLint red, GLint green, GLint blue) {
  printf("* glSecondaryColor3i\n");
  _glptr_glSecondaryColor3i = (PFN_glSecondaryColor3i)GalogenGetProcAddress("glSecondaryColor3i");
   _glptr_glSecondaryColor3i(red, green, blue);
  CHECK_ERROR();
  _glptr_glSecondaryColor3i = _impl_glSecondaryColor3i;
}
PFN_glSecondaryColor3i _glptr_glSecondaryColor3i = _impl_glSecondaryColor3i;

static void GL_APIENTRY _impl_glRasterPos2i (GLint x, GLint y) {
  printf("* glRasterPos2i\n");
  _glptr_glRasterPos2i = (PFN_glRasterPos2i)GalogenGetProcAddress("glRasterPos2i");
   _glptr_glRasterPos2i(x, y);
  CHECK_ERROR();
  _glptr_glRasterPos2i = _impl_glRasterPos2i;
}
PFN_glRasterPos2i _glptr_glRasterPos2i = _impl_glRasterPos2i;

static void GL_APIENTRY _impl_glTexCoord1iv (const GLint * v) {
  printf("* glTexCoord1iv\n");
  _glptr_glTexCoord1iv = (PFN_glTexCoord1iv)GalogenGetProcAddress("glTexCoord1iv");
   _glptr_glTexCoord1iv(v);
  CHECK_ERROR();
  _glptr_glTexCoord1iv = _impl_glTexCoord1iv;
}
PFN_glTexCoord1iv _glptr_glTexCoord1iv = _impl_glTexCoord1iv;

static void GL_APIENTRY _impl_glDeleteFramebuffers (GLsizei n, const GLuint * framebuffers) {
  printf("* glDeleteFramebuffers\n");
  _glptr_glDeleteFramebuffers = (PFN_glDeleteFramebuffers)GalogenGetProcAddress("glDeleteFramebuffers");
   _glptr_glDeleteFramebuffers(n, framebuffers);
  CHECK_ERROR();
  _glptr_glDeleteFramebuffers = _impl_glDeleteFramebuffers;
}
PFN_glDeleteFramebuffers _glptr_glDeleteFramebuffers = _impl_glDeleteFramebuffers;

static void GL_APIENTRY _impl_glTexCoord1fv (const GLfloat * v) {
  printf("* glTexCoord1fv\n");
  _glptr_glTexCoord1fv = (PFN_glTexCoord1fv)GalogenGetProcAddress("glTexCoord1fv");
   _glptr_glTexCoord1fv(v);
  CHECK_ERROR();
  _glptr_glTexCoord1fv = _impl_glTexCoord1fv;
}
PFN_glTexCoord1fv _glptr_glTexCoord1fv = _impl_glTexCoord1fv;

static void GL_APIENTRY _impl_glMultiTexCoord1iv (GLenum target, const GLint * v) {
  printf("* glMultiTexCoord1iv\n");
  _glptr_glMultiTexCoord1iv = (PFN_glMultiTexCoord1iv)GalogenGetProcAddress("glMultiTexCoord1iv");
   _glptr_glMultiTexCoord1iv(target, v);
  CHECK_ERROR();
  _glptr_glMultiTexCoord1iv = _impl_glMultiTexCoord1iv;
}
PFN_glMultiTexCoord1iv _glptr_glMultiTexCoord1iv = _impl_glMultiTexCoord1iv;

static void GL_APIENTRY _impl_glColor3ui (GLuint red, GLuint green, GLuint blue) {
  printf("* glColor3ui\n");
  _glptr_glColor3ui = (PFN_glColor3ui)GalogenGetProcAddress("glColor3ui");
   _glptr_glColor3ui(red, green, blue);
  CHECK_ERROR();
  _glptr_glColor3ui = _impl_glColor3ui;
}
PFN_glColor3ui _glptr_glColor3ui = _impl_glColor3ui;

static void GL_APIENTRY _impl_glGetTexGenfv (GLenum coord, GLenum pname, GLfloat * params) {
  printf("* glGetTexGenfv\n");
  _glptr_glGetTexGenfv = (PFN_glGetTexGenfv)GalogenGetProcAddress("glGetTexGenfv");
   _glptr_glGetTexGenfv(coord, pname, params);
  CHECK_ERROR();
  _glptr_glGetTexGenfv = _impl_glGetTexGenfv;
}
PFN_glGetTexGenfv _glptr_glGetTexGenfv = _impl_glGetTexGenfv;

static void GL_APIENTRY _impl_glGetProgramLocalParameterdvARB (GLenum target, GLuint index, GLdouble * params) {
  printf("* glGetProgramLocalParameterdvARB\n");
  _glptr_glGetProgramLocalParameterdvARB = (PFN_glGetProgramLocalParameterdvARB)GalogenGetProcAddress("glGetProgramLocalParameterdvARB");
   _glptr_glGetProgramLocalParameterdvARB(target, index, params);
  CHECK_ERROR();
  _glptr_glGetProgramLocalParameterdvARB = _impl_glGetProgramLocalParameterdvARB;
}
PFN_glGetProgramLocalParameterdvARB _glptr_glGetProgramLocalParameterdvARB = _impl_glGetProgramLocalParameterdvARB;

static void GL_APIENTRY _impl_glTexCoord1dv (const GLdouble * v) {
  printf("* glTexCoord1dv\n");
  _glptr_glTexCoord1dv = (PFN_glTexCoord1dv)GalogenGetProcAddress("glTexCoord1dv");
   _glptr_glTexCoord1dv(v);
  CHECK_ERROR();
  _glptr_glTexCoord1dv = _impl_glTexCoord1dv;
}
PFN_glTexCoord1dv _glptr_glTexCoord1dv = _impl_glTexCoord1dv;

static void GL_APIENTRY _impl_glBindRenderbuffer (GLenum target, GLuint renderbuffer) {
  printf("* glBindRenderbuffer\n");
  _glptr_glBindRenderbuffer = (PFN_glBindRenderbuffer)GalogenGetProcAddress("glBindRenderbuffer");
   _glptr_glBindRenderbuffer(target, renderbuffer);
  CHECK_ERROR();
  _glptr_glBindRenderbuffer = _impl_glBindRenderbuffer;
}
PFN_glBindRenderbuffer _glptr_glBindRenderbuffer = _impl_glBindRenderbuffer;

static void GL_APIENTRY _impl_glRectsv (const GLshort * v1, const GLshort * v2) {
  printf("* glRectsv\n");
  _glptr_glRectsv = (PFN_glRectsv)GalogenGetProcAddress("glRectsv");
   _glptr_glRectsv(v1, v2);
  CHECK_ERROR();
  _glptr_glRectsv = _impl_glRectsv;
}
PFN_glRectsv _glptr_glRectsv = _impl_glRectsv;

static void GL_APIENTRY _impl_glTexCoord4dv (const GLdouble * v) {
  printf("* glTexCoord4dv\n");
  _glptr_glTexCoord4dv = (PFN_glTexCoord4dv)GalogenGetProcAddress("glTexCoord4dv");
   _glptr_glTexCoord4dv(v);
  CHECK_ERROR();
  _glptr_glTexCoord4dv = _impl_glTexCoord4dv;
}
PFN_glTexCoord4dv _glptr_glTexCoord4dv = _impl_glTexCoord4dv;

static void GL_APIENTRY _impl_glVertexAttrib4usvARB (GLuint index, const GLushort * v) {
  printf("* glVertexAttrib4usvARB\n");
  _glptr_glVertexAttrib4usvARB = (PFN_glVertexAttrib4usvARB)GalogenGetProcAddress("glVertexAttrib4usvARB");
   _glptr_glVertexAttrib4usvARB(index, v);
  CHECK_ERROR();
  _glptr_glVertexAttrib4usvARB = _impl_glVertexAttrib4usvARB;
}
PFN_glVertexAttrib4usvARB _glptr_glVertexAttrib4usvARB = _impl_glVertexAttrib4usvARB;

static void GL_APIENTRY _impl_glColor4uiv (const GLuint * v) {
  printf("* glColor4uiv\n");
  _glptr_glColor4uiv = (PFN_glColor4uiv)GalogenGetProcAddress("glColor4uiv");
   _glptr_glColor4uiv(v);
  CHECK_ERROR();
  _glptr_glColor4uiv = _impl_glColor4uiv;
}
PFN_glColor4uiv _glptr_glColor4uiv = _impl_glColor4uiv;

static void GL_APIENTRY _impl_glGetTexLevelParameteriv (GLenum target, GLint level, GLenum pname, GLint * params) {
  printf("* glGetTexLevelParameteriv\n");
  _glptr_glGetTexLevelParameteriv = (PFN_glGetTexLevelParameteriv)GalogenGetProcAddress("glGetTexLevelParameteriv");
   _glptr_glGetTexLevelParameteriv(target, level, pname, params);
  CHECK_ERROR();
  _glptr_glGetTexLevelParameteriv = _impl_glGetTexLevelParameteriv;
}
PFN_glGetTexLevelParameteriv _glptr_glGetTexLevelParameteriv = _impl_glGetTexLevelParameteriv;

static void GL_APIENTRY _impl_glRects (GLshort x1, GLshort y1, GLshort x2, GLshort y2) {
  printf("* glRects\n");
  _glptr_glRects = (PFN_glRects)GalogenGetProcAddress("glRects");
   _glptr_glRects(x1, y1, x2, y2);
  CHECK_ERROR();
  _glptr_glRects = _impl_glRects;
}
PFN_glRects _glptr_glRects = _impl_glRects;

static void GL_APIENTRY _impl_glRecti (GLint x1, GLint y1, GLint x2, GLint y2) {
  printf("* glRecti\n");
  _glptr_glRecti = (PFN_glRecti)GalogenGetProcAddress("glRecti");
   _glptr_glRecti(x1, y1, x2, y2);
  CHECK_ERROR();
  _glptr_glRecti = _impl_glRecti;
}
PFN_glRecti _glptr_glRecti = _impl_glRecti;

static void GL_APIENTRY _impl_glCallList (GLuint list) {
  printf("* glCallList\n");
  _glptr_glCallList = (PFN_glCallList)GalogenGetProcAddress("glCallList");
   _glptr_glCallList(list);
  CHECK_ERROR();
  _glptr_glCallList = _impl_glCallList;
}
PFN_glCallList _glptr_glCallList = _impl_glCallList;

static void GL_APIENTRY _impl_glRectf (GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2) {
  printf("* glRectf\n");
  _glptr_glRectf = (PFN_glRectf)GalogenGetProcAddress("glRectf");
   _glptr_glRectf(x1, y1, x2, y2);
  CHECK_ERROR();
  _glptr_glRectf = _impl_glRectf;
}
PFN_glRectf _glptr_glRectf = _impl_glRectf;

static void GL_APIENTRY _impl_glColor4fv (const GLfloat * v) {
  printf("* glColor4fv\n");
  _glptr_glColor4fv = (PFN_glColor4fv)GalogenGetProcAddress("glColor4fv");
   _glptr_glColor4fv(v);
  CHECK_ERROR();
  _glptr_glColor4fv = _impl_glColor4fv;
}
PFN_glColor4fv _glptr_glColor4fv = _impl_glColor4fv;

static void GL_APIENTRY _impl_glLoadIdentity () {
  printf("* glLoadIdentity\n");
  _glptr_glLoadIdentity = (PFN_glLoadIdentity)GalogenGetProcAddress("glLoadIdentity");
   _glptr_glLoadIdentity();
  CHECK_ERROR();
  _glptr_glLoadIdentity = _impl_glLoadIdentity;
}
PFN_glLoadIdentity _glptr_glLoadIdentity = _impl_glLoadIdentity;

static void GL_APIENTRY _impl_glDisableVertexAttribArrayARB (GLuint index) {
  printf("* glDisableVertexAttribArrayARB\n");
  _glptr_glDisableVertexAttribArrayARB = (PFN_glDisableVertexAttribArrayARB)GalogenGetProcAddress("glDisableVertexAttribArrayARB");
   _glptr_glDisableVertexAttribArrayARB(index);
  CHECK_ERROR();
  _glptr_glDisableVertexAttribArrayARB = _impl_glDisableVertexAttribArrayARB;
}
PFN_glDisableVertexAttribArrayARB _glptr_glDisableVertexAttribArrayARB = _impl_glDisableVertexAttribArrayARB;

static void GL_APIENTRY _impl_glPolygonOffset (GLfloat factor, GLfloat units) {
  printf("* glPolygonOffset\n");
  _glptr_glPolygonOffset = (PFN_glPolygonOffset)GalogenGetProcAddress("glPolygonOffset");
   _glptr_glPolygonOffset(factor, units);
  CHECK_ERROR();
  _glptr_glPolygonOffset = _impl_glPolygonOffset;
}
PFN_glPolygonOffset _glptr_glPolygonOffset = _impl_glPolygonOffset;

static void GL_APIENTRY _impl_glRasterPos4fv (const GLfloat * v) {
  printf("* glRasterPos4fv\n");
  _glptr_glRasterPos4fv = (PFN_glRasterPos4fv)GalogenGetProcAddress("glRasterPos4fv");
   _glptr_glRasterPos4fv(v);
  CHECK_ERROR();
  _glptr_glRasterPos4fv = _impl_glRasterPos4fv;
}
PFN_glRasterPos4fv _glptr_glRasterPos4fv = _impl_glRasterPos4fv;

static void GL_APIENTRY _impl_glVertex2sv (const GLshort * v) {
  printf("* glVertex2sv\n");
  _glptr_glVertex2sv = (PFN_glVertex2sv)GalogenGetProcAddress("glVertex2sv");
   _glptr_glVertex2sv(v);
  CHECK_ERROR();
  _glptr_glVertex2sv = _impl_glVertex2sv;
}
PFN_glVertex2sv _glptr_glVertex2sv = _impl_glVertex2sv;

static void GL_APIENTRY _impl_glRasterPos4d (GLdouble x, GLdouble y, GLdouble z, GLdouble w) {
  printf("* glRasterPos4d\n");
  _glptr_glRasterPos4d = (PFN_glRasterPos4d)GalogenGetProcAddress("glRasterPos4d");
   _glptr_glRasterPos4d(x, y, z, w);
  CHECK_ERROR();
  _glptr_glRasterPos4d = _impl_glRasterPos4d;
}
PFN_glRasterPos4d _glptr_glRasterPos4d = _impl_glRasterPos4d;

static void GL_APIENTRY _impl_glProgramLocalParameter4fvARB (GLenum target, GLuint index, const GLfloat * params) {
  printf("* glProgramLocalParameter4fvARB\n");
  _glptr_glProgramLocalParameter4fvARB = (PFN_glProgramLocalParameter4fvARB)GalogenGetProcAddress("glProgramLocalParameter4fvARB");
   _glptr_glProgramLocalParameter4fvARB(target, index, params);
  CHECK_ERROR();
  _glptr_glProgramLocalParameter4fvARB = _impl_glProgramLocalParameter4fvARB;
}
PFN_glProgramLocalParameter4fvARB _glptr_glProgramLocalParameter4fvARB = _impl_glProgramLocalParameter4fvARB;

static void GL_APIENTRY _impl_glRasterPos3iv (const GLint * v) {
  printf("* glRasterPos3iv\n");
  _glptr_glRasterPos3iv = (PFN_glRasterPos3iv)GalogenGetProcAddress("glRasterPos3iv");
   _glptr_glRasterPos3iv(v);
  CHECK_ERROR();
  _glptr_glRasterPos3iv = _impl_glRasterPos3iv;
}
PFN_glRasterPos3iv _glptr_glRasterPos3iv = _impl_glRasterPos3iv;

static void GL_APIENTRY _impl_glRasterPos3f (GLfloat x, GLfloat y, GLfloat z) {
  printf("* glRasterPos3f\n");
  _glptr_glRasterPos3f = (PFN_glRasterPos3f)GalogenGetProcAddress("glRasterPos3f");
   _glptr_glRasterPos3f(x, y, z);
  CHECK_ERROR();
  _glptr_glRasterPos3f = _impl_glRasterPos3f;
}
PFN_glRasterPos3f _glptr_glRasterPos3f = _impl_glRasterPos3f;

static void GL_APIENTRY _impl_glRasterPos3dv (const GLdouble * v) {
  printf("* glRasterPos3dv\n");
  _glptr_glRasterPos3dv = (PFN_glRasterPos3dv)GalogenGetProcAddress("glRasterPos3dv");
   _glptr_glRasterPos3dv(v);
  CHECK_ERROR();
  _glptr_glRasterPos3dv = _impl_glRasterPos3dv;
}
PFN_glRasterPos3dv _glptr_glRasterPos3dv = _impl_glRasterPos3dv;

static GLboolean GL_APIENTRY _impl_glIsFramebufferEXT (GLuint framebuffer) {
  printf("* glIsFramebufferEXT\n");
  _glptr_glIsFramebufferEXT = (PFN_glIsFramebufferEXT)GalogenGetProcAddress("glIsFramebufferEXT");
  return _glptr_glIsFramebufferEXT(framebuffer);
  CHECK_ERROR();
  _glptr_glIsFramebufferEXT = _impl_glIsFramebufferEXT;
}
PFN_glIsFramebufferEXT _glptr_glIsFramebufferEXT = _impl_glIsFramebufferEXT;

static void GL_APIENTRY _impl_glVertex4f (GLfloat x, GLfloat y, GLfloat z, GLfloat w) {
  printf("* glVertex4f\n");
  _glptr_glVertex4f = (PFN_glVertex4f)GalogenGetProcAddress("glVertex4f");
   _glptr_glVertex4f(x, y, z, w);
  CHECK_ERROR();
  _glptr_glVertex4f = _impl_glVertex4f;
}
PFN_glVertex4f _glptr_glVertex4f = _impl_glVertex4f;

static void GL_APIENTRY _impl_glTexParameterfv (GLenum target, GLenum pname, const GLfloat * params) {
  printf("* glTexParameterfv\n");
  _glptr_glTexParameterfv = (PFN_glTexParameterfv)GalogenGetProcAddress("glTexParameterfv");
   _glptr_glTexParameterfv(target, pname, params);
  CHECK_ERROR();
  _glptr_glTexParameterfv = _impl_glTexParameterfv;
}
PFN_glTexParameterfv _glptr_glTexParameterfv = _impl_glTexParameterfv;

static void GL_APIENTRY _impl_glTexCoord4i (GLint s, GLint t, GLint r, GLint q) {
  printf("* glTexCoord4i\n");
  _glptr_glTexCoord4i = (PFN_glTexCoord4i)GalogenGetProcAddress("glTexCoord4i");
   _glptr_glTexCoord4i(s, t, r, q);
  CHECK_ERROR();
  _glptr_glTexCoord4i = _impl_glTexCoord4i;
}
PFN_glTexCoord4i _glptr_glTexCoord4i = _impl_glTexCoord4i;

static void GL_APIENTRY _impl_glIndexsv (const GLshort * c) {
  printf("* glIndexsv\n");
  _glptr_glIndexsv = (PFN_glIndexsv)GalogenGetProcAddress("glIndexsv");
   _glptr_glIndexsv(c);
  CHECK_ERROR();
  _glptr_glIndexsv = _impl_glIndexsv;
}
PFN_glIndexsv _glptr_glIndexsv = _impl_glIndexsv;

static void GL_APIENTRY _impl_glRasterPos3d (GLdouble x, GLdouble y, GLdouble z) {
  printf("* glRasterPos3d\n");
  _glptr_glRasterPos3d = (PFN_glRasterPos3d)GalogenGetProcAddress("glRasterPos3d");
   _glptr_glRasterPos3d(x, y, z);
  CHECK_ERROR();
  _glptr_glRasterPos3d = _impl_glRasterPos3d;
}
PFN_glRasterPos3d _glptr_glRasterPos3d = _impl_glRasterPos3d;

static void GL_APIENTRY _impl_glVertexAttrib4fARB (GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) {
  printf("* glVertexAttrib4fARB\n");
  _glptr_glVertexAttrib4fARB = (PFN_glVertexAttrib4fARB)GalogenGetProcAddress("glVertexAttrib4fARB");
   _glptr_glVertexAttrib4fARB(index, x, y, z, w);
  CHECK_ERROR();
  _glptr_glVertexAttrib4fARB = _impl_glVertexAttrib4fARB;
}
PFN_glVertexAttrib4fARB _glptr_glVertexAttrib4fARB = _impl_glVertexAttrib4fARB;

static void GL_APIENTRY _impl_glVertex3d (GLdouble x, GLdouble y, GLdouble z) {
  printf("* glVertex3d\n");
  _glptr_glVertex3d = (PFN_glVertex3d)GalogenGetProcAddress("glVertex3d");
   _glptr_glVertex3d(x, y, z);
  CHECK_ERROR();
  _glptr_glVertex3d = _impl_glVertex3d;
}
PFN_glVertex3d _glptr_glVertex3d = _impl_glVertex3d;

static void GL_APIENTRY _impl_glEvalPoint1 (GLint i) {
  printf("* glEvalPoint1\n");
  _glptr_glEvalPoint1 = (PFN_glEvalPoint1)GalogenGetProcAddress("glEvalPoint1");
   _glptr_glEvalPoint1(i);
  CHECK_ERROR();
  _glptr_glEvalPoint1 = _impl_glEvalPoint1;
}
PFN_glEvalPoint1 _glptr_glEvalPoint1 = _impl_glEvalPoint1;

static void GL_APIENTRY _impl_glListBase (GLuint base) {
  printf("* glListBase\n");
  _glptr_glListBase = (PFN_glListBase)GalogenGetProcAddress("glListBase");
   _glptr_glListBase(base);
  CHECK_ERROR();
  _glptr_glListBase = _impl_glListBase;
}
PFN_glListBase _glptr_glListBase = _impl_glListBase;

static void GL_APIENTRY _impl_glRasterPos2sv (const GLshort * v) {
  printf("* glRasterPos2sv\n");
  _glptr_glRasterPos2sv = (PFN_glRasterPos2sv)GalogenGetProcAddress("glRasterPos2sv");
   _glptr_glRasterPos2sv(v);
  CHECK_ERROR();
  _glptr_glRasterPos2sv = _impl_glRasterPos2sv;
}
PFN_glRasterPos2sv _glptr_glRasterPos2sv = _impl_glRasterPos2sv;

static void GL_APIENTRY _impl_glTexCoord3fv (const GLfloat * v) {
  printf("* glTexCoord3fv\n");
  _glptr_glTexCoord3fv = (PFN_glTexCoord3fv)GalogenGetProcAddress("glTexCoord3fv");
   _glptr_glTexCoord3fv(v);
  CHECK_ERROR();
  _glptr_glTexCoord3fv = _impl_glTexCoord3fv;
}
PFN_glTexCoord3fv _glptr_glTexCoord3fv = _impl_glTexCoord3fv;

static void GL_APIENTRY _impl_glTexParameteri (GLenum target, GLenum pname, GLint param) {
  printf("* glTexParameteri\n");
  _glptr_glTexParameteri = (PFN_glTexParameteri)GalogenGetProcAddress("glTexParameteri");
   _glptr_glTexParameteri(target, pname, param);
  CHECK_ERROR();
  _glptr_glTexParameteri = _impl_glTexParameteri;
}
PFN_glTexParameteri _glptr_glTexParameteri = _impl_glTexParameteri;

static void GL_APIENTRY _impl_glRectd (GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2) {
  printf("* glRectd\n");
  _glptr_glRectd = (PFN_glRectd)GalogenGetProcAddress("glRectd");
   _glptr_glRectd(x1, y1, x2, y2);
  CHECK_ERROR();
  _glptr_glRectd = _impl_glRectd;
}
PFN_glRectd _glptr_glRectd = _impl_glRectd;

static void GL_APIENTRY _impl_glRasterPos2fv (const GLfloat * v) {
  printf("* glRasterPos2fv\n");
  _glptr_glRasterPos2fv = (PFN_glRasterPos2fv)GalogenGetProcAddress("glRasterPos2fv");
   _glptr_glRasterPos2fv(v);
  CHECK_ERROR();
  _glptr_glRasterPos2fv = _impl_glRasterPos2fv;
}
PFN_glRasterPos2fv _glptr_glRasterPos2fv = _impl_glRasterPos2fv;

static void GL_APIENTRY _impl_glColor3ubv (const GLubyte * v) {
  printf("* glColor3ubv\n");
  _glptr_glColor3ubv = (PFN_glColor3ubv)GalogenGetProcAddress("glColor3ubv");
   _glptr_glColor3ubv(v);
  CHECK_ERROR();
  _glptr_glColor3ubv = _impl_glColor3ubv;
}
PFN_glColor3ubv _glptr_glColor3ubv = _impl_glColor3ubv;

static void GL_APIENTRY _impl_glNormal3s (GLshort nx, GLshort ny, GLshort nz) {
  printf("* glNormal3s\n");
  _glptr_glNormal3s = (PFN_glNormal3s)GalogenGetProcAddress("glNormal3s");
   _glptr_glNormal3s(nx, ny, nz);
  CHECK_ERROR();
  _glptr_glNormal3s = _impl_glNormal3s;
}
PFN_glNormal3s _glptr_glNormal3s = _impl_glNormal3s;

static void GL_APIENTRY _impl_glVertex2dv (const GLdouble * v) {
  printf("* glVertex2dv\n");
  _glptr_glVertex2dv = (PFN_glVertex2dv)GalogenGetProcAddress("glVertex2dv");
   _glptr_glVertex2dv(v);
  CHECK_ERROR();
  _glptr_glVertex2dv = _impl_glVertex2dv;
}
PFN_glVertex2dv _glptr_glVertex2dv = _impl_glVertex2dv;

static void GL_APIENTRY _impl_glHint (GLenum target, GLenum mode) {
  printf("* glHint\n");
  _glptr_glHint = (PFN_glHint)GalogenGetProcAddress("glHint");
   _glptr_glHint(target, mode);
  CHECK_ERROR();
  _glptr_glHint = _impl_glHint;
}
PFN_glHint _glptr_glHint = _impl_glHint;

static void GL_APIENTRY _impl_glRectiv (const GLint * v1, const GLint * v2) {
  printf("* glRectiv\n");
  _glptr_glRectiv = (PFN_glRectiv)GalogenGetProcAddress("glRectiv");
   _glptr_glRectiv(v1, v2);
  CHECK_ERROR();
  _glptr_glRectiv = _impl_glRectiv;
}
PFN_glRectiv _glptr_glRectiv = _impl_glRectiv;

static void GL_APIENTRY _impl_glNormal3dv (const GLdouble * v) {
  printf("* glNormal3dv\n");
  _glptr_glNormal3dv = (PFN_glNormal3dv)GalogenGetProcAddress("glNormal3dv");
   _glptr_glNormal3dv(v);
  CHECK_ERROR();
  _glptr_glNormal3dv = _impl_glNormal3dv;
}
PFN_glNormal3dv _glptr_glNormal3dv = _impl_glNormal3dv;

static void GL_APIENTRY _impl_glVertexAttrib4iv (GLuint index, const GLint * v) {
  printf("* glVertexAttrib4iv\n");
  _glptr_glVertexAttrib4iv = (PFN_glVertexAttrib4iv)GalogenGetProcAddress("glVertexAttrib4iv");
   _glptr_glVertexAttrib4iv(index, v);
  CHECK_ERROR();
  _glptr_glVertexAttrib4iv = _impl_glVertexAttrib4iv;
}
PFN_glVertexAttrib4iv _glptr_glVertexAttrib4iv = _impl_glVertexAttrib4iv;

static GLboolean GL_APIENTRY _impl_glIsEnabled (GLenum cap) {
  printf("* glIsEnabled\n");
  _glptr_glIsEnabled = (PFN_glIsEnabled)GalogenGetProcAddress("glIsEnabled");
  return _glptr_glIsEnabled(cap);
  CHECK_ERROR();
  _glptr_glIsEnabled = _impl_glIsEnabled;
}
PFN_glIsEnabled _glptr_glIsEnabled = _impl_glIsEnabled;

static void GL_APIENTRY _impl_glRotated (GLdouble angle, GLdouble x, GLdouble y, GLdouble z) {
  printf("* glRotated\n");
  _glptr_glRotated = (PFN_glRotated)GalogenGetProcAddress("glRotated");
   _glptr_glRotated(angle, x, y, z);
  CHECK_ERROR();
  _glptr_glRotated = _impl_glRotated;
}
PFN_glRotated _glptr_glRotated = _impl_glRotated;

static void GL_APIENTRY _impl_glNormal3b (GLbyte nx, GLbyte ny, GLbyte nz) {
  printf("* glNormal3b\n");
  _glptr_glNormal3b = (PFN_glNormal3b)GalogenGetProcAddress("glNormal3b");
   _glptr_glNormal3b(nx, ny, nz);
  CHECK_ERROR();
  _glptr_glNormal3b = _impl_glNormal3b;
}
PFN_glNormal3b _glptr_glNormal3b = _impl_glNormal3b;

static void GL_APIENTRY _impl_glLoadMatrixf (const GLfloat * m) {
  printf("* glLoadMatrixf\n");
  _glptr_glLoadMatrixf = (PFN_glLoadMatrixf)GalogenGetProcAddress("glLoadMatrixf");
   _glptr_glLoadMatrixf(m);
  CHECK_ERROR();
  _glptr_glLoadMatrixf = _impl_glLoadMatrixf;
}
PFN_glLoadMatrixf _glptr_glLoadMatrixf = _impl_glLoadMatrixf;

static void GL_APIENTRY _impl_glTexCoord4fv (const GLfloat * v) {
  printf("* glTexCoord4fv\n");
  _glptr_glTexCoord4fv = (PFN_glTexCoord4fv)GalogenGetProcAddress("glTexCoord4fv");
   _glptr_glTexCoord4fv(v);
  CHECK_ERROR();
  _glptr_glTexCoord4fv = _impl_glTexCoord4fv;
}
PFN_glTexCoord4fv _glptr_glTexCoord4fv = _impl_glTexCoord4fv;

static void GL_APIENTRY _impl_glIndexiv (const GLint * c) {
  printf("* glIndexiv\n");
  _glptr_glIndexiv = (PFN_glIndexiv)GalogenGetProcAddress("glIndexiv");
   _glptr_glIndexiv(c);
  CHECK_ERROR();
  _glptr_glIndexiv = _impl_glIndexiv;
}
PFN_glIndexiv _glptr_glIndexiv = _impl_glIndexiv;

static void GL_APIENTRY _impl_glCompressedTexImage1DARB (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void * data) {
  printf("* glCompressedTexImage1DARB\n");
  _glptr_glCompressedTexImage1DARB = (PFN_glCompressedTexImage1DARB)GalogenGetProcAddress("glCompressedTexImage1DARB");
   _glptr_glCompressedTexImage1DARB(target, level, internalformat, width, border, imageSize, data);
  CHECK_ERROR();
  _glptr_glCompressedTexImage1DARB = _impl_glCompressedTexImage1DARB;
}
PFN_glCompressedTexImage1DARB _glptr_glCompressedTexImage1DARB = _impl_glCompressedTexImage1DARB;

static void GL_APIENTRY _impl_glPixelTransferi (GLenum pname, GLint param) {
  printf("* glPixelTransferi\n");
  _glptr_glPixelTransferi = (PFN_glPixelTransferi)GalogenGetProcAddress("glPixelTransferi");
   _glptr_glPixelTransferi(pname, param);
  CHECK_ERROR();
  _glptr_glPixelTransferi = _impl_glPixelTransferi;
}
PFN_glPixelTransferi _glptr_glPixelTransferi = _impl_glPixelTransferi;

static void GL_APIENTRY _impl_glLineWidth (GLfloat width) {
  printf("* glLineWidth\n");
  _glptr_glLineWidth = (PFN_glLineWidth)GalogenGetProcAddress("glLineWidth");
   _glptr_glLineWidth(width);
  CHECK_ERROR();
  _glptr_glLineWidth = _impl_glLineWidth;
}
PFN_glLineWidth _glptr_glLineWidth = _impl_glLineWidth;

static void GL_APIENTRY _impl_glVertexAttrib4sARB (GLuint index, GLshort x, GLshort y, GLshort z, GLshort w) {
  printf("* glVertexAttrib4sARB\n");
  _glptr_glVertexAttrib4sARB = (PFN_glVertexAttrib4sARB)GalogenGetProcAddress("glVertexAttrib4sARB");
   _glptr_glVertexAttrib4sARB(index, x, y, z, w);
  CHECK_ERROR();
  _glptr_glVertexAttrib4sARB = _impl_glVertexAttrib4sARB;
}
PFN_glVertexAttrib4sARB _glptr_glVertexAttrib4sARB = _impl_glVertexAttrib4sARB;

static void GL_APIENTRY _impl_glStencilOpSeparate (GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass) {
  printf("* glStencilOpSeparate\n");
  _glptr_glStencilOpSeparate = (PFN_glStencilOpSeparate)GalogenGetProcAddress("glStencilOpSeparate");
   _glptr_glStencilOpSeparate(face, sfail, dpfail, dppass);
  CHECK_ERROR();
  _glptr_glStencilOpSeparate = _impl_glStencilOpSeparate;
}
PFN_glStencilOpSeparate _glptr_glStencilOpSeparate = _impl_glStencilOpSeparate;

static void GL_APIENTRY _impl_glColor3us (GLushort red, GLushort green, GLushort blue) {
  printf("* glColor3us\n");
  _glptr_glColor3us = (PFN_glColor3us)GalogenGetProcAddress("glColor3us");
   _glptr_glColor3us(red, green, blue);
  CHECK_ERROR();
  _glptr_glColor3us = _impl_glColor3us;
}
PFN_glColor3us _glptr_glColor3us = _impl_glColor3us;

static void GL_APIENTRY _impl_glPixelTransferf (GLenum pname, GLfloat param) {
  printf("* glPixelTransferf\n");
  _glptr_glPixelTransferf = (PFN_glPixelTransferf)GalogenGetProcAddress("glPixelTransferf");
   _glptr_glPixelTransferf(pname, param);
  CHECK_ERROR();
  _glptr_glPixelTransferf = _impl_glPixelTransferf;
}
PFN_glPixelTransferf _glptr_glPixelTransferf = _impl_glPixelTransferf;

static void GL_APIENTRY _impl_glIndexf (GLfloat c) {
  printf("* glIndexf\n");
  _glptr_glIndexf = (PFN_glIndexf)GalogenGetProcAddress("glIndexf");
   _glptr_glIndexf(c);
  CHECK_ERROR();
  _glptr_glIndexf = _impl_glIndexf;
}
PFN_glIndexf _glptr_glIndexf = _impl_glIndexf;

static void GL_APIENTRY _impl_glIndexdv (const GLdouble * c) {
  printf("* glIndexdv\n");
  _glptr_glIndexdv = (PFN_glIndexdv)GalogenGetProcAddress("glIndexdv");
   _glptr_glIndexdv(c);
  CHECK_ERROR();
  _glptr_glIndexdv = _impl_glIndexdv;
}
PFN_glIndexdv _glptr_glIndexdv = _impl_glIndexdv;

static void GL_APIENTRY _impl_glGetTexParameteriv (GLenum target, GLenum pname, GLint * params) {
  printf("* glGetTexParameteriv\n");
  _glptr_glGetTexParameteriv = (PFN_glGetTexParameteriv)GalogenGetProcAddress("glGetTexParameteriv");
   _glptr_glGetTexParameteriv(target, pname, params);
  CHECK_ERROR();
  _glptr_glGetTexParameteriv = _impl_glGetTexParameteriv;
}
PFN_glGetTexParameteriv _glptr_glGetTexParameteriv = _impl_glGetTexParameteriv;

static void GL_APIENTRY _impl_glColor4ubv (const GLubyte * v) {
  printf("* glColor4ubv\n");
  _glptr_glColor4ubv = (PFN_glColor4ubv)GalogenGetProcAddress("glColor4ubv");
   _glptr_glColor4ubv(v);
  CHECK_ERROR();
  _glptr_glColor4ubv = _impl_glColor4ubv;
}
PFN_glColor4ubv _glptr_glColor4ubv = _impl_glColor4ubv;

static void GL_APIENTRY _impl_glColor3b (GLbyte red, GLbyte green, GLbyte blue) {
  printf("* glColor3b\n");
  _glptr_glColor3b = (PFN_glColor3b)GalogenGetProcAddress("glColor3b");
   _glptr_glColor3b(red, green, blue);
  CHECK_ERROR();
  _glptr_glColor3b = _impl_glColor3b;
}
PFN_glColor3b _glptr_glColor3b = _impl_glColor3b;

static void GL_APIENTRY _impl_glColor4ub (GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha) {
  printf("* glColor4ub\n");
  _glptr_glColor4ub = (PFN_glColor4ub)GalogenGetProcAddress("glColor4ub");
   _glptr_glColor4ub(red, green, blue, alpha);
  CHECK_ERROR();
  _glptr_glColor4ub = _impl_glColor4ub;
}
PFN_glColor4ub _glptr_glColor4ub = _impl_glColor4ub;

static void GL_APIENTRY _impl_glColor3sv (const GLshort * v) {
  printf("* glColor3sv\n");
  _glptr_glColor3sv = (PFN_glColor3sv)GalogenGetProcAddress("glColor3sv");
   _glptr_glColor3sv(v);
  CHECK_ERROR();
  _glptr_glColor3sv = _impl_glColor3sv;
}
PFN_glColor3sv _glptr_glColor3sv = _impl_glColor3sv;

static void GL_APIENTRY _impl_glTexCoord3sv (const GLshort * v) {
  printf("* glTexCoord3sv\n");
  _glptr_glTexCoord3sv = (PFN_glTexCoord3sv)GalogenGetProcAddress("glTexCoord3sv");
   _glptr_glTexCoord3sv(v);
  CHECK_ERROR();
  _glptr_glTexCoord3sv = _impl_glTexCoord3sv;
}
PFN_glTexCoord3sv _glptr_glTexCoord3sv = _impl_glTexCoord3sv;

static void GL_APIENTRY _impl_glColor4sv (const GLshort * v) {
  printf("* glColor4sv\n");
  _glptr_glColor4sv = (PFN_glColor4sv)GalogenGetProcAddress("glColor4sv");
   _glptr_glColor4sv(v);
  CHECK_ERROR();
  _glptr_glColor4sv = _impl_glColor4sv;
}
PFN_glColor4sv _glptr_glColor4sv = _impl_glColor4sv;

static void GL_APIENTRY _impl_glVertexAttrib4dv (GLuint index, const GLdouble * v) {
  printf("* glVertexAttrib4dv\n");
  _glptr_glVertexAttrib4dv = (PFN_glVertexAttrib4dv)GalogenGetProcAddress("glVertexAttrib4dv");
   _glptr_glVertexAttrib4dv(index, v);
  CHECK_ERROR();
  _glptr_glVertexAttrib4dv = _impl_glVertexAttrib4dv;
}
PFN_glVertexAttrib4dv _glptr_glVertexAttrib4dv = _impl_glVertexAttrib4dv;

static void GL_APIENTRY _impl_glRectfv (const GLfloat * v1, const GLfloat * v2) {
  printf("* glRectfv\n");
  _glptr_glRectfv = (PFN_glRectfv)GalogenGetProcAddress("glRectfv");
   _glptr_glRectfv(v1, v2);
  CHECK_ERROR();
  _glptr_glRectfv = _impl_glRectfv;
}
PFN_glRectfv _glptr_glRectfv = _impl_glRectfv;

static void GL_APIENTRY _impl_glBitmap (GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte * bitmap) {
  printf("* glBitmap\n");
  _glptr_glBitmap = (PFN_glBitmap)GalogenGetProcAddress("glBitmap");
   _glptr_glBitmap(width, height, xorig, yorig, xmove, ymove, bitmap);
  CHECK_ERROR();
  _glptr_glBitmap = _impl_glBitmap;
}
PFN_glBitmap _glptr_glBitmap = _impl_glBitmap;

static void GL_APIENTRY _impl_glTexEnvfv (GLenum target, GLenum pname, const GLfloat * params) {
  printf("* glTexEnvfv\n");
  _glptr_glTexEnvfv = (PFN_glTexEnvfv)GalogenGetProcAddress("glTexEnvfv");
   _glptr_glTexEnvfv(target, pname, params);
  CHECK_ERROR();
  _glptr_glTexEnvfv = _impl_glTexEnvfv;
}
PFN_glTexEnvfv _glptr_glTexEnvfv = _impl_glTexEnvfv;

static void GL_APIENTRY _impl_glColor4iv (const GLint * v) {
  printf("* glColor4iv\n");
  _glptr_glColor4iv = (PFN_glColor4iv)GalogenGetProcAddress("glColor4iv");
   _glptr_glColor4iv(v);
  CHECK_ERROR();
  _glptr_glColor4iv = _impl_glColor4iv;
}
PFN_glColor4iv _glptr_glColor4iv = _impl_glColor4iv;

static void GL_APIENTRY _impl_glGetTexParameterfv (GLenum target, GLenum pname, GLfloat * params) {
  printf("* glGetTexParameterfv\n");
  _glptr_glGetTexParameterfv = (PFN_glGetTexParameterfv)GalogenGetProcAddress("glGetTexParameterfv");
   _glptr_glGetTexParameterfv(target, pname, params);
  CHECK_ERROR();
  _glptr_glGetTexParameterfv = _impl_glGetTexParameterfv;
}
PFN_glGetTexParameterfv _glptr_glGetTexParameterfv = _impl_glGetTexParameterfv;

static void GL_APIENTRY _impl_glVertex4s (GLshort x, GLshort y, GLshort z, GLshort w) {
  printf("* glVertex4s\n");
  _glptr_glVertex4s = (PFN_glVertex4s)GalogenGetProcAddress("glVertex4s");
   _glptr_glVertex4s(x, y, z, w);
  CHECK_ERROR();
  _glptr_glVertex4s = _impl_glVertex4s;
}
PFN_glVertex4s _glptr_glVertex4s = _impl_glVertex4s;

static void GL_APIENTRY _impl_glRectdv (const GLdouble * v1, const GLdouble * v2) {
  printf("* glRectdv\n");
  _glptr_glRectdv = (PFN_glRectdv)GalogenGetProcAddress("glRectdv");
   _glptr_glRectdv(v1, v2);
  CHECK_ERROR();
  _glptr_glRectdv = _impl_glRectdv;
}
PFN_glRectdv _glptr_glRectdv = _impl_glRectdv;

static void GL_APIENTRY _impl_glClearIndex (GLfloat c) {
  printf("* glClearIndex\n");
  _glptr_glClearIndex = (PFN_glClearIndex)GalogenGetProcAddress("glClearIndex");
   _glptr_glClearIndex(c);
  CHECK_ERROR();
  _glptr_glClearIndex = _impl_glClearIndex;
}
PFN_glClearIndex _glptr_glClearIndex = _impl_glClearIndex;

static void GL_APIENTRY _impl_glColor4ui (GLuint red, GLuint green, GLuint blue, GLuint alpha) {
  printf("* glColor4ui\n");
  _glptr_glColor4ui = (PFN_glColor4ui)GalogenGetProcAddress("glColor4ui");
   _glptr_glColor4ui(red, green, blue, alpha);
  CHECK_ERROR();
  _glptr_glColor4ui = _impl_glColor4ui;
}
PFN_glColor4ui _glptr_glColor4ui = _impl_glColor4ui;

static void GL_APIENTRY _impl_glGetLightiv (GLenum light, GLenum pname, GLint * params) {
  printf("* glGetLightiv\n");
  _glptr_glGetLightiv = (PFN_glGetLightiv)GalogenGetProcAddress("glGetLightiv");
   _glptr_glGetLightiv(light, pname, params);
  CHECK_ERROR();
  _glptr_glGetLightiv = _impl_glGetLightiv;
}
PFN_glGetLightiv _glptr_glGetLightiv = _impl_glGetLightiv;

static void GL_APIENTRY _impl_glTexCoord2sv (const GLshort * v) {
  printf("* glTexCoord2sv\n");
  _glptr_glTexCoord2sv = (PFN_glTexCoord2sv)GalogenGetProcAddress("glTexCoord2sv");
   _glptr_glTexCoord2sv(v);
  CHECK_ERROR();
  _glptr_glTexCoord2sv = _impl_glTexCoord2sv;
}
PFN_glTexCoord2sv _glptr_glTexCoord2sv = _impl_glTexCoord2sv;

static GLint GL_APIENTRY _impl_glRenderMode (GLenum mode) {
  printf("* glRenderMode\n");
  _glptr_glRenderMode = (PFN_glRenderMode)GalogenGetProcAddress("glRenderMode");
  return _glptr_glRenderMode(mode);
  CHECK_ERROR();
  _glptr_glRenderMode = _impl_glRenderMode;
}
PFN_glRenderMode _glptr_glRenderMode = _impl_glRenderMode;

static void GL_APIENTRY _impl_glColor4i (GLint red, GLint green, GLint blue, GLint alpha) {
  printf("* glColor4i\n");
  _glptr_glColor4i = (PFN_glColor4i)GalogenGetProcAddress("glColor4i");
   _glptr_glColor4i(red, green, blue, alpha);
  CHECK_ERROR();
  _glptr_glColor4i = _impl_glColor4i;
}
PFN_glColor4i _glptr_glColor4i = _impl_glColor4i;

static void GL_APIENTRY _impl_glGetVertexAttribdv (GLuint index, GLenum pname, GLdouble * params) {
  printf("* glGetVertexAttribdv\n");
  _glptr_glGetVertexAttribdv = (PFN_glGetVertexAttribdv)GalogenGetProcAddress("glGetVertexAttribdv");
   _glptr_glGetVertexAttribdv(index, pname, params);
  CHECK_ERROR();
  _glptr_glGetVertexAttribdv = _impl_glGetVertexAttribdv;
}
PFN_glGetVertexAttribdv _glptr_glGetVertexAttribdv = _impl_glGetVertexAttribdv;

static GLuint GL_APIENTRY _impl_glCreateShader (GLenum type) {
  printf("* glCreateShader\n");
  _glptr_glCreateShader = (PFN_glCreateShader)GalogenGetProcAddress("glCreateShader");
  return _glptr_glCreateShader(type);
  CHECK_ERROR();
  _glptr_glCreateShader = _impl_glCreateShader;
}
PFN_glCreateShader _glptr_glCreateShader = _impl_glCreateShader;

static void GL_APIENTRY _impl_glLogicOp (GLenum opcode) {
  printf("* glLogicOp\n");
  _glptr_glLogicOp = (PFN_glLogicOp)GalogenGetProcAddress("glLogicOp");
   _glptr_glLogicOp(opcode);
  CHECK_ERROR();
  _glptr_glLogicOp = _impl_glLogicOp;
}
PFN_glLogicOp _glptr_glLogicOp = _impl_glLogicOp;

static void GL_APIENTRY _impl_glColor4bv (const GLbyte * v) {
  printf("* glColor4bv\n");
  _glptr_glColor4bv = (PFN_glColor4bv)GalogenGetProcAddress("glColor4bv");
   _glptr_glColor4bv(v);
  CHECK_ERROR();
  _glptr_glColor4bv = _impl_glColor4bv;
}
PFN_glColor4bv _glptr_glColor4bv = _impl_glColor4bv;

static void GL_APIENTRY _impl_glGetFloatv (GLenum pname, GLfloat * data) {
  printf("* glGetFloatv\n");
  _glptr_glGetFloatv = (PFN_glGetFloatv)GalogenGetProcAddress("glGetFloatv");
   _glptr_glGetFloatv(pname, data);
  CHECK_ERROR();
  _glptr_glGetFloatv = _impl_glGetFloatv;
}
PFN_glGetFloatv _glptr_glGetFloatv = _impl_glGetFloatv;

static void GL_APIENTRY _impl_glRasterPos3sv (const GLshort * v) {
  printf("* glRasterPos3sv\n");
  _glptr_glRasterPos3sv = (PFN_glRasterPos3sv)GalogenGetProcAddress("glRasterPos3sv");
   _glptr_glRasterPos3sv(v);
  CHECK_ERROR();
  _glptr_glRasterPos3sv = _impl_glRasterPos3sv;
}
PFN_glRasterPos3sv _glptr_glRasterPos3sv = _impl_glRasterPos3sv;

static void GL_APIENTRY _impl_glPixelStorei (GLenum pname, GLint param) {
  printf("* glPixelStorei\n");
  _glptr_glPixelStorei = (PFN_glPixelStorei)GalogenGetProcAddress("glPixelStorei");
   _glptr_glPixelStorei(pname, param);
  CHECK_ERROR();
  _glptr_glPixelStorei = _impl_glPixelStorei;
}
PFN_glPixelStorei _glptr_glPixelStorei = _impl_glPixelStorei;

static void GL_APIENTRY _impl_glVertexAttrib4Niv (GLuint index, const GLint * v) {
  printf("* glVertexAttrib4Niv\n");
  _glptr_glVertexAttrib4Niv = (PFN_glVertexAttrib4Niv)GalogenGetProcAddress("glVertexAttrib4Niv");
   _glptr_glVertexAttrib4Niv(index, v);
  CHECK_ERROR();
  _glptr_glVertexAttrib4Niv = _impl_glVertexAttrib4Niv;
}
PFN_glVertexAttrib4Niv _glptr_glVertexAttrib4Niv = _impl_glVertexAttrib4Niv;

static void GL_APIENTRY _impl_glMultiTexCoord3f (GLenum target, GLfloat s, GLfloat t, GLfloat r) {
  printf("* glMultiTexCoord3f\n");
  _glptr_glMultiTexCoord3f = (PFN_glMultiTexCoord3f)GalogenGetProcAddress("glMultiTexCoord3f");
   _glptr_glMultiTexCoord3f(target, s, t, r);
  CHECK_ERROR();
  _glptr_glMultiTexCoord3f = _impl_glMultiTexCoord3f;
}
PFN_glMultiTexCoord3f _glptr_glMultiTexCoord3f = _impl_glMultiTexCoord3f;

static void GL_APIENTRY _impl_glColor3usv (const GLushort * v) {
  printf("* glColor3usv\n");
  _glptr_glColor3usv = (PFN_glColor3usv)GalogenGetProcAddress("glColor3usv");
   _glptr_glColor3usv(v);
  CHECK_ERROR();
  _glptr_glColor3usv = _impl_glColor3usv;
}
PFN_glColor3usv _glptr_glColor3usv = _impl_glColor3usv;

static void GL_APIENTRY _impl_glMaterialiv (GLenum face, GLenum pname, const GLint * params) {
  printf("* glMaterialiv\n");
  _glptr_glMaterialiv = (PFN_glMaterialiv)GalogenGetProcAddress("glMaterialiv");
   _glptr_glMaterialiv(face, pname, params);
  CHECK_ERROR();
  _glptr_glMaterialiv = _impl_glMaterialiv;
}
PFN_glMaterialiv _glptr_glMaterialiv = _impl_glMaterialiv;

static void GL_APIENTRY _impl_glColor3uiv (const GLuint * v) {
  printf("* glColor3uiv\n");
  _glptr_glColor3uiv = (PFN_glColor3uiv)GalogenGetProcAddress("glColor3uiv");
   _glptr_glColor3uiv(v);
  CHECK_ERROR();
  _glptr_glColor3uiv = _impl_glColor3uiv;
}
PFN_glColor3uiv _glptr_glColor3uiv = _impl_glColor3uiv;

static void GL_APIENTRY _impl_glVertexAttrib4fv (GLuint index, const GLfloat * v) {
  printf("* glVertexAttrib4fv\n");
  _glptr_glVertexAttrib4fv = (PFN_glVertexAttrib4fv)GalogenGetProcAddress("glVertexAttrib4fv");
   _glptr_glVertexAttrib4fv(index, v);
  CHECK_ERROR();
  _glptr_glVertexAttrib4fv = _impl_glVertexAttrib4fv;
}
PFN_glVertexAttrib4fv _glptr_glVertexAttrib4fv = _impl_glVertexAttrib4fv;

static void GL_APIENTRY _impl_glPixelMapusv (GLenum map, GLsizei mapsize, const GLushort * values) {
  printf("* glPixelMapusv\n");
  _glptr_glPixelMapusv = (PFN_glPixelMapusv)GalogenGetProcAddress("glPixelMapusv");
   _glptr_glPixelMapusv(map, mapsize, values);
  CHECK_ERROR();
  _glptr_glPixelMapusv = _impl_glPixelMapusv;
}
PFN_glPixelMapusv _glptr_glPixelMapusv = _impl_glPixelMapusv;

static void GL_APIENTRY _impl_glGetProgramivARB (GLenum target, GLenum pname, GLint * params) {
  printf("* glGetProgramivARB\n");
  _glptr_glGetProgramivARB = (PFN_glGetProgramivARB)GalogenGetProcAddress("glGetProgramivARB");
   _glptr_glGetProgramivARB(target, pname, params);
  CHECK_ERROR();
  _glptr_glGetProgramivARB = _impl_glGetProgramivARB;
}
PFN_glGetProgramivARB _glptr_glGetProgramivARB = _impl_glGetProgramivARB;

static void GL_APIENTRY _impl_glShadeModel (GLenum mode) {
  printf("* glShadeModel\n");
  _glptr_glShadeModel = (PFN_glShadeModel)GalogenGetProcAddress("glShadeModel");
   _glptr_glShadeModel(mode);
  CHECK_ERROR();
  _glptr_glShadeModel = _impl_glShadeModel;
}
PFN_glShadeModel _glptr_glShadeModel = _impl_glShadeModel;

static void GL_APIENTRY _impl_glVertex2d (GLdouble x, GLdouble y) {
  printf("* glVertex2d\n");
  _glptr_glVertex2d = (PFN_glVertex2d)GalogenGetProcAddress("glVertex2d");
   _glptr_glVertex2d(x, y);
  CHECK_ERROR();
  _glptr_glVertex2d = _impl_glVertex2d;
}
PFN_glVertex2d _glptr_glVertex2d = _impl_glVertex2d;

static void GL_APIENTRY _impl_glTexCoord2s (GLshort s, GLshort t) {
  printf("* glTexCoord2s\n");
  _glptr_glTexCoord2s = (PFN_glTexCoord2s)GalogenGetProcAddress("glTexCoord2s");
   _glptr_glTexCoord2s(s, t);
  CHECK_ERROR();
  _glptr_glTexCoord2s = _impl_glTexCoord2s;
}
PFN_glTexCoord2s _glptr_glTexCoord2s = _impl_glTexCoord2s;

static void GL_APIENTRY _impl_glUniformMatrix4fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) {
  printf("* glUniformMatrix4fv\n");
  _glptr_glUniformMatrix4fv = (PFN_glUniformMatrix4fv)GalogenGetProcAddress("glUniformMatrix4fv");
   _glptr_glUniformMatrix4fv(location, count, transpose, value);
  CHECK_ERROR();
  _glptr_glUniformMatrix4fv = _impl_glUniformMatrix4fv;
}
PFN_glUniformMatrix4fv _glptr_glUniformMatrix4fv = _impl_glUniformMatrix4fv;

static void GL_APIENTRY _impl_glColor3s (GLshort red, GLshort green, GLshort blue) {
  printf("* glColor3s\n");
  _glptr_glColor3s = (PFN_glColor3s)GalogenGetProcAddress("glColor3s");
   _glptr_glColor3s(red, green, blue);
  CHECK_ERROR();
  _glptr_glColor3s = _impl_glColor3s;
}
PFN_glColor3s _glptr_glColor3s = _impl_glColor3s;

static void GL_APIENTRY _impl_glVertexAttrib4d (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) {
  printf("* glVertexAttrib4d\n");
  _glptr_glVertexAttrib4d = (PFN_glVertexAttrib4d)GalogenGetProcAddress("glVertexAttrib4d");
   _glptr_glVertexAttrib4d(index, x, y, z, w);
  CHECK_ERROR();
  _glptr_glVertexAttrib4d = _impl_glVertexAttrib4d;
}
PFN_glVertexAttrib4d _glptr_glVertexAttrib4d = _impl_glVertexAttrib4d;

static void GL_APIENTRY _impl_glNormal3i (GLint nx, GLint ny, GLint nz) {
  printf("* glNormal3i\n");
  _glptr_glNormal3i = (PFN_glNormal3i)GalogenGetProcAddress("glNormal3i");
   _glptr_glNormal3i(nx, ny, nz);
  CHECK_ERROR();
  _glptr_glNormal3i = _impl_glNormal3i;
}
PFN_glNormal3i _glptr_glNormal3i = _impl_glNormal3i;

static void GL_APIENTRY _impl_glColor3iv (const GLint * v) {
  printf("* glColor3iv\n");
  _glptr_glColor3iv = (PFN_glColor3iv)GalogenGetProcAddress("glColor3iv");
   _glptr_glColor3iv(v);
  CHECK_ERROR();
  _glptr_glColor3iv = _impl_glColor3iv;
}
PFN_glColor3iv _glptr_glColor3iv = _impl_glColor3iv;

static void GL_APIENTRY _impl_glMap2d (GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble * points) {
  printf("* glMap2d\n");
  _glptr_glMap2d = (PFN_glMap2d)GalogenGetProcAddress("glMap2d");
   _glptr_glMap2d(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
  CHECK_ERROR();
  _glptr_glMap2d = _impl_glMap2d;
}
PFN_glMap2d _glptr_glMap2d = _impl_glMap2d;

static void GL_APIENTRY _impl_glRasterPos4sv (const GLshort * v) {
  printf("* glRasterPos4sv\n");
  _glptr_glRasterPos4sv = (PFN_glRasterPos4sv)GalogenGetProcAddress("glRasterPos4sv");
   _glptr_glRasterPos4sv(v);
  CHECK_ERROR();
  _glptr_glRasterPos4sv = _impl_glRasterPos4sv;
}
PFN_glRasterPos4sv _glptr_glRasterPos4sv = _impl_glRasterPos4sv;

static void GL_APIENTRY _impl_glGetShaderInfoLog (GLuint shader, GLsizei bufSize, GLsizei * length, GLchar * infoLog) {
  printf("* glGetShaderInfoLog\n");
  _glptr_glGetShaderInfoLog = (PFN_glGetShaderInfoLog)GalogenGetProcAddress("glGetShaderInfoLog");
   _glptr_glGetShaderInfoLog(shader, bufSize, length, infoLog);
  CHECK_ERROR();
  _glptr_glGetShaderInfoLog = _impl_glGetShaderInfoLog;
}
PFN_glGetShaderInfoLog _glptr_glGetShaderInfoLog = _impl_glGetShaderInfoLog;

static void GL_APIENTRY _impl_glDisable (GLenum cap) {
  printf("* glDisable\n");
  _glptr_glDisable = (PFN_glDisable)GalogenGetProcAddress("glDisable");
   _glptr_glDisable(cap);
  CHECK_ERROR();
  _glptr_glDisable = _impl_glDisable;
}
PFN_glDisable _glptr_glDisable = _impl_glDisable;

static void GL_APIENTRY _impl_glLightModelfv (GLenum pname, const GLfloat * params) {
  printf("* glLightModelfv\n");
  _glptr_glLightModelfv = (PFN_glLightModelfv)GalogenGetProcAddress("glLightModelfv");
   _glptr_glLightModelfv(pname, params);
  CHECK_ERROR();
  _glptr_glLightModelfv = _impl_glLightModelfv;
}
PFN_glLightModelfv _glptr_glLightModelfv = _impl_glLightModelfv;

static void GL_APIENTRY _impl_glTexParameterf (GLenum target, GLenum pname, GLfloat param) {
  printf("* glTexParameterf\n");
  _glptr_glTexParameterf = (PFN_glTexParameterf)GalogenGetProcAddress("glTexParameterf");
   _glptr_glTexParameterf(target, pname, param);
  CHECK_ERROR();
  _glptr_glTexParameterf = _impl_glTexParameterf;
}
PFN_glTexParameterf _glptr_glTexParameterf = _impl_glTexParameterf;

static void GL_APIENTRY _impl_glVertexAttrib4sv (GLuint index, const GLshort * v) {
  printf("* glVertexAttrib4sv\n");
  _glptr_glVertexAttrib4sv = (PFN_glVertexAttrib4sv)GalogenGetProcAddress("glVertexAttrib4sv");
   _glptr_glVertexAttrib4sv(index, v);
  CHECK_ERROR();
  _glptr_glVertexAttrib4sv = _impl_glVertexAttrib4sv;
}
PFN_glVertexAttrib4sv _glptr_glVertexAttrib4sv = _impl_glVertexAttrib4sv;

static void GL_APIENTRY _impl_glBlendFunc (GLenum sfactor, GLenum dfactor) {
  printf("* glBlendFunc\n");
  _glptr_glBlendFunc = (PFN_glBlendFunc)GalogenGetProcAddress("glBlendFunc");
   _glptr_glBlendFunc(sfactor, dfactor);
  CHECK_ERROR();
  _glptr_glBlendFunc = _impl_glBlendFunc;
}
PFN_glBlendFunc _glptr_glBlendFunc = _impl_glBlendFunc;

static void GL_APIENTRY _impl_glProgramLocalParameter4fARB (GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) {
  printf("* glProgramLocalParameter4fARB\n");
  _glptr_glProgramLocalParameter4fARB = (PFN_glProgramLocalParameter4fARB)GalogenGetProcAddress("glProgramLocalParameter4fARB");
   _glptr_glProgramLocalParameter4fARB(target, index, x, y, z, w);
  CHECK_ERROR();
  _glptr_glProgramLocalParameter4fARB = _impl_glProgramLocalParameter4fARB;
}
PFN_glProgramLocalParameter4fARB _glptr_glProgramLocalParameter4fARB = _impl_glProgramLocalParameter4fARB;

static void GL_APIENTRY _impl_glCopyTexSubImage2D (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height) {
  printf("* glCopyTexSubImage2D\n");
  _glptr_glCopyTexSubImage2D = (PFN_glCopyTexSubImage2D)GalogenGetProcAddress("glCopyTexSubImage2D");
   _glptr_glCopyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height);
  CHECK_ERROR();
  _glptr_glCopyTexSubImage2D = _impl_glCopyTexSubImage2D;
}
PFN_glCopyTexSubImage2D _glptr_glCopyTexSubImage2D = _impl_glCopyTexSubImage2D;

static void GL_APIENTRY _impl_glColor3dv (const GLdouble * v) {
  printf("* glColor3dv\n");
  _glptr_glColor3dv = (PFN_glColor3dv)GalogenGetProcAddress("glColor3dv");
   _glptr_glColor3dv(v);
  CHECK_ERROR();
  _glptr_glColor3dv = _impl_glColor3dv;
}
PFN_glColor3dv _glptr_glColor3dv = _impl_glColor3dv;

static void GL_APIENTRY _impl_glIndexi (GLint c) {
  printf("* glIndexi\n");
  _glptr_glIndexi = (PFN_glIndexi)GalogenGetProcAddress("glIndexi");
   _glptr_glIndexi(c);
  CHECK_ERROR();
  _glptr_glIndexi = _impl_glIndexi;
}
PFN_glIndexi _glptr_glIndexi = _impl_glIndexi;

static void GL_APIENTRY _impl_glGetQueryObjectiv (GLuint id, GLenum pname, GLint * params) {
  printf("* glGetQueryObjectiv\n");
  _glptr_glGetQueryObjectiv = (PFN_glGetQueryObjectiv)GalogenGetProcAddress("glGetQueryObjectiv");
   _glptr_glGetQueryObjectiv(id, pname, params);
  CHECK_ERROR();
  _glptr_glGetQueryObjectiv = _impl_glGetQueryObjectiv;
}
PFN_glGetQueryObjectiv _glptr_glGetQueryObjectiv = _impl_glGetQueryObjectiv;

static void GL_APIENTRY _impl_glDepthFunc (GLenum func) {
  printf("* glDepthFunc\n");
  _glptr_glDepthFunc = (PFN_glDepthFunc)GalogenGetProcAddress("glDepthFunc");
   _glptr_glDepthFunc(func);
  CHECK_ERROR();
  _glptr_glDepthFunc = _impl_glDepthFunc;
}
PFN_glDepthFunc _glptr_glDepthFunc = _impl_glDepthFunc;

static void GL_APIENTRY _impl_glVertexAttrib4uiv (GLuint index, const GLuint * v) {
  printf("* glVertexAttrib4uiv\n");
  _glptr_glVertexAttrib4uiv = (PFN_glVertexAttrib4uiv)GalogenGetProcAddress("glVertexAttrib4uiv");
   _glptr_glVertexAttrib4uiv(index, v);
  CHECK_ERROR();
  _glptr_glVertexAttrib4uiv = _impl_glVertexAttrib4uiv;
}
PFN_glVertexAttrib4uiv _glptr_glVertexAttrib4uiv = _impl_glVertexAttrib4uiv;

static void GL_APIENTRY _impl_glRasterPos4iv (const GLint * v) {
  printf("* glRasterPos4iv\n");
  _glptr_glRasterPos4iv = (PFN_glRasterPos4iv)GalogenGetProcAddress("glRasterPos4iv");
   _glptr_glRasterPos4iv(v);
  CHECK_ERROR();
  _glptr_glRasterPos4iv = _impl_glRasterPos4iv;
}
PFN_glRasterPos4iv _glptr_glRasterPos4iv = _impl_glRasterPos4iv;

static void GL_APIENTRY _impl_glEdgeFlagv (const GLboolean * flag) {
  printf("* glEdgeFlagv\n");
  _glptr_glEdgeFlagv = (PFN_glEdgeFlagv)GalogenGetProcAddress("glEdgeFlagv");
   _glptr_glEdgeFlagv(flag);
  CHECK_ERROR();
  _glptr_glEdgeFlagv = _impl_glEdgeFlagv;
}
PFN_glEdgeFlagv _glptr_glEdgeFlagv = _impl_glEdgeFlagv;

static void GL_APIENTRY _impl_glTexCoord2i (GLint s, GLint t) {
  printf("* glTexCoord2i\n");
  _glptr_glTexCoord2i = (PFN_glTexCoord2i)GalogenGetProcAddress("glTexCoord2i");
   _glptr_glTexCoord2i(s, t);
  CHECK_ERROR();
  _glptr_glTexCoord2i = _impl_glTexCoord2i;
}
PFN_glTexCoord2i _glptr_glTexCoord2i = _impl_glTexCoord2i;

static void GL_APIENTRY _impl_glVertex2s (GLshort x, GLshort y) {
  printf("* glVertex2s\n");
  _glptr_glVertex2s = (PFN_glVertex2s)GalogenGetProcAddress("glVertex2s");
   _glptr_glVertex2s(x, y);
  CHECK_ERROR();
  _glptr_glVertex2s = _impl_glVertex2s;
}
PFN_glVertex2s _glptr_glVertex2s = _impl_glVertex2s;

static void GL_APIENTRY _impl_glCompressedTexSubImage2DARB (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void * data) {
  printf("* glCompressedTexSubImage2DARB\n");
  _glptr_glCompressedTexSubImage2DARB = (PFN_glCompressedTexSubImage2DARB)GalogenGetProcAddress("glCompressedTexSubImage2DARB");
   _glptr_glCompressedTexSubImage2DARB(target, level, xoffset, yoffset, width, height, format, imageSize, data);
  CHECK_ERROR();
  _glptr_glCompressedTexSubImage2DARB = _impl_glCompressedTexSubImage2DARB;
}
PFN_glCompressedTexSubImage2DARB _glptr_glCompressedTexSubImage2DARB = _impl_glCompressedTexSubImage2DARB;

static void GL_APIENTRY _impl_glMultiTexCoord1dv (GLenum target, const GLdouble * v) {
  printf("* glMultiTexCoord1dv\n");
  _glptr_glMultiTexCoord1dv = (PFN_glMultiTexCoord1dv)GalogenGetProcAddress("glMultiTexCoord1dv");
   _glptr_glMultiTexCoord1dv(target, v);
  CHECK_ERROR();
  _glptr_glMultiTexCoord1dv = _impl_glMultiTexCoord1dv;
}
PFN_glMultiTexCoord1dv _glptr_glMultiTexCoord1dv = _impl_glMultiTexCoord1dv;

static void GL_APIENTRY _impl_glMaterialf (GLenum face, GLenum pname, GLfloat param) {
  printf("* glMaterialf\n");
  _glptr_glMaterialf = (PFN_glMaterialf)GalogenGetProcAddress("glMaterialf");
   _glptr_glMaterialf(face, pname, param);
  CHECK_ERROR();
  _glptr_glMaterialf = _impl_glMaterialf;
}
PFN_glMaterialf _glptr_glMaterialf = _impl_glMaterialf;

static void GL_APIENTRY _impl_glDeleteLists (GLuint list, GLsizei range) {
  printf("* glDeleteLists\n");
  _glptr_glDeleteLists = (PFN_glDeleteLists)GalogenGetProcAddress("glDeleteLists");
   _glptr_glDeleteLists(list, range);
  CHECK_ERROR();
  _glptr_glDeleteLists = _impl_glDeleteLists;
}
PFN_glDeleteLists _glptr_glDeleteLists = _impl_glDeleteLists;

static void GL_APIENTRY _impl_glTexImage2D (GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void * pixels) {
  printf("* glTexImage2D\n");
  _glptr_glTexImage2D = (PFN_glTexImage2D)GalogenGetProcAddress("glTexImage2D");
   _glptr_glTexImage2D(target, level, internalformat, width, height, border, format, type, pixels);
  CHECK_ERROR();
  _glptr_glTexImage2D = _impl_glTexImage2D;
}
PFN_glTexImage2D _glptr_glTexImage2D = _impl_glTexImage2D;

static void GL_APIENTRY _impl_glGetFramebufferAttachmentParameteriv (GLenum target, GLenum attachment, GLenum pname, GLint * params) {
  printf("* glGetFramebufferAttachmentParameteriv\n");
  _glptr_glGetFramebufferAttachmentParameteriv = (PFN_glGetFramebufferAttachmentParameteriv)GalogenGetProcAddress("glGetFramebufferAttachmentParameteriv");
   _glptr_glGetFramebufferAttachmentParameteriv(target, attachment, pname, params);
  CHECK_ERROR();
  _glptr_glGetFramebufferAttachmentParameteriv = _impl_glGetFramebufferAttachmentParameteriv;
}
PFN_glGetFramebufferAttachmentParameteriv _glptr_glGetFramebufferAttachmentParameteriv = _impl_glGetFramebufferAttachmentParameteriv;

static GLuint GL_APIENTRY _impl_glGenLists (GLsizei range) {
  printf("* glGenLists\n");
  _glptr_glGenLists = (PFN_glGenLists)GalogenGetProcAddress("glGenLists");
  return _glptr_glGenLists(range);
  CHECK_ERROR();
  _glptr_glGenLists = _impl_glGenLists;
}
PFN_glGenLists _glptr_glGenLists = _impl_glGenLists;

static void GL_APIENTRY _impl_glRasterPos4i (GLint x, GLint y, GLint z, GLint w) {
  printf("* glRasterPos4i\n");
  _glptr_glRasterPos4i = (PFN_glRasterPos4i)GalogenGetProcAddress("glRasterPos4i");
   _glptr_glRasterPos4i(x, y, z, w);
  CHECK_ERROR();
  _glptr_glRasterPos4i = _impl_glRasterPos4i;
}
PFN_glRasterPos4i _glptr_glRasterPos4i = _impl_glRasterPos4i;

static void GL_APIENTRY _impl_glMultiTexCoord2iv (GLenum target, const GLint * v) {
  printf("* glMultiTexCoord2iv\n");
  _glptr_glMultiTexCoord2iv = (PFN_glMultiTexCoord2iv)GalogenGetProcAddress("glMultiTexCoord2iv");
   _glptr_glMultiTexCoord2iv(target, v);
  CHECK_ERROR();
  _glptr_glMultiTexCoord2iv = _impl_glMultiTexCoord2iv;
}
PFN_glMultiTexCoord2iv _glptr_glMultiTexCoord2iv = _impl_glMultiTexCoord2iv;

static void GL_APIENTRY _impl_glColor3ub (GLubyte red, GLubyte green, GLubyte blue) {
  printf("* glColor3ub\n");
  _glptr_glColor3ub = (PFN_glColor3ub)GalogenGetProcAddress("glColor3ub");
   _glptr_glColor3ub(red, green, blue);
  CHECK_ERROR();
  _glptr_glColor3ub = _impl_glColor3ub;
}
PFN_glColor3ub _glptr_glColor3ub = _impl_glColor3ub;

static void GL_APIENTRY _impl_glColor3bv (const GLbyte * v) {
  printf("* glColor3bv\n");
  _glptr_glColor3bv = (PFN_glColor3bv)GalogenGetProcAddress("glColor3bv");
   _glptr_glColor3bv(v);
  CHECK_ERROR();
  _glptr_glColor3bv = _impl_glColor3bv;
}
PFN_glColor3bv _glptr_glColor3bv = _impl_glColor3bv;

static void GL_APIENTRY _impl_glMultiTexCoord3s (GLenum target, GLshort s, GLshort t, GLshort r) {
  printf("* glMultiTexCoord3s\n");
  _glptr_glMultiTexCoord3s = (PFN_glMultiTexCoord3s)GalogenGetProcAddress("glMultiTexCoord3s");
   _glptr_glMultiTexCoord3s(target, s, t, r);
  CHECK_ERROR();
  _glptr_glMultiTexCoord3s = _impl_glMultiTexCoord3s;
}
PFN_glMultiTexCoord3s _glptr_glMultiTexCoord3s = _impl_glMultiTexCoord3s;

static void GL_APIENTRY _impl_glGetMaterialfv (GLenum face, GLenum pname, GLfloat * params) {
  printf("* glGetMaterialfv\n");
  _glptr_glGetMaterialfv = (PFN_glGetMaterialfv)GalogenGetProcAddress("glGetMaterialfv");
   _glptr_glGetMaterialfv(face, pname, params);
  CHECK_ERROR();
  _glptr_glGetMaterialfv = _impl_glGetMaterialfv;
}
PFN_glGetMaterialfv _glptr_glGetMaterialfv = _impl_glGetMaterialfv;

static void GL_APIENTRY _impl_glViewport (GLint x, GLint y, GLsizei width, GLsizei height) {
  printf("* glViewport\n");
  _glptr_glViewport = (PFN_glViewport)GalogenGetProcAddress("glViewport");
   _glptr_glViewport(x, y, width, height);
  CHECK_ERROR();
  _glptr_glViewport = _impl_glViewport;
}
PFN_glViewport _glptr_glViewport = _impl_glViewport;

static void GL_APIENTRY _impl_glUniform2f (GLint location, GLfloat v0, GLfloat v1) {
  printf("* glUniform2f\n");
  _glptr_glUniform2f = (PFN_glUniform2f)GalogenGetProcAddress("glUniform2f");
   _glptr_glUniform2f(location, v0, v1);
  CHECK_ERROR();
  _glptr_glUniform2f = _impl_glUniform2f;
}
PFN_glUniform2f _glptr_glUniform2f = _impl_glUniform2f;

static void GL_APIENTRY _impl_glTranslated (GLdouble x, GLdouble y, GLdouble z) {
  printf("* glTranslated\n");
  _glptr_glTranslated = (PFN_glTranslated)GalogenGetProcAddress("glTranslated");
   _glptr_glTranslated(x, y, z);
  CHECK_ERROR();
  _glptr_glTranslated = _impl_glTranslated;
}
PFN_glTranslated _glptr_glTranslated = _impl_glTranslated;

static void GL_APIENTRY _impl_glVertex3sv (const GLshort * v) {
  printf("* glVertex3sv\n");
  _glptr_glVertex3sv = (PFN_glVertex3sv)GalogenGetProcAddress("glVertex3sv");
   _glptr_glVertex3sv(v);
  CHECK_ERROR();
  _glptr_glVertex3sv = _impl_glVertex3sv;
}
PFN_glVertex3sv _glptr_glVertex3sv = _impl_glVertex3sv;

static void GL_APIENTRY _impl_glUniform3f (GLint location, GLfloat v0, GLfloat v1, GLfloat v2) {
  printf("* glUniform3f\n");
  _glptr_glUniform3f = (PFN_glUniform3f)GalogenGetProcAddress("glUniform3f");
   _glptr_glUniform3f(location, v0, v1, v2);
  CHECK_ERROR();
  _glptr_glUniform3f = _impl_glUniform3f;
}
PFN_glUniform3f _glptr_glUniform3f = _impl_glUniform3f;

static void GL_APIENTRY _impl_glGetMapfv (GLenum target, GLenum query, GLfloat * v) {
  printf("* glGetMapfv\n");
  _glptr_glGetMapfv = (PFN_glGetMapfv)GalogenGetProcAddress("glGetMapfv");
   _glptr_glGetMapfv(target, query, v);
  CHECK_ERROR();
  _glptr_glGetMapfv = _impl_glGetMapfv;
}
PFN_glGetMapfv _glptr_glGetMapfv = _impl_glGetMapfv;

static void GL_APIENTRY _impl_glVertexAttrib4Nub (GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w) {
  printf("* glVertexAttrib4Nub\n");
  _glptr_glVertexAttrib4Nub = (PFN_glVertexAttrib4Nub)GalogenGetProcAddress("glVertexAttrib4Nub");
   _glptr_glVertexAttrib4Nub(index, x, y, z, w);
  CHECK_ERROR();
  _glptr_glVertexAttrib4Nub = _impl_glVertexAttrib4Nub;
}
PFN_glVertexAttrib4Nub _glptr_glVertexAttrib4Nub = _impl_glVertexAttrib4Nub;

static void GL_APIENTRY _impl_glSecondaryColor3uiv (const GLuint * v) {
  printf("* glSecondaryColor3uiv\n");
  _glptr_glSecondaryColor3uiv = (PFN_glSecondaryColor3uiv)GalogenGetProcAddress("glSecondaryColor3uiv");
   _glptr_glSecondaryColor3uiv(v);
  CHECK_ERROR();
  _glptr_glSecondaryColor3uiv = _impl_glSecondaryColor3uiv;
}
PFN_glSecondaryColor3uiv _glptr_glSecondaryColor3uiv = _impl_glSecondaryColor3uiv;

static void GL_APIENTRY _impl_glColor4usv (const GLushort * v) {
  printf("* glColor4usv\n");
  _glptr_glColor4usv = (PFN_glColor4usv)GalogenGetProcAddress("glColor4usv");
   _glptr_glColor4usv(v);
  CHECK_ERROR();
  _glptr_glColor4usv = _impl_glColor4usv;
}
PFN_glColor4usv _glptr_glColor4usv = _impl_glColor4usv;

static void GL_APIENTRY _impl_glFrontFace (GLenum mode) {
  printf("* glFrontFace\n");
  _glptr_glFrontFace = (PFN_glFrontFace)GalogenGetProcAddress("glFrontFace");
   _glptr_glFrontFace(mode);
  CHECK_ERROR();
  _glptr_glFrontFace = _impl_glFrontFace;
}
PFN_glFrontFace _glptr_glFrontFace = _impl_glFrontFace;

static GLboolean GL_APIENTRY _impl_glIsList (GLuint list) {
  printf("* glIsList\n");
  _glptr_glIsList = (PFN_glIsList)GalogenGetProcAddress("glIsList");
  return _glptr_glIsList(list);
  CHECK_ERROR();
  _glptr_glIsList = _impl_glIsList;
}
PFN_glIsList _glptr_glIsList = _impl_glIsList;

static const GLubyte  * GL_APIENTRY _impl_glGetString (GLenum name) {
  printf("* glGetString\n");
  _glptr_glGetString = (PFN_glGetString)GalogenGetProcAddress("glGetString");
  return _glptr_glGetString(name);
  CHECK_ERROR();
  _glptr_glGetString = _impl_glGetString;
}
PFN_glGetString _glptr_glGetString = _impl_glGetString;

static void GL_APIENTRY _impl_glDepthRange (GLdouble n, GLdouble f) {
  printf("* glDepthRange\n");
  _glptr_glDepthRange = (PFN_glDepthRange)GalogenGetProcAddress("glDepthRange");
   _glptr_glDepthRange(n, f);
  CHECK_ERROR();
  _glptr_glDepthRange = _impl_glDepthRange;
}
PFN_glDepthRange _glptr_glDepthRange = _impl_glDepthRange;

static void GL_APIENTRY _impl_glGetUniformiv (GLuint program, GLint location, GLint * params) {
  printf("* glGetUniformiv\n");
  _glptr_glGetUniformiv = (PFN_glGetUniformiv)GalogenGetProcAddress("glGetUniformiv");
   _glptr_glGetUniformiv(program, location, params);
  CHECK_ERROR();
  _glptr_glGetUniformiv = _impl_glGetUniformiv;
}
PFN_glGetUniformiv _glptr_glGetUniformiv = _impl_glGetUniformiv;

static void GL_APIENTRY _impl_glClear (GLbitfield mask) {
  printf("* glClear\n");
  _glptr_glClear = (PFN_glClear)GalogenGetProcAddress("glClear");
   _glptr_glClear(mask);
  CHECK_ERROR();
  _glptr_glClear = _impl_glClear;
}
PFN_glClear _glptr_glClear = _impl_glClear;

static void GL_APIENTRY _impl_glGetClipPlane (GLenum plane, GLdouble * equation) {
  printf("* glGetClipPlane\n");
  _glptr_glGetClipPlane = (PFN_glGetClipPlane)GalogenGetProcAddress("glGetClipPlane");
   _glptr_glGetClipPlane(plane, equation);
  CHECK_ERROR();
  _glptr_glGetClipPlane = _impl_glGetClipPlane;
}
PFN_glGetClipPlane _glptr_glGetClipPlane = _impl_glGetClipPlane;

static void GL_APIENTRY _impl_glBlitFramebufferEXT (GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter) {
  printf("* glBlitFramebufferEXT\n");
  _glptr_glBlitFramebufferEXT = (PFN_glBlitFramebufferEXT)GalogenGetProcAddress("glBlitFramebufferEXT");
   _glptr_glBlitFramebufferEXT(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
  CHECK_ERROR();
  _glptr_glBlitFramebufferEXT = _impl_glBlitFramebufferEXT;
}
PFN_glBlitFramebufferEXT _glptr_glBlitFramebufferEXT = _impl_glBlitFramebufferEXT;

static void GL_APIENTRY _impl_glPixelZoom (GLfloat xfactor, GLfloat yfactor) {
  printf("* glPixelZoom\n");
  _glptr_glPixelZoom = (PFN_glPixelZoom)GalogenGetProcAddress("glPixelZoom");
   _glptr_glPixelZoom(xfactor, yfactor);
  CHECK_ERROR();
  _glptr_glPixelZoom = _impl_glPixelZoom;
}
PFN_glPixelZoom _glptr_glPixelZoom = _impl_glPixelZoom;

static void GL_APIENTRY _impl_glNewList (GLuint list, GLenum mode) {
  printf("* glNewList\n");
  _glptr_glNewList = (PFN_glNewList)GalogenGetProcAddress("glNewList");
   _glptr_glNewList(list, mode);
  CHECK_ERROR();
  _glptr_glNewList = _impl_glNewList;
}
PFN_glNewList _glptr_glNewList = _impl_glNewList;

static void GL_APIENTRY _impl_glMultiTexCoord1sv (GLenum target, const GLshort * v) {
  printf("* glMultiTexCoord1sv\n");
  _glptr_glMultiTexCoord1sv = (PFN_glMultiTexCoord1sv)GalogenGetProcAddress("glMultiTexCoord1sv");
   _glptr_glMultiTexCoord1sv(target, v);
  CHECK_ERROR();
  _glptr_glMultiTexCoord1sv = _impl_glMultiTexCoord1sv;
}
PFN_glMultiTexCoord1sv _glptr_glMultiTexCoord1sv = _impl_glMultiTexCoord1sv;

static GLenum GL_APIENTRY _impl_glGetError () {
  printf("* glGetError\n");
  _glptr_glGetError = (PFN_glGetError)GalogenGetProcAddress("glGetError");
  return _glptr_glGetError();
}
PFN_glGetError _glptr_glGetError = _impl_glGetError;

static void GL_APIENTRY _impl_glGetIntegerv (GLenum pname, GLint * data) {
  printf("* glGetIntegerv\n");
  _glptr_glGetIntegerv = (PFN_glGetIntegerv)GalogenGetProcAddress("glGetIntegerv");
   _glptr_glGetIntegerv(pname, data);
  CHECK_ERROR();
  _glptr_glGetIntegerv = _impl_glGetIntegerv;
}
PFN_glGetIntegerv _glptr_glGetIntegerv = _impl_glGetIntegerv;

static void GL_APIENTRY _impl_glPointParameteri (GLenum pname, GLint param) {
  printf("* glPointParameteri\n");
  _glptr_glPointParameteri = (PFN_glPointParameteri)GalogenGetProcAddress("glPointParameteri");
   _glptr_glPointParameteri(pname, param);
  CHECK_ERROR();
  _glptr_glPointParameteri = _impl_glPointParameteri;
}
PFN_glPointParameteri _glptr_glPointParameteri = _impl_glPointParameteri;

static void GL_APIENTRY _impl_glBegin (GLenum mode) {
  printf("* glBegin\n");
  _glptr_glBegin = (PFN_glBegin)GalogenGetProcAddress("glBegin");
   _glptr_glBegin(mode);
  CHECK_ERROR();
  _glptr_glBegin = _impl_glBegin;
}
PFN_glBegin _glptr_glBegin = _impl_glBegin;

static void GL_APIENTRY _impl_glVertexAttrib1fARB (GLuint index, GLfloat x) {
  printf("* glVertexAttrib1fARB\n");
  _glptr_glVertexAttrib1fARB = (PFN_glVertexAttrib1fARB)GalogenGetProcAddress("glVertexAttrib1fARB");
   _glptr_glVertexAttrib1fARB(index, x);
  CHECK_ERROR();
  _glptr_glVertexAttrib1fARB = _impl_glVertexAttrib1fARB;
}
PFN_glVertexAttrib1fARB _glptr_glVertexAttrib1fARB = _impl_glVertexAttrib1fARB;

static void GL_APIENTRY _impl_glClearColor (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha) {
  printf("* glClearColor\n");
  _glptr_glClearColor = (PFN_glClearColor)GalogenGetProcAddress("glClearColor");
   _glptr_glClearColor(red, green, blue, alpha);
  CHECK_ERROR();
  _glptr_glClearColor = _impl_glClearColor;
}
PFN_glClearColor _glptr_glClearColor = _impl_glClearColor;

static void GL_APIENTRY _impl_glProgramLocalParameter4dvARB (GLenum target, GLuint index, const GLdouble * params) {
  printf("* glProgramLocalParameter4dvARB\n");
  _glptr_glProgramLocalParameter4dvARB = (PFN_glProgramLocalParameter4dvARB)GalogenGetProcAddress("glProgramLocalParameter4dvARB");
   _glptr_glProgramLocalParameter4dvARB(target, index, params);
  CHECK_ERROR();
  _glptr_glProgramLocalParameter4dvARB = _impl_glProgramLocalParameter4dvARB;
}
PFN_glProgramLocalParameter4dvARB _glptr_glProgramLocalParameter4dvARB = _impl_glProgramLocalParameter4dvARB;

static void GL_APIENTRY _impl_glRasterPos3s (GLshort x, GLshort y, GLshort z) {
  printf("* glRasterPos3s\n");
  _glptr_glRasterPos3s = (PFN_glRasterPos3s)GalogenGetProcAddress("glRasterPos3s");
   _glptr_glRasterPos3s(x, y, z);
  CHECK_ERROR();
  _glptr_glRasterPos3s = _impl_glRasterPos3s;
}
PFN_glRasterPos3s _glptr_glRasterPos3s = _impl_glRasterPos3s;

static void GL_APIENTRY _impl_glWindowPos3iv (const GLint * v) {
  printf("* glWindowPos3iv\n");
  _glptr_glWindowPos3iv = (PFN_glWindowPos3iv)GalogenGetProcAddress("glWindowPos3iv");
   _glptr_glWindowPos3iv(v);
  CHECK_ERROR();
  _glptr_glWindowPos3iv = _impl_glWindowPos3iv;
}
PFN_glWindowPos3iv _glptr_glWindowPos3iv = _impl_glWindowPos3iv;

static void GL_APIENTRY _impl_glOrtho (GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar) {
  printf("* glOrtho\n");
  _glptr_glOrtho = (PFN_glOrtho)GalogenGetProcAddress("glOrtho");
   _glptr_glOrtho(left, right, bottom, top, zNear, zFar);
  CHECK_ERROR();
  _glptr_glOrtho = _impl_glOrtho;
}
PFN_glOrtho _glptr_glOrtho = _impl_glOrtho;

static void GL_APIENTRY _impl_glPixelStoref (GLenum pname, GLfloat param) {
  printf("* glPixelStoref\n");
  _glptr_glPixelStoref = (PFN_glPixelStoref)GalogenGetProcAddress("glPixelStoref");
   _glptr_glPixelStoref(pname, param);
  CHECK_ERROR();
  _glptr_glPixelStoref = _impl_glPixelStoref;
}
PFN_glPixelStoref _glptr_glPixelStoref = _impl_glPixelStoref;

static void GL_APIENTRY _impl_glVertexAttrib4bv (GLuint index, const GLbyte * v) {
  printf("* glVertexAttrib4bv\n");
  _glptr_glVertexAttrib4bv = (PFN_glVertexAttrib4bv)GalogenGetProcAddress("glVertexAttrib4bv");
   _glptr_glVertexAttrib4bv(index, v);
  CHECK_ERROR();
  _glptr_glVertexAttrib4bv = _impl_glVertexAttrib4bv;
}
PFN_glVertexAttrib4bv _glptr_glVertexAttrib4bv = _impl_glVertexAttrib4bv;

static void GL_APIENTRY _impl_glGetMaterialiv (GLenum face, GLenum pname, GLint * params) {
  printf("* glGetMaterialiv\n");
  _glptr_glGetMaterialiv = (PFN_glGetMaterialiv)GalogenGetProcAddress("glGetMaterialiv");
   _glptr_glGetMaterialiv(face, pname, params);
  CHECK_ERROR();
  _glptr_glGetMaterialiv = _impl_glGetMaterialiv;
}
PFN_glGetMaterialiv _glptr_glGetMaterialiv = _impl_glGetMaterialiv;

static void GL_APIENTRY _impl_glVertex4sv (const GLshort * v) {
  printf("* glVertex4sv\n");
  _glptr_glVertex4sv = (PFN_glVertex4sv)GalogenGetProcAddress("glVertex4sv");
   _glptr_glVertex4sv(v);
  CHECK_ERROR();
  _glptr_glVertex4sv = _impl_glVertex4sv;
}
PFN_glVertex4sv _glptr_glVertex4sv = _impl_glVertex4sv;

static void GL_APIENTRY _impl_glCompressedTexSubImage1D (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void * data) {
  printf("* glCompressedTexSubImage1D\n");
  _glptr_glCompressedTexSubImage1D = (PFN_glCompressedTexSubImage1D)GalogenGetProcAddress("glCompressedTexSubImage1D");
   _glptr_glCompressedTexSubImage1D(target, level, xoffset, width, format, imageSize, data);
  CHECK_ERROR();
  _glptr_glCompressedTexSubImage1D = _impl_glCompressedTexSubImage1D;
}
PFN_glCompressedTexSubImage1D _glptr_glCompressedTexSubImage1D = _impl_glCompressedTexSubImage1D;

static void GL_APIENTRY _impl_glEdgeFlagPointer (GLsizei stride, const void * pointer) {
  printf("* glEdgeFlagPointer\n");
  _glptr_glEdgeFlagPointer = (PFN_glEdgeFlagPointer)GalogenGetProcAddress("glEdgeFlagPointer");
   _glptr_glEdgeFlagPointer(stride, pointer);
  CHECK_ERROR();
  _glptr_glEdgeFlagPointer = _impl_glEdgeFlagPointer;
}
PFN_glEdgeFlagPointer _glptr_glEdgeFlagPointer = _impl_glEdgeFlagPointer;

static void GL_APIENTRY _impl_glVertex3s (GLshort x, GLshort y, GLshort z) {
  printf("* glVertex3s\n");
  _glptr_glVertex3s = (PFN_glVertex3s)GalogenGetProcAddress("glVertex3s");
   _glptr_glVertex3s(x, y, z);
  CHECK_ERROR();
  _glptr_glVertex3s = _impl_glVertex3s;
}
PFN_glVertex3s _glptr_glVertex3s = _impl_glVertex3s;

static void GL_APIENTRY _impl_glIndexs (GLshort c) {
  printf("* glIndexs\n");
  _glptr_glIndexs = (PFN_glIndexs)GalogenGetProcAddress("glIndexs");
   _glptr_glIndexs(c);
  CHECK_ERROR();
  _glptr_glIndexs = _impl_glIndexs;
}
PFN_glIndexs _glptr_glIndexs = _impl_glIndexs;

static void GL_APIENTRY _impl_glTexSubImage1D (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void * pixels) {
  printf("* glTexSubImage1D\n");
  _glptr_glTexSubImage1D = (PFN_glTexSubImage1D)GalogenGetProcAddress("glTexSubImage1D");
   _glptr_glTexSubImage1D(target, level, xoffset, width, format, type, pixels);
  CHECK_ERROR();
  _glptr_glTexSubImage1D = _impl_glTexSubImage1D;
}
PFN_glTexSubImage1D _glptr_glTexSubImage1D = _impl_glTexSubImage1D;

static void GL_APIENTRY _impl_glEnd () {
  printf("* glEnd\n");
  _glptr_glEnd = (PFN_glEnd)GalogenGetProcAddress("glEnd");
   _glptr_glEnd();
  CHECK_ERROR();
  _glptr_glEnd = _impl_glEnd;
}
PFN_glEnd _glptr_glEnd = _impl_glEnd;

static void GL_APIENTRY _impl_glVertexAttrib4NusvARB (GLuint index, const GLushort * v) {
  printf("* glVertexAttrib4NusvARB\n");
  _glptr_glVertexAttrib4NusvARB = (PFN_glVertexAttrib4NusvARB)GalogenGetProcAddress("glVertexAttrib4NusvARB");
   _glptr_glVertexAttrib4NusvARB(index, v);
  CHECK_ERROR();
  _glptr_glVertexAttrib4NusvARB = _impl_glVertexAttrib4NusvARB;
}
PFN_glVertexAttrib4NusvARB _glptr_glVertexAttrib4NusvARB = _impl_glVertexAttrib4NusvARB;

static void GL_APIENTRY _impl_glCullFace (GLenum mode) {
  printf("* glCullFace\n");
  _glptr_glCullFace = (PFN_glCullFace)GalogenGetProcAddress("glCullFace");
   _glptr_glCullFace(mode);
  CHECK_ERROR();
  _glptr_glCullFace = _impl_glCullFace;
}
PFN_glCullFace _glptr_glCullFace = _impl_glCullFace;

static void GL_APIENTRY _impl_glRasterPos2d (GLdouble x, GLdouble y) {
  printf("* glRasterPos2d\n");
  _glptr_glRasterPos2d = (PFN_glRasterPos2d)GalogenGetProcAddress("glRasterPos2d");
   _glptr_glRasterPos2d(x, y);
  CHECK_ERROR();
  _glptr_glRasterPos2d = _impl_glRasterPos2d;
}
PFN_glRasterPos2d _glptr_glRasterPos2d = _impl_glRasterPos2d;

static void GL_APIENTRY _impl_glGetTexLevelParameterfv (GLenum target, GLint level, GLenum pname, GLfloat * params) {
  printf("* glGetTexLevelParameterfv\n");
  _glptr_glGetTexLevelParameterfv = (PFN_glGetTexLevelParameterfv)GalogenGetProcAddress("glGetTexLevelParameterfv");
   _glptr_glGetTexLevelParameterfv(target, level, pname, params);
  CHECK_ERROR();
  _glptr_glGetTexLevelParameterfv = _impl_glGetTexLevelParameterfv;
}
PFN_glGetTexLevelParameterfv _glptr_glGetTexLevelParameterfv = _impl_glGetTexLevelParameterfv;

static void GL_APIENTRY _impl_glColor3f (GLfloat red, GLfloat green, GLfloat blue) {
  printf("* glColor3f\n");
  _glptr_glColor3f = (PFN_glColor3f)GalogenGetProcAddress("glColor3f");
   _glptr_glColor3f(red, green, blue);
  CHECK_ERROR();
  _glptr_glColor3f = _impl_glColor3f;
}
PFN_glColor3f _glptr_glColor3f = _impl_glColor3f;

static void GL_APIENTRY _impl_glVertex3f (GLfloat x, GLfloat y, GLfloat z) {
  printf("* glVertex3f\n");
  _glptr_glVertex3f = (PFN_glVertex3f)GalogenGetProcAddress("glVertex3f");
   _glptr_glVertex3f(x, y, z);
  CHECK_ERROR();
  _glptr_glVertex3f = _impl_glVertex3f;
}
PFN_glVertex3f _glptr_glVertex3f = _impl_glVertex3f;

static void GL_APIENTRY _impl_glEndList () {
  printf("* glEndList\n");
  _glptr_glEndList = (PFN_glEndList)GalogenGetProcAddress("glEndList");
   _glptr_glEndList();
  CHECK_ERROR();
  _glptr_glEndList = _impl_glEndList;
}
PFN_glEndList _glptr_glEndList = _impl_glEndList;

static void GL_APIENTRY _impl_glMultiTexCoord1fv (GLenum target, const GLfloat * v) {
  printf("* glMultiTexCoord1fv\n");
  _glptr_glMultiTexCoord1fv = (PFN_glMultiTexCoord1fv)GalogenGetProcAddress("glMultiTexCoord1fv");
   _glptr_glMultiTexCoord1fv(target, v);
  CHECK_ERROR();
  _glptr_glMultiTexCoord1fv = _impl_glMultiTexCoord1fv;
}
PFN_glMultiTexCoord1fv _glptr_glMultiTexCoord1fv = _impl_glMultiTexCoord1fv;

static void GL_APIENTRY _impl_glNormal3iv (const GLint * v) {
  printf("* glNormal3iv\n");
  _glptr_glNormal3iv = (PFN_glNormal3iv)GalogenGetProcAddress("glNormal3iv");
   _glptr_glNormal3iv(v);
  CHECK_ERROR();
  _glptr_glNormal3iv = _impl_glNormal3iv;
}
PFN_glNormal3iv _glptr_glNormal3iv = _impl_glNormal3iv;

static void GL_APIENTRY _impl_glVertexAttrib4bvARB (GLuint index, const GLbyte * v) {
  printf("* glVertexAttrib4bvARB\n");
  _glptr_glVertexAttrib4bvARB = (PFN_glVertexAttrib4bvARB)GalogenGetProcAddress("glVertexAttrib4bvARB");
   _glptr_glVertexAttrib4bvARB(index, v);
  CHECK_ERROR();
  _glptr_glVertexAttrib4bvARB = _impl_glVertexAttrib4bvARB;
}
PFN_glVertexAttrib4bvARB _glptr_glVertexAttrib4bvARB = _impl_glVertexAttrib4bvARB;

static void GL_APIENTRY _impl_glTexCoord4s (GLshort s, GLshort t, GLshort r, GLshort q) {
  printf("* glTexCoord4s\n");
  _glptr_glTexCoord4s = (PFN_glTexCoord4s)GalogenGetProcAddress("glTexCoord4s");
   _glptr_glTexCoord4s(s, t, r, q);
  CHECK_ERROR();
  _glptr_glTexCoord4s = _impl_glTexCoord4s;
}
PFN_glTexCoord4s _glptr_glTexCoord4s = _impl_glTexCoord4s;

static void GL_APIENTRY _impl_glVertex3i (GLint x, GLint y, GLint z) {
  printf("* glVertex3i\n");
  _glptr_glVertex3i = (PFN_glVertex3i)GalogenGetProcAddress("glVertex3i");
   _glptr_glVertex3i(x, y, z);
  CHECK_ERROR();
  _glptr_glVertex3i = _impl_glVertex3i;
}
PFN_glVertex3i _glptr_glVertex3i = _impl_glVertex3i;

static void GL_APIENTRY _impl_glSecondaryColor3f (GLfloat red, GLfloat green, GLfloat blue) {
  printf("* glSecondaryColor3f\n");
  _glptr_glSecondaryColor3f = (PFN_glSecondaryColor3f)GalogenGetProcAddress("glSecondaryColor3f");
   _glptr_glSecondaryColor3f(red, green, blue);
  CHECK_ERROR();
  _glptr_glSecondaryColor3f = _impl_glSecondaryColor3f;
}
PFN_glSecondaryColor3f _glptr_glSecondaryColor3f = _impl_glSecondaryColor3f;

static void GL_APIENTRY _impl_glClearDepth (GLdouble depth) {
  printf("* glClearDepth\n");
  _glptr_glClearDepth = (PFN_glClearDepth)GalogenGetProcAddress("glClearDepth");
   _glptr_glClearDepth(depth);
  CHECK_ERROR();
  _glptr_glClearDepth = _impl_glClearDepth;
}
PFN_glClearDepth _glptr_glClearDepth = _impl_glClearDepth;

static void GL_APIENTRY _impl_glEdgeFlag (GLboolean flag) {
  printf("* glEdgeFlag\n");
  _glptr_glEdgeFlag = (PFN_glEdgeFlag)GalogenGetProcAddress("glEdgeFlag");
   _glptr_glEdgeFlag(flag);
  CHECK_ERROR();
  _glptr_glEdgeFlag = _impl_glEdgeFlag;
}
PFN_glEdgeFlag _glptr_glEdgeFlag = _impl_glEdgeFlag;

static void GL_APIENTRY _impl_glLoadMatrixd (const GLdouble * m) {
  printf("* glLoadMatrixd\n");
  _glptr_glLoadMatrixd = (PFN_glLoadMatrixd)GalogenGetProcAddress("glLoadMatrixd");
   _glptr_glLoadMatrixd(m);
  CHECK_ERROR();
  _glptr_glLoadMatrixd = _impl_glLoadMatrixd;
}
PFN_glLoadMatrixd _glptr_glLoadMatrixd = _impl_glLoadMatrixd;

static void GL_APIENTRY _impl_glColor3i (GLint red, GLint green, GLint blue) {
  printf("* glColor3i\n");
  _glptr_glColor3i = (PFN_glColor3i)GalogenGetProcAddress("glColor3i");
   _glptr_glColor3i(red, green, blue);
  CHECK_ERROR();
  _glptr_glColor3i = _impl_glColor3i;
}
PFN_glColor3i _glptr_glColor3i = _impl_glColor3i;

static void GL_APIENTRY _impl_glTexCoord4d (GLdouble s, GLdouble t, GLdouble r, GLdouble q) {
  printf("* glTexCoord4d\n");
  _glptr_glTexCoord4d = (PFN_glTexCoord4d)GalogenGetProcAddress("glTexCoord4d");
   _glptr_glTexCoord4d(s, t, r, q);
  CHECK_ERROR();
  _glptr_glTexCoord4d = _impl_glTexCoord4d;
}
PFN_glTexCoord4d _glptr_glTexCoord4d = _impl_glTexCoord4d;

static void GL_APIENTRY _impl_glMultiTexCoord4sv (GLenum target, const GLshort * v) {
  printf("* glMultiTexCoord4sv\n");
  _glptr_glMultiTexCoord4sv = (PFN_glMultiTexCoord4sv)GalogenGetProcAddress("glMultiTexCoord4sv");
   _glptr_glMultiTexCoord4sv(target, v);
  CHECK_ERROR();
  _glptr_glMultiTexCoord4sv = _impl_glMultiTexCoord4sv;
}
PFN_glMultiTexCoord4sv _glptr_glMultiTexCoord4sv = _impl_glMultiTexCoord4sv;

static void GL_APIENTRY _impl_glNormal3sv (const GLshort * v) {
  printf("* glNormal3sv\n");
  _glptr_glNormal3sv = (PFN_glNormal3sv)GalogenGetProcAddress("glNormal3sv");
   _glptr_glNormal3sv(v);
  CHECK_ERROR();
  _glptr_glNormal3sv = _impl_glNormal3sv;
}
PFN_glNormal3sv _glptr_glNormal3sv = _impl_glNormal3sv;

static void GL_APIENTRY _impl_glVertexAttrib4Nbv (GLuint index, const GLbyte * v) {
  printf("* glVertexAttrib4Nbv\n");
  _glptr_glVertexAttrib4Nbv = (PFN_glVertexAttrib4Nbv)GalogenGetProcAddress("glVertexAttrib4Nbv");
   _glptr_glVertexAttrib4Nbv(index, v);
  CHECK_ERROR();
  _glptr_glVertexAttrib4Nbv = _impl_glVertexAttrib4Nbv;
}
PFN_glVertexAttrib4Nbv _glptr_glVertexAttrib4Nbv = _impl_glVertexAttrib4Nbv;

static void GL_APIENTRY _impl_glClipPlane (GLenum plane, const GLdouble * equation) {
  printf("* glClipPlane\n");
  _glptr_glClipPlane = (PFN_glClipPlane)GalogenGetProcAddress("glClipPlane");
   _glptr_glClipPlane(plane, equation);
  CHECK_ERROR();
  _glptr_glClipPlane = _impl_glClipPlane;
}
PFN_glClipPlane _glptr_glClipPlane = _impl_glClipPlane;

static void GL_APIENTRY _impl_glEnable (GLenum cap) {
  printf("* glEnable\n");
  _glptr_glEnable = (PFN_glEnable)GalogenGetProcAddress("glEnable");
   _glptr_glEnable(cap);
  CHECK_ERROR();
  _glptr_glEnable = _impl_glEnable;
}
PFN_glEnable _glptr_glEnable = _impl_glEnable;

static void GL_APIENTRY _impl_glTranslatef (GLfloat x, GLfloat y, GLfloat z) {
  printf("* glTranslatef\n");
  _glptr_glTranslatef = (PFN_glTranslatef)GalogenGetProcAddress("glTranslatef");
   _glptr_glTranslatef(x, y, z);
  CHECK_ERROR();
  _glptr_glTranslatef = _impl_glTranslatef;
}
PFN_glTranslatef _glptr_glTranslatef = _impl_glTranslatef;

static void GL_APIENTRY _impl_glGetProgramLocalParameterfvARB (GLenum target, GLuint index, GLfloat * params) {
  printf("* glGetProgramLocalParameterfvARB\n");
  _glptr_glGetProgramLocalParameterfvARB = (PFN_glGetProgramLocalParameterfvARB)GalogenGetProcAddress("glGetProgramLocalParameterfvARB");
   _glptr_glGetProgramLocalParameterfvARB(target, index, params);
  CHECK_ERROR();
  _glptr_glGetProgramLocalParameterfvARB = _impl_glGetProgramLocalParameterfvARB;
}
PFN_glGetProgramLocalParameterfvARB _glptr_glGetProgramLocalParameterfvARB = _impl_glGetProgramLocalParameterfvARB;

static void GL_APIENTRY _impl_glGetBooleanv (GLenum pname, GLboolean * data) {
  printf("* glGetBooleanv\n");
  _glptr_glGetBooleanv = (PFN_glGetBooleanv)GalogenGetProcAddress("glGetBooleanv");
   _glptr_glGetBooleanv(pname, data);
  CHECK_ERROR();
  _glptr_glGetBooleanv = _impl_glGetBooleanv;
}
PFN_glGetBooleanv _glptr_glGetBooleanv = _impl_glGetBooleanv;

static void GL_APIENTRY _impl_glScissor (GLint x, GLint y, GLsizei width, GLsizei height) {
  printf("* glScissor\n");
  _glptr_glScissor = (PFN_glScissor)GalogenGetProcAddress("glScissor");
   _glptr_glScissor(x, y, width, height);
  CHECK_ERROR();
  _glptr_glScissor = _impl_glScissor;
}
PFN_glScissor _glptr_glScissor = _impl_glScissor;

static void GL_APIENTRY _impl_glCopyTexImage1D (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border) {
  printf("* glCopyTexImage1D\n");
  _glptr_glCopyTexImage1D = (PFN_glCopyTexImage1D)GalogenGetProcAddress("glCopyTexImage1D");
   _glptr_glCopyTexImage1D(target, level, internalformat, x, y, width, border);
  CHECK_ERROR();
  _glptr_glCopyTexImage1D = _impl_glCopyTexImage1D;
}
PFN_glCopyTexImage1D _glptr_glCopyTexImage1D = _impl_glCopyTexImage1D;

static void GL_APIENTRY _impl_glDisableVertexAttribArray (GLuint index) {
  printf("* glDisableVertexAttribArray\n");
  _glptr_glDisableVertexAttribArray = (PFN_glDisableVertexAttribArray)GalogenGetProcAddress("glDisableVertexAttribArray");
   _glptr_glDisableVertexAttribArray(index);
  CHECK_ERROR();
  _glptr_glDisableVertexAttribArray = _impl_glDisableVertexAttribArray;
}
PFN_glDisableVertexAttribArray _glptr_glDisableVertexAttribArray = _impl_glDisableVertexAttribArray;

static void GL_APIENTRY _impl_glColor4s (GLshort red, GLshort green, GLshort blue, GLshort alpha) {
  printf("* glColor4s\n");
  _glptr_glColor4s = (PFN_glColor4s)GalogenGetProcAddress("glColor4s");
   _glptr_glColor4s(red, green, blue, alpha);
  CHECK_ERROR();
  _glptr_glColor4s = _impl_glColor4s;
}
PFN_glColor4s _glptr_glColor4s = _impl_glColor4s;

static void GL_APIENTRY _impl_glVertexAttrib3fvARB (GLuint index, const GLfloat * v) {
  printf("* glVertexAttrib3fvARB\n");
  _glptr_glVertexAttrib3fvARB = (PFN_glVertexAttrib3fvARB)GalogenGetProcAddress("glVertexAttrib3fvARB");
   _glptr_glVertexAttrib3fvARB(index, v);
  CHECK_ERROR();
  _glptr_glVertexAttrib3fvARB = _impl_glVertexAttrib3fvARB;
}
PFN_glVertexAttrib3fvARB _glptr_glVertexAttrib3fvARB = _impl_glVertexAttrib3fvARB;

static void GL_APIENTRY _impl_glLightModeliv (GLenum pname, const GLint * params) {
  printf("* glLightModeliv\n");
  _glptr_glLightModeliv = (PFN_glLightModeliv)GalogenGetProcAddress("glLightModeliv");
   _glptr_glLightModeliv(pname, params);
  CHECK_ERROR();
  _glptr_glLightModeliv = _impl_glLightModeliv;
}
PFN_glLightModeliv _glptr_glLightModeliv = _impl_glLightModeliv;

static void GL_APIENTRY _impl_glCompressedTexSubImage3D (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void * data) {
  printf("* glCompressedTexSubImage3D\n");
  _glptr_glCompressedTexSubImage3D = (PFN_glCompressedTexSubImage3D)GalogenGetProcAddress("glCompressedTexSubImage3D");
   _glptr_glCompressedTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
  CHECK_ERROR();
  _glptr_glCompressedTexSubImage3D = _impl_glCompressedTexSubImage3D;
}
PFN_glCompressedTexSubImage3D _glptr_glCompressedTexSubImage3D = _impl_glCompressedTexSubImage3D;

static void GL_APIENTRY _impl_glNormalPointer (GLenum type, GLsizei stride, const void * pointer) {
  printf("* glNormalPointer\n");
  _glptr_glNormalPointer = (PFN_glNormalPointer)GalogenGetProcAddress("glNormalPointer");
   _glptr_glNormalPointer(type, stride, pointer);
  CHECK_ERROR();
  _glptr_glNormalPointer = _impl_glNormalPointer;
}
PFN_glNormalPointer _glptr_glNormalPointer = _impl_glNormalPointer;

static void GL_APIENTRY _impl_glGetDoublev (GLenum pname, GLdouble * data) {
  printf("* glGetDoublev\n");
  _glptr_glGetDoublev = (PFN_glGetDoublev)GalogenGetProcAddress("glGetDoublev");
   _glptr_glGetDoublev(pname, data);
  CHECK_ERROR();
  _glptr_glGetDoublev = _impl_glGetDoublev;
}
PFN_glGetDoublev _glptr_glGetDoublev = _impl_glGetDoublev;

static void GL_APIENTRY _impl_glNormal3bv (const GLbyte * v) {
  printf("* glNormal3bv\n");
  _glptr_glNormal3bv = (PFN_glNormal3bv)GalogenGetProcAddress("glNormal3bv");
   _glptr_glNormal3bv(v);
  CHECK_ERROR();
  _glptr_glNormal3bv = _impl_glNormal3bv;
}
PFN_glNormal3bv _glptr_glNormal3bv = _impl_glNormal3bv;

